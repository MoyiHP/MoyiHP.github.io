<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>算法练习之回溯法</title>
      <link href="/2022/07/13/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0%E4%B9%8B%E5%9B%9E%E6%BA%AF%E6%B3%95/"/>
      <url>/2022/07/13/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0%E4%B9%8B%E5%9B%9E%E6%BA%AF%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p><em>代码随想录 学习刷题笔记</em><br><em>题目来自力扣网</em></p><h1 id="理论基础"><a href="#理论基础" class="headerlink" title="理论基础"></a>理论基础</h1><ul><li>回溯法&#x2F;回溯搜索法，是一种基于递归与穷举的算法，因为本质上是穷举，它的效率并不高</li><li>常见的可以利用回溯法解决的问题类型有如下，共同特点在所有集合&#x2F;排列中寻找符合条件的集合&#x2F;排列<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1. 组合类问题 如从N个数中按照一定规则找到K个数的集合</span><br><span class="line">2. 切割类问题 如一个字符串中按照一定规则有几种切分方式</span><br><span class="line">3. 子集类问题 如一个N个数的集合有多少符合条件的子集</span><br><span class="line">4. 排列类问题 如N个数按照一定规则有几种可能的排列方式</span><br><span class="line">5. 棋盘类问题 如N皇后问题、求解数独</span><br><span class="line">说明</span><br><span class="line">组合 和 排列 是两个不同的概念，组合不讲求元素的先后顺序，&#123;1,2&#125;和&#123;2,1&#125;是两个相同的组合；排列讲究元素的先后顺序&#123;1,2&#125;和&#123;2,1&#125;是两个不同的排列</span><br></pre></td></tr></table></figure></li><li>回溯法所解决的问题均可以抽象为<strong>树形结构</strong>，集合的大小决定了树的宽度，递归的深度决定了树的深度<pre class="mermaid">graphROOT((ROOT))S1((S1))S2((S2))SI((s.))SN((SN))</li></ul><p>S12((S12))<br>S13((S13))<br>S1I((S1.))<br>S1N((S1N))</p><p>ROOT –&gt; S1<br>ROOT –&gt; S2<br>ROOT –&gt; SI<br>ROOT –&gt; SN</p><p>S1 –&gt; S12<br>S1 –&gt; S13<br>S1 –&gt; S1I<br>S1 –&gt; S1N</pre></p><ul><li>回溯法的算法模板<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 回溯函数的返回值一般为void, 因为回溯函数大都是求解所有的可能解,所以一般会有全局变量来存储可能解</span></span><br><span class="line"><span class="comment">// 2. 回溯函数的参数一般是不固定的, 需要根据实际逻辑需要补充</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">backtracking</span><span class="params">(参数)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// 3. 回溯函数是需要有终止条件的</span></span><br><span class="line"><span class="comment">// 一般的终止条件是 到达叶子节点了无法继续深入 | 当前状态已经满足条件了 | 当前状态继续递归下去没有可能满足条件了(剪枝)</span></span><br><span class="line">    <span class="keyword">if</span> (终止条件) </span><br><span class="line">    &#123;</span><br><span class="line">        存放结果;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在本层上的搜索就是一个for循环来实现</span></span><br><span class="line">    <span class="keyword">for</span> (选择：本层集合中元素（树中节点孩子的数量就是集合的大小）) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 根据本层的每种可能发展 进行处理</span></span><br><span class="line">        处理节点;</span><br><span class="line">        <span class="comment">// 递归</span></span><br><span class="line">        <span class="built_in">backtracking</span>(路径，选择列表);</span><br><span class="line">        回溯，撤销处理结果</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><hr><h1 id="1-组合类问题"><a href="#1-组合类问题" class="headerlink" title="1. 组合类问题"></a>1. 组合类问题</h1><ul><li>由于组合存在一个 不考虑元素先后顺序的特性存在，在实际解决问题时往往可以不妨假设我们按某种顺序来选择元素</li></ul><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><h3 id="T77-组合"><a href="#T77-组合" class="headerlink" title="T77 组合"></a>T77 组合</h3><p><a href="https://leetcode.cn/problems/combinations/">https://leetcode.cn/problems/combinations/</a><br>给定两个整数 n 和 k，返回范围 [1, n] 中所有可能的 k 个数的组合。你可以按 任何顺序 返回答案。<br><strong>分析</strong></p><ul><li>这是一个组合类的问题，适用于回溯法来解决</li><li>回溯法本质上仍旧是暴力搜索，但简单的 for 循环嵌套是没办法解决这个题目的，因为 很明显使用嵌套for循环的话需要K层for循环，但是 K 的值是不确定的</li><li>由于是组合类问题，组合对于元素的排列顺序是不敏感的，也就是说对于 {1,2} 和 {2,1} 这两种情况，有且只有一个需要保留，那么，在考虑元素选定的时候，就完全可以从左往右依次考虑了</li><li>回溯法的三部曲</li><li><ul><li>函数返回值 \ 函数参数 \ 当前状态的定义<br>首先需要定义的是 符合条件的结果存放容器，由于这里是多个整数的组合，所以可以确定为<code>vector&lt;vector&lt;int&gt;&gt; res</code><br>然后需要定义当前状态，由分析可以得知，当前的状态包括1. 当前已经选择的整数的结合<code>vector&lt;int&gt; path</code> 2. 当前可选择范围<code>[start,n]</code><br>函数参数的确定基于上述讨论，可以将上述数据结构作为函数参数，此时注意res通常需要采用引用的形式；也可以将它们作为全局变量来保证回溯函数可访问<br>所以此时的回溯函数可写为<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; res;</span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; path</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">backtrack</span><span class="params">(<span class="type">int</span> start, <span class="type">int</span> n, <span class="type">int</span> k)</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><ul><li>递归结束条件的确定<br>这里很简单，当当前路径中的元素个数达到K即可<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; res;</span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; path</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">backtrack</span><span class="params">(<span class="type">int</span> start, <span class="type">int</span> n, <span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(path.<span class="built_in">size</span>() == k)</span><br><span class="line">&#123;</span><br><span class="line">res.<span class="built_in">push_back</span>(path);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><ul><li>本层的搜索 <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; res;</span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; path</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">backtrack</span><span class="params">(<span class="type">int</span> start, <span class="type">int</span> n, <span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(path.<span class="built_in">size</span>() == k)</span><br><span class="line">&#123;</span><br><span class="line">res.<span class="built_in">push_back</span>(path);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = start; i &lt;= n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 处理</span></span><br><span class="line">path.<span class="built_in">push_back</span>(i);</span><br><span class="line"><span class="comment">// 递归</span></span><br><span class="line"><span class="comment">// 逆天错误....backtrack(start+1,n,k);</span></span><br><span class="line"><span class="built_in">backtrack</span>(i+<span class="number">1</span>,n,k);</span><br><span class="line"><span class="comment">// 回溯</span></span><br><span class="line">path.<span class="built_in">pop_back</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li>剪枝优化 进行本层搜索时真的有必要搜索所有的元素吗？因为总需要元素个数为K个，当前已经选择元素为 path.size() 个，那么剩下的元素个数 n - i + 1 至少要大于等于 K - path.size() ，所以 <code>i &lt;= n + 1 - k + path.size()</code></li></ul><hr><p><strong>代码</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; res;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; path;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">backtrack</span><span class="params">(<span class="type">int</span> start, <span class="type">int</span> n, <span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// 终止条件</span></span><br><span class="line">        <span class="keyword">if</span> (path.<span class="built_in">size</span>() == k)</span><br><span class="line">        &#123;</span><br><span class="line">            res.<span class="built_in">push_back</span>(path);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 本层搜索</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = start; i &lt;= n + <span class="number">1</span> - k + path.<span class="built_in">size</span>(); i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 处理</span></span><br><span class="line">            path.<span class="built_in">push_back</span>(i);</span><br><span class="line">            <span class="comment">// 递归</span></span><br><span class="line">            <span class="built_in">backtrack</span>(i + <span class="number">1</span>, n, k);</span><br><span class="line">            <span class="comment">// 回溯</span></span><br><span class="line">            path.<span class="built_in">pop_back</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">combine</span>(<span class="type">int</span> n, <span class="type">int</span> k) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">backtrack</span>(<span class="number">1</span>, n, k);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><hr><h3 id="T216-组合总和III"><a href="#T216-组合总和III" class="headerlink" title="T216 组合总和III"></a>T216 组合总和III</h3><p><a href="https://leetcode.cn/problems/combination-sum-iii/">https://leetcode.cn/problems/combination-sum-iii/</a><br>找出所有相加之和为 n 的 k 个数的组合，且满足下列条件：1. 只使用数字1到9 \ 2. 每个数字 最多使用一次 ；返回 所有可能的有效组合的列表 。该列表不能包含相同的组合两次，组合可以以任何顺序返回。</p><ul><li>类似T77 组合 多加了一个条件<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; res;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; path;</span><br><span class="line">    <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">backtrack</span><span class="params">(<span class="type">int</span> k, <span class="type">int</span> n, <span class="type">int</span> start)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (path.<span class="built_in">size</span>() == k &amp;&amp; sum == n)</span><br><span class="line">        &#123;</span><br><span class="line">            res.<span class="built_in">push_back</span>(path);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (sum &gt; n)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = start; i &lt;= <span class="number">9</span> - (k - path.<span class="built_in">size</span>()) + <span class="number">1</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 处理</span></span><br><span class="line">            sum += i;</span><br><span class="line">            path.<span class="built_in">push_back</span>(i);</span><br><span class="line">            <span class="comment">// 递归</span></span><br><span class="line">            <span class="built_in">backtrack</span>(k, n, i + <span class="number">1</span>);</span><br><span class="line">            <span class="comment">// 回溯</span></span><br><span class="line">            sum -= i;</span><br><span class="line">            path.<span class="built_in">pop_back</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">combinationSum3</span>(<span class="type">int</span> k, <span class="type">int</span> n) </span><br><span class="line">    &#123;</span><br><span class="line">        res.<span class="built_in">clear</span>();</span><br><span class="line">        path.<span class="built_in">clear</span>();</span><br><span class="line">        <span class="built_in">backtrack</span>(k, n, <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul><hr><h3 id="T17-电话号码的字母组合"><a href="#T17-电话号码的字母组合" class="headerlink" title="T17 电话号码的字母组合"></a>T17 电话号码的字母组合</h3><p><a href="https://leetcode.cn/problems/letter-combinations-of-a-phone-number/">https://leetcode.cn/problems/letter-combinations-of-a-phone-number/</a><br>给定一个仅包含数字 2-9 的字符串，返回所有它能表示的字母组合<br>答案可以按 任意顺序 返回<br>数字到字母的映射与电话按键相同</p><ul><li>大体思路仍旧是不变的，注意表的使用<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    string digits;</span><br><span class="line">    vector&lt;string&gt; res;</span><br><span class="line">    string path;</span><br><span class="line">    map&lt;<span class="type">char</span>, string&gt; table = &#123;</span><br><span class="line">        &#123;<span class="string">&#x27;1&#x27;</span>,<span class="string">&quot;&quot;</span>&#125;,</span><br><span class="line">        &#123;<span class="string">&#x27;2&#x27;</span>,<span class="string">&quot;abc&quot;</span>&#125;,</span><br><span class="line">        &#123;<span class="string">&#x27;3&#x27;</span>,<span class="string">&quot;def&quot;</span>&#125;,</span><br><span class="line">        &#123;<span class="string">&#x27;4&#x27;</span>,<span class="string">&quot;ghi&quot;</span>&#125;,</span><br><span class="line">        &#123;<span class="string">&#x27;5&#x27;</span>,<span class="string">&quot;jkl&quot;</span>&#125;,</span><br><span class="line">        &#123;<span class="string">&#x27;6&#x27;</span>,<span class="string">&quot;mno&quot;</span>&#125;,</span><br><span class="line">        &#123;<span class="string">&#x27;7&#x27;</span>,<span class="string">&quot;pqrs&quot;</span>&#125;,</span><br><span class="line">        &#123;<span class="string">&#x27;8&#x27;</span>,<span class="string">&quot;tuv&quot;</span>&#125;,</span><br><span class="line">        &#123;<span class="string">&#x27;9&#x27;</span>,<span class="string">&quot;wxyz&quot;</span>&#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">backtrack</span><span class="params">(<span class="type">int</span> cur)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (path.<span class="built_in">size</span>() == digits.<span class="built_in">size</span>())</span><br><span class="line">        &#123;</span><br><span class="line">            res.<span class="built_in">push_back</span>(path);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">char</span> ch : table[digits[cur]])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 处理</span></span><br><span class="line">            path.<span class="built_in">push_back</span>(ch);</span><br><span class="line">            <span class="comment">// 递归</span></span><br><span class="line">            <span class="built_in">backtrack</span>(cur + <span class="number">1</span>);</span><br><span class="line">            <span class="comment">// 回溯</span></span><br><span class="line">            path.<span class="built_in">pop_back</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;string&gt; <span class="title">letterCombinations</span><span class="params">(string digits)</span> </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (digits.<span class="built_in">size</span>() == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>-&gt;digits = digits;</span><br><span class="line">        <span class="built_in">backtrack</span>(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul><hr><h3 id="T39-组合总和"><a href="#T39-组合总和" class="headerlink" title="T39 组合总和"></a>T39 组合总和</h3><p><a href="https://leetcode.cn/problems/combination-sum/">https://leetcode.cn/problems/combination-sum/</a><br>给你一个 无重复元素 的整数数组 candidates 和一个目标整数 target ，找出 candidates 中可以使数字和为目标数 target 的 所有 不同组合 ，并以列表形式返回。你可以按 任意顺序 返回这些组合。<br>candidates 中的 同一个 数字可以 无限制重复被选取 。如果至少一个数字的被选数量不同，则两种组合是不同的。 <br>对于给定的输入，保证和为 target 的不同组合数少于 150 个。</p><ul><li>这个问题相较于之前的问题有两点不同</li><li><ul><li>第一、同一个数字可以被重复的选取</li></ul></li><li><ul><li>第二、组合的元素个数没有限制</li></ul></li><li>所以需要考虑</li><li><ul><li>第一、为了方便，将数组 candidates 做排序，从而由小到大的考虑，避免出现 ABA AAB 的重复组合的判定的问题</li></ul></li><li><ul><li>第二、由于可以重复的考虑元素，每次递归调用时的 下一层的选择范围时 i,n； 是不用加一的</li></ul></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; res;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; path;</span><br><span class="line">    <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">backtrack</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; candidates, <span class="type">int</span> target, <span class="type">int</span> start)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (sum == target)</span><br><span class="line">        &#123;</span><br><span class="line">            res.<span class="built_in">push_back</span>(path);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (sum &gt; target)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = start; i &lt;= candidates.<span class="built_in">size</span>() - <span class="number">1</span> &amp;&amp; sum + candidates[i] &lt;= target ; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 处理</span></span><br><span class="line">            path.<span class="built_in">push_back</span>(candidates[i]);</span><br><span class="line">            sum += candidates[i];</span><br><span class="line">            <span class="comment">// 递归</span></span><br><span class="line">            <span class="comment">// 不妨假设是有序的选择元素</span></span><br><span class="line">            <span class="built_in">backtrack</span>(candidates, target, i);</span><br><span class="line">            <span class="comment">// 回溯</span></span><br><span class="line">            sum -= candidates[i];</span><br><span class="line">            path.<span class="built_in">pop_back</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">combinationSum</span>(vector&lt;<span class="type">int</span>&gt;&amp; candidates, <span class="type">int</span> target) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">sort</span>(candidates.<span class="built_in">begin</span>(), candidates.<span class="built_in">end</span>());</span><br><span class="line">        <span class="built_in">backtrack</span>(candidates, target, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><hr><h3 id="T40-组合总和"><a href="#T40-组合总和" class="headerlink" title="T40 组合总和"></a>T40 组合总和</h3><p><a href="https://leetcode.cn/problems/combination-sum-ii/">https://leetcode.cn/problems/combination-sum-ii/</a><br>给定一个候选人编号的集合 candidates 和一个目标数 target ，找出 candidates 中所有可以使数字和为 target 的组合。<br>candidates 中的每个数字在每个组合中只能使用 一次 。<br><code>注意：解集不能包含重复的组合</code></p><p><em>这个题目的核心点在于重复元素与去重 很棒的理解</em><br>参考：<br><a href="https://programmercarl.com/0040.%E7%BB%84%E5%90%88%E6%80%BB%E5%92%8CII.html#%E5%9B%9E%E6%BA%AF%E4%B8%89%E9%83%A8%E6%9B%B2">https://programmercarl.com/0040.%E7%BB%84%E5%90%88%E6%80%BB%E5%92%8CII.html#%E5%9B%9E%E6%BA%AF%E4%B8%89%E9%83%A8%E6%9B%B2</a></p><p><strong>思路！</strong></p><ul><li>这个题目最大的特点在于 原生数组candidates是存在重复元素的，如{A,A,B}；结果组合中也是包含重复元素的，即可以有{A,A,B}，但是所有的结果组合中不能存在重复的组合，即不能有{A,X,B}和{X,A,B,}(X代表该位置上的元素没有选取)</li><li>首先一点，为了能够在遍历选择元素的时候能够发现重复元素，同时组合也有元素先后顺序不敏感的特点，首先要对原数组做排序，<strong>排序是去重的基础</strong></li><li>此时，再来看 <code>元素重复</code> 与 <code>组合重复</code> 这两个概念在回溯代码上的体现</li><li><ul><li>元素重复结合上一题（T39）可以发现，是发生在 <code>由本层向下一层 确定下一层可选择元素范围</code>的时候发生的，是<code>发生在树的一条枝干上的</code>，如果我们要对某一个结果内的元素去重，这是<code>树枝去重</code>，是<code>确定下一层的可选择元素范围的时候，跳过所有与当前选择元素相等的元素</code></li></ul></li><li><ul><li>组合重复，是发生在<code>本层选择/未有了当前元素,下一层未选择/选择了下一元素，而下一元素与当前元素相等</code>的情况下的，是<code>发生在树的某个树层上的</code>，如果我们要对某一个结果集内的结果组合去重，这是<code>树层去重</code>，是<code>在本层选择元素的时候，对相等的元素只选择一次</code></li></ul></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; res;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; path;</span><br><span class="line">    <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">backtrack</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; candidates, <span class="type">int</span> target, <span class="type">int</span> start)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (sum == target)</span><br><span class="line">        &#123;</span><br><span class="line">            res.<span class="built_in">push_back</span>(path);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (sum &gt; target)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> last = <span class="number">0</span>;   <span class="comment">// 1 &lt;= candidates[i] &lt;= 50</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = start; i &lt;= candidates.<span class="built_in">size</span>() - <span class="number">1</span> &amp;&amp;  sum + candidates[i] &lt;= target; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 本层不能选择重复的元素</span></span><br><span class="line">            <span class="keyword">if</span> (candidates[i] &gt; last)</span><br><span class="line">            &#123;</span><br><span class="line">                last = candidates[i];</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 处理</span></span><br><span class="line">                path.<span class="built_in">push_back</span>(candidates[i]);</span><br><span class="line">                sum += candidates[i];</span><br><span class="line">                <span class="comment">// 递归</span></span><br><span class="line">                <span class="built_in">backtrack</span>(candidates, target, i + <span class="number">1</span>);</span><br><span class="line">                <span class="comment">// 回溯</span></span><br><span class="line">                sum -= candidates[i];</span><br><span class="line">                path.<span class="built_in">pop_back</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">combinationSum2</span>(vector&lt;<span class="type">int</span>&gt;&amp; candidates, <span class="type">int</span> target) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">sort</span>(candidates.<span class="built_in">begin</span>(), candidates.<span class="built_in">end</span>());</span><br><span class="line">        <span class="built_in">backtrack</span>(candidates, target, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><hr><h1 id="2-切割问题"><a href="#2-切割问题" class="headerlink" title="2. 切割问题"></a>2. 切割问题</h1><h2 id="理论部分"><a href="#理论部分" class="headerlink" title="理论部分"></a>理论部分</h2><ul><li>切割问题的本质是组合问题的衍生，它与组合问题的异同点在于</li><li><ul><li>它们都是在一个序列上选择一定数量的元素&#x2F;位置，组合问题将元素放在一起成为组合，切割问题将这些位置选择出来从而切分出了一系列子串</li></ul></li><li><ul><li>组合问题的终止&#x2F;限制条件和元素的选择依据是基于组合的，切割问题的终止&#x2F;限制条件和位置的选择依据是基于子串的</li></ul></li></ul><h2 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h2><h3 id="T131-分割回文串"><a href="#T131-分割回文串" class="headerlink" title="T131 分割回文串"></a>T131 分割回文串</h3><p><a href="https://leetcode.cn/problems/palindrome-partitioning/">https://leetcode.cn/problems/palindrome-partitioning/</a><br>给你一个字符串 s，请你将 s 分割成一些子串，使每个子串都是 回文串 。返回 s 所有可能的分割方案。 回文串 是正着读和反着读都一样的字符串。<br><strong>分析</strong> </p><ul><li>两个核心点，一是分割，二是回文的判定</li><li>分割的方法是回溯法，</li><li><ul><li>第一步 定参数 ： 需要的数据结构有<code>记录结果集合的vector&lt;vector&lt;string&gt;&gt; res</code>和<code>记录当前切分的vector&lt;string&gt; path</code>，此外还需要一个记录当前其实点的<code>int start</code><br><em>注意到这里路径记录的就是子串了，对比组合问题中的path记录的是选取的元素组成的组合，这里可以很明显的感受到组合问题与切割问题的核心点的不同</em></li></ul></li><li><ul><li>第二步 定终止条件 ： 当字符串被全部切分的时候，即<code>start &gt;= size</code>的时候，说明其已经被完全切分了</li></ul></li><li><ul><li>第三步 定搜索逻辑 ： 当前层的任务就是在 string[start,size()-1]中找到一个以 start打头的子串[start,i]，如果可以找到，下一层的搜索范围就是[i+1,size()-1]</li></ul></li><li>回文的判定可以采用双指针 - 前后指针法</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    vector&lt;vector&lt;string&gt;&gt; res;</span><br><span class="line">    vector&lt;string&gt; path;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">backtrack</span><span class="params">(string s, <span class="type">int</span> start)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (start &gt;= s.<span class="built_in">size</span>())</span><br><span class="line">        &#123;</span><br><span class="line">            res.<span class="built_in">push_back</span>(path);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = start; i &lt;= s.<span class="built_in">size</span>() - <span class="number">1</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">isPalindrome</span>(s.<span class="built_in">substr</span>(start, i - start + <span class="number">1</span>)))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// 处理</span></span><br><span class="line">                path.<span class="built_in">push_back</span>(s.<span class="built_in">substr</span>(start, i - start + <span class="number">1</span>));</span><br><span class="line">                <span class="comment">// 递归</span></span><br><span class="line">                <span class="built_in">backtrack</span>(s, i + <span class="number">1</span>);</span><br><span class="line">                <span class="comment">// 回溯</span></span><br><span class="line">                path.<span class="built_in">pop_back</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isPalindrome</span><span class="params">(string s)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>, j = s.<span class="built_in">size</span>() - <span class="number">1</span>; i &lt; j; i++, j--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (s[i] != s[j])</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;string&gt;&gt; <span class="built_in">partition</span>(string s) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (s.<span class="built_in">size</span>() &gt;= <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">backtrack</span>(s, <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><hr><h3 id="T93-复原IP地址"><a href="#T93-复原IP地址" class="headerlink" title="T93 复原IP地址"></a>T93 复原IP地址</h3><p>有效 IP 地址 正好由四个整数（每个整数位于 0 到 255 之间组成，且不能含有前导 0），整数之间用 ‘.’ 分隔。<br>例如：”0.1.2.201” 和 “192.168.1.1” 是 有效 IP 地址，但是 “0.011.255.245”、”192.168.1.312” 和 “<a href="mailto:&#x31;&#57;&#x32;&#46;&#49;&#x36;&#x38;&#x40;&#49;&#46;&#49;">&#x31;&#57;&#x32;&#46;&#49;&#x36;&#x38;&#x40;&#49;&#46;&#49;</a>“ 是 无效 IP 地址。<br>给定一个只包含数字的字符串 s ，用以表示一个 IP 地址，返回所有可能的有效 IP 地址，这些地址可以通过在 s 中插入 ‘.’ 来形成。你 不能 重新排序或删除 s 中的任何数字。你可以按 任何 顺序返回答案。<br><strong>分析</strong></p><ul><li>定参数 ： 一个路径<code>vector&lt;string&gt; path</code> 、一个结果集记录<code>vector&lt;string&gt; res（因为后面返回的也是vector&lt;string&gt; 所以这里索性直接将有效的path组合后再放进res）</code></li><li>定终止条件 ： 整个字符串被分割为4个有效的子串 – PATH中含有3个有效的子串，剩下的部分也是一个有效的子串</li><li>定搜索逻辑 ： 同上题</li><li><ul><li>特别的 如果一个子串不是有效串，那么其延长串也不会是有效串</li></ul></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    vector&lt;string&gt; res;         <span class="comment">// res 记录当前的解，不用二维数组是因为需要将其组合为x.x.x.x的形式输出,这里直接在里面放x.x.x.x</span></span><br><span class="line">    vector&lt;string&gt; path;        <span class="comment">// path 记录当前分割的结果</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">backtrack</span><span class="params">(string s, <span class="type">int</span> start)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// 终止条件是 分割成了4个串</span></span><br><span class="line">        <span class="comment">// 亦即 path 中有三个有效串 剩下的部分也是一个有效串</span></span><br><span class="line">        <span class="keyword">if</span> (path.<span class="built_in">size</span>() == <span class="number">3</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">isValid</span>(s.<span class="built_in">substr</span>(start,s.<span class="built_in">size</span>() - start)))</span><br><span class="line">            &#123;</span><br><span class="line">                res.<span class="built_in">push_back</span>(path[<span class="number">0</span>] + <span class="string">&quot;.&quot;</span> + path[<span class="number">1</span>] + <span class="string">&quot;.&quot;</span> + path[<span class="number">2</span>] + <span class="string">&quot;.&quot;</span> + s.<span class="built_in">substr</span>(start, s.<span class="built_in">size</span>() - start));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = start; i &lt;= s.<span class="built_in">size</span>() - <span class="number">1</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">isValid</span>(s.<span class="built_in">substr</span>(start, i - start + <span class="number">1</span>)))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// 处理 </span></span><br><span class="line">                path.<span class="built_in">push_back</span>(s.<span class="built_in">substr</span>(start, i - start + <span class="number">1</span>));</span><br><span class="line">                <span class="comment">// 递归</span></span><br><span class="line">                <span class="built_in">backtrack</span>(s, i + <span class="number">1</span>);</span><br><span class="line">                <span class="comment">// 回溯</span></span><br><span class="line">                path.<span class="built_in">pop_back</span>();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// 这里可以BREAK的原因是</span></span><br><span class="line">                <span class="comment">// 如果一个字符串不是一个有效的串的话  那么在其后面加东西也不会让其变成有效串</span></span><br><span class="line">                <span class="comment">// 对于 s.substr(start, i - start + 1) 是空字符串的情况 这是不会出现的</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isValid</span><span class="params">(string s)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// 1. 空字符串不合法</span></span><br><span class="line">        <span class="keyword">if</span> (s.<span class="built_in">empty</span>())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 2. 有前导0不合法</span></span><br><span class="line">        <span class="keyword">if</span> (s[<span class="number">0</span>] == <span class="string">&#x27;0&#x27;</span> &amp;&amp; s.<span class="built_in">size</span>() &gt; <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= s.<span class="built_in">size</span>() <span class="number">-1</span> ; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="string">&#x27;0&#x27;</span> &lt;= s[i] &amp;&amp; s[i] &lt;= <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                sum = sum * <span class="number">10</span> + (s[i] - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">                <span class="comment">// 3. 过大的数字 不合法</span></span><br><span class="line">                <span class="keyword">if</span> (sum &gt; <span class="number">255</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 4. 有非数字字符 不合法</span></span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">      </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;string&gt; <span class="title">restoreIpAddresses</span><span class="params">(string s)</span> </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (s.<span class="built_in">size</span>() &gt;= <span class="number">4</span> &amp;&amp; s.<span class="built_in">size</span>() &lt;= <span class="number">12</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">backtrack</span>(s, <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 面试 </tag>
            
            <tag> C++ </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>笔试经历友塔游戏</title>
      <link href="/2022/07/11/%E7%AC%94%E8%AF%95%E7%BB%8F%E5%8E%86%E5%8F%8B%E5%A1%94%E6%B8%B8%E6%88%8F/"/>
      <url>/2022/07/11/%E7%AC%94%E8%AF%95%E7%BB%8F%E5%8E%86%E5%8F%8B%E5%A1%94%E6%B8%B8%E6%88%8F/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="e50212e9f64cbff5d773808bfdd452ba82d9225cf08023c2433be98b8ba5ab2b">c9abe5a272df317dbb93fc2825688b5e60abdf9056f407c9255e7598865c5a8347d698e41f299ac1431d6bd0cd64850c7cee2e870a94ae2e88519ead2d1cce010248b8174d2ab92b28aa02a8c5a3ee3d0230a32d4ae5249d8008b3be890bc4b5209c296d9730f54db40f05dd4cd57ad5358d7c3d466093246115c7db8755711998220ac0940c3478e4891d2ba5e8ccabf8ac1598c4fd1f201b7a0eb5eef985a28f8dd9547a5427cce5c8df0655bfbab062c048cf90bcb1d6179fa9276615dc262c20d37e9c90ae1cc63954cb4893a8573f1ab381666c731d06393f47c007e39203c33067b5c0613210a417e9141088234005df07c14c894998154d2f2cca19c84f5be60e221dc04d5c006c5e95f58eee96ba37177b8a9b033ea413de1a5f26f0ba807b377c933c5e1026542338f6984a72b6bfe60dab00df95ab0ba95bb72a7850cc2299ca457183f4aa1f58f26784d9975d337bdd268be76d57100aef1c0f6edd4526b51db8ef84b81234f49273870c08f6a3ce9063ecb36c4694d1c363277addf2d1f0685ddf262eb7a12fdae303a866ba4b5cd7df810c644a842fdff074cd21ccea628d390457cd17a939f83bfe011b21614a514cad92a6c1df16ed544fc4a9365c56d5afaa10cf8710b7c715ec3507c0ce154e10e8768218d6b9d52f465032c5f8d313a9b9c0b983150fe65b5f279bb5763e1740147e82d050977594c69cb1705c1bef3d2ec803b5004b2b5dbae9ee47481d7089c96a91f751fb8e6c93a7044a327c21f1851c824a49f60cd7f172d57e1a49c10f68e7b0b5d94982e0b52f30bbca13337ab4a95b898871febb3ac8d932e31794f7cedda2f42c68f5e80a625115d8ecf2f343fe4b4391c6ddd812eb57f678806871e6dcf294e5399cafa9db7c485b45f2b2e6fd767d442ea90d0ec9fe044a9759e109dc40b1ffee9cee695aeb8a9fb106355a198c7ed9f658635d0c4df43b55216a2dc352c9791a2fc3d3896b5d985067987031ca65be6e30d9be283aa580a37d5666029cf9cb015c66fdf10ed26d4de8d656cce3f58510dae3380ec9ff623a88c8785471fbd8b120af57448a434f4ae530058ab5ddb48fa1637140000f63983f1d8e2f60efce8dd3f11c1bd16f6393dc9d812195f53401d54a591fe67c434d6ae03fe065eaa02b1363a38ea09188ec12888ee0070dbc54fed9700248e041a2ab012308f6016aa821bb3528368a120caca895c5078fd76f31e6f35d6131e8b2797731af749f19419b122b1530d051749b4855421b923305504d7306263f60b9795e45dcc8efe668b542ae79464b4f33b6f8beddf58ef1ec90e4a6fa0a742e478ad5829884d10cd519b8d10b540a5960802c9fca7c1ed17fa2b07fd7910114caa1a1ee536e207c7a86f7a7bd756a35a6318bc069cd28344a6114f165b9bea62dccd2757fa85456d7d6b5113f9fb43ea1e74ed3a3385102fd2f1a29c5ee6b3b49800d53b338b5eed611f50c27b0f5ec80a84ef433b28911989d3814ef0653df498db17102f0ae92bd370977daebf9b122bcea2b14ee7910763331a50045eb55df5b79f1e0b55a617b8c916b9f54ed71e81e8c4662dc17aa3289e180c77db4cd828bb6be01ca7777a97a64dd0f3189e19618ac475ce552d3dc5c9a3d2084c968ae37979016e074bd744a84384218d6439d1dae73d3743d66510144aa3f44e1313046581f3ad05373cd4137f8f007780460bf6f2df66b52a655e066e3ff0d7e68871d333f7b04dd60c90d01eafb2c2a27504c3920c8377399e1103d054f367bee8b1a58f6a1f6fe704d1e20fd042b62ebd6c1433a69742196d5a08022eb15e22a0c6d43a9896ca768c178e57325ec849ea49642200e8cb28a9d8c192f6c91e08b774a4ae7a81db8d88ef5f8694b1d62695761e7ec60251953301d40e7f711e6f49643e2121e3906b1dc43a49f96a4f69659f061360606356ff7e25fd706b0c810b44d8eb4226c0a8ce445d7b37e8a8fe278ffe7bb1f78fe49afb439d977340ca690af921abcf48569527341c35a45c800d7fff4b1be336d7d8e1b0860427e27be0e34c5fb2aa427672ef904024cae80e5e7bceddc3d1285385b86c9097e0c33b53735403646fb66ae1a770cd195c6d0aa6c6302519472fefad4ebd7a5520046289c1c724e2b7539e685c850a3347db1796c48f2e7bef1c3f703f1dda90d</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
        <tags>
            
            <tag> 笔试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>笔试经历4399</title>
      <link href="/2022/07/07/%E7%AC%94%E8%AF%95%E7%BB%8F%E5%8E%864399/"/>
      <url>/2022/07/07/%E7%AC%94%E8%AF%95%E7%BB%8F%E5%8E%864399/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="ec80d63386c19c4fb10fa87762d877ecd9660243124e58edc87e397c5ed448c9">c9abe5a272df317dbb93fc2825688b5e15c02e514df2e32f8ef397b30597abbda1a66e45e3347f46661ede3ff2dd9c40897afb9307f05134254934fbc3759e15ee250d38dc7530f6cae0d836cde37d43fccff362224f4fb902d6395cb02440687cdd0a3ff8e999dc1615e9a68026cdab00be2b0e26ecb670a53f3da66943cc9d243849139455cea96bb58bd7fffccab814c90fe23066e51589c107ad02ae9bd3a2bcebbb941690b4bc4c1d4ba95892a0e2015872521314a7849e35d4fceca7f15a823ba7a5171c2bde1f49910cc362f70d271af5668b1f91502bde52424b2f81edca9c9a7ae408b068c2ba82cf698ff1b3175346d5c35eab39be4d76f16a0f1f2d1184b6829f2cba15cf0c878a3581c278c6d988193fb5095e827b84de20f0f3f21019961cf9d5c1d5e65e8099b5e894f1f45287f53e14203d6f1db86ee3319c0ab59a245f9f9eb03bffd312f11f56f7d7050e9991339f6b05bdf87ef3d8c85b118d54326df13fec6e3aa543acb489e4417c22ae7eedc6bfc92f8748dc5b6a074fdc76f645207c415436aa20784715d9e73ea56d4d36cdaab2eb97386cb445b9acc7a8bcf8638be63273ed05a12cbcecbfca584c62641da0288e77515604a22d70d2e6a2e466d9e5c7d93bcb6d2c0829e3c090726fa0a927874b3f3480bafceb70909b77e05793fe8373959cbc9acc36ff58ad26f809d625d54b92908ba5927d0839e9af67b1d1a33708d50ae93e677421727612dc6a201e775307b69df4444f6eb43e3bc0023a5f8344530c7d4b22c154c2e4d4002891bacd3fe5db5802581cffc4314708f24cc0fb2b28bacb9e15453c82a4a8150b0936df3b45939a8516703250528723ff61f102180c87dc6ea5fa0d00609607201b37e79674e7085e2b42f2b64a0337eb2d5367f7c2624e027ff7c8969e6cb66bfeecc93d7a8547e06e38f64b962fafd45f6090d16034d438f8d2e93f7b119edae5b23aa2c9c07707fa2d6743f1757f025f5bc33b4e47fda7d104918491772fad2ab92fd7ec58e0ab5a614a7d23be5507fbf0f9f2221b7ae6a31e1d2fc25fb8c4fd7bed8133da12174e5c5a01b94ec42bb9e371f0aabdf439064a44da60325571cc29abf5cddea372779727bd1814c7ed2064e62ecee869af3df7f835c4d6924a11ea682d945ef951188fdf517eec78c64055162e84f1eca2df5a936b67c5eaff152cab57e025d7abcba94311dc3338d4c90458db5c2aff78272c8ea65383b3afa1dc0068ec39cb8b58ab7182d9693911518c0b48fa2335a1f0dccdef003d861e5d41f5121467b1dcb95ecb3568f3790afde1ca11b832ba528ed51daba48bf4b6d6dbd77015380e46248fc77e2a427b7afd99a1fe6229050e9319d2ceb95c88a490fd768b39d73928d2d65af22814bef3676b1afb094ace059edfacb2fd5efc84a5a05cce007bc6cf2cbbf866501374f11c537d550d680201dbddb1ce4a527c611e54cb02cff2e8d33cd4af00d3f7504ea721c120f0216e8370867ca07cf7968b9979c7f301bcd2b186670f14aea70fac2597228b8cf651f4c29cf374d708c2596b208c6dc9b1fb7245cd8b8769dbd7da457227a137d14b98103f86b4c1e46956df0ed49124ee27c2fede8a26ad0208ebb85fe181c4a07871ae8f27d44138984972181caca52ef0de9cc10d34997d3fa142a0a4e236c54b9f7968117d10a15deeeb39f12863fbcc03ec93837fcf30c5f58791c6415ae4094986b920b5c675c1ef47534f22db102c09cb09e91dff9416c522f2f0da335c663ecdcf4782ca0c83215302029ba1e62c5125aa4fcc2c0d93d1df8a1759958daab8b5357b14d902d3c8d501959b470a2ab7a692f4c6db9f65321867665a4d20c71c454e20ec3095ca746b1929c5bcc9c06255a895cad9b1156bee523627f11bf3adcb65ce250452656ce99cd55c26142bedfab6914a7777733d570419ef57a63d606bc6210f24a158ef8c6aa5db8881689f7eea47d58612ee21b6f175b42f302ebac5d332183913901345a06b4f8abf183c397bb78d36d9906ad7dfca46074ed8c0ed03a1dcf58a852a38ee88784bce10af1249cfe92856690d5eaf31c539f5c3317c2f7421ed5a94be719c84b03ee9ac2d7973a54f7c2a10822a41d33c46569b3323907233b481e01a44976fc4d1935292e4843e82d92819ab41dbd0e294f4f1a0a1703617de448b3dcf2cd3096a7cfe898d5690046d659d0f716c46134fc2d60eb5352499a1ed2ccf1c5415b4fd36997f0b0f0f245375ce0fd389a827aee7ba6d509e7d87caea0a6e38e9b405d670b4d17bd5adf4becd93ceac1633a5e1da06c73a7786a10ebf7cd8a9fef53a1105c9187f52202c4f941e87d933a7c6a227ba99b1bbe19c03ca8bd6c5d07a0215aa92220124f08796431595cdb1baf98f8f23b8330b10f8163e5e9b4ee671b152a7c47533dabd286bdc91deacc48d466e3ade7757fe9c96f8c4a741f4a487c619fba6a592dc55cbc0b2cec4dc7d85e2f0fd7970bc219affa074c9094c38bebd0337f7f2f025cc8f81c43af9a76bb19b87c157a74b517745998fc0289dc90873b8c824446f6b1f5d897ce427ec5242dd0b4876465beab39aae5e83d022389e5807a04b86808fe7a36b31ce3cacdbf4f2aafadfca38adbdd51447e3e71111591eca4f09a894001fcea0ab7381e00839fab70b917ea697e66b48ccce5058687901cfb97f817096a34a36253bac5cfb0891a8be0708c62a39bf62208d2fea9e7b2f90ee0ca2f5ad11ea0b10dae85dd60083abbced242806f893f4d5fc69dfcfff73274e21005094a827203dc84510be3d9391790b70bfd603be9bfccff16fbf45f074049589bf293108b1faf98e8974cd0a33e6182ba8156ffcd97c4421738ca1381a8ee3c584003a457ccb78d01c100d21e68ffd85a1b0e1faf2d87b03f5f8aa20f9a0f1c79b51bc5ed3fd1e737f3883ad45f87181b784c034b7e41021975047998907efb74563968119f74249e7e494cbf1a5a2ae91d2ac5f26a4eeb738d6c5e955cdadb95c2c7b11d2a9855aabb6e6ed36e914abeb55613e0b4c40defb4f553aad6541a1f040a27fe833978e680239d7d1596da139e2ce2dd6e1f4f0028c956eb9a858cffa438dc007a2ba837abe380c8c597404b93f27c6370f5e2754f87db82669e0adf4b54e1a6cbdcb176bba8a8c5da197b4bdb8fcb7cdf9003617e8711e49a0875a40f86a5cd27539022e80876ea5ec4c6b0802e0124308b04935a69a25fe312da7c7cb0ef0bcb24ce10a4091c73191f7a20563032797eebea6902ee7c697d802735367c07e27e571587a9f9172e6dc112a835d58b37f705e2c82c6b575916883b0f2753a041f65e6f415478ec91bb7a48b7a3a20194b2cd2c89075cc34d0b79f2032c054707832a93395287a6b5e65245466d85b7358222328e8d1abfb04521000f7b75fa7568f35df04026c5f68da6fe5458c8c7d48d66915b8bc3c07fd04797a1966304fe289c1683f9a0a3c31e61ea6d30c8a00a3996985b9cbeee77cee9c83946ec9667931af20dc249d139c838472db629aa799ca957aa59cc82b98ad806bb379ec5be7de77ac566e902ee0a77a35173dfe78c22077d9652ae084dcd02bfd9ec3e8a0ec4e04db79818a4c79748a4c386d5a253c40c2906bbdd5f3d5a94d2e1d65d99b75a7ca99c4057e739323c8362579beb44ae9b6b8ccaa29969a141a32e5ae2c9e8efaa77d9855dbba764a5e920f987ce64b2e00b1459eb9c57dd886174c9754cbbcf7f1416d9c8a995d48ae8b1893962fc6bb3d379b2b984b0e78f2ceef0a458c931ca81101181c3766382ace4c4ddb086ffe4ff6c2ffb160a14423e8cd3d9a615cd69c43df955daabb32f83e65864b9aa342c41d9490c563c138d3ded169ae4eceaed5274532fa56236a7423c8abb149a6311edeb806ed626a9aae08040c1b126201292fcc0a9ffeb9372b7dfaa15d246818e8f2b0a9f948a8fa54836216648614e8b0544c4867d9262c769e3f909d4a880600bccb1434c51792402653b9cf5e2c04a774c3923bd3246c77bb6c947666370704837ec43145ca9a21f3e500c1ee12e41a746eb133ca87075995dace02eed8e8aeb75b84c574be3a02efca1d5931d1faf07e0396a0dd62cbba7826fdcb92a4c23cad8b35c38f25c2501b8fd75262e4acf5c740697344443ffe79480bf608f8fbdf257699dd4946e4fa2978a1b028d6c12428ed3570d13db7851f18816d1150466554f0ae04e69897ab8b67767301e053cd3e395e32e6742ec9a6005d87315b3a9f294b97487e67599584c2dc9df1833c9f1d1213d828a2ffc31098f611aea235efa8ff70149b51792dc8b9e0ede3f36f01b07af6eaa6c0213dd95a6c5b2483adc03d87eb842086eec5338f0f87477073cd5f2c80a894512dabba88b3ecde077389d4523a6ae200d851ad55cf95ed0ce976db91d66cc651449bb102e3ffd82ef50587e1d622e16495631c7080470d058896bd16ef5ea4dd0a7f4a9ac666e210aa079fc8bafa21cbe8a9ab84a4ca0e947ea28a1080374b2e3c0de2069a275a53dc16d8f5d2935f62385cee389ebe4fe56e87ef27e3041212de88cc282111e66753e3addfee0091750e1f9bf553ca6a84489d40c2c8ff3473c280daac597b0325ab8eb0b12892ac36dc9d256164faa28bc43c1c5a727a31a50eae7d9608018733365dee801b543930691e3dd78aaba189e988a6950d473b9241c40e2db89347adbd54197a0397cfbb699b8b4a3e2039cc0f39ed2a81d52ac898143131e27560af436eafb7635daa947f24515c9f6cbbc8fdeda75ea06111a882e2739e5e887be255920ce0593fa6b7ec96eb1b22f0a49d6002423eda47dbb1750fd692e9290db4251897495935ba32662355e7671c8474e0f9c5b499066248be1ba8dacc18697071226a6cd2cb21274be652acb609711c5c782665377056ed3c28067f9f8cb1f82ea3b988497fc613f994f816f032ac9503b74ac7f4b95b8be2dd941553c0d84e465f73c67bc32c808d31e15f6d963313fd475a03939282a6ae5655ae4a9ad4994fd2ef11642641c18c9fd3f4404b056bd487b09fb77a33fed66282008916f6c3606ab92338eec52a211f7d5c9742e9895c9349358dfa346eb0fdfaeb99dd66d1d57b72a27a36834f77b055fd26eb1359f36f623a35f9ae3405c07c27a41c7f7c2537b3232d277ee803a25113ee883df60a7eb999a6a1264d9edb9c5958e047224984f6085f887e11de113218241f108bafa5438e703fa529748b8182d540bac205dc1e87992db801ed9609bdeb04cdc9ff16e2b5bee34d160967065ba8a6e80bbf7f6dee3331262fc180ddcf21ee2e30f478ea33ebf7b3ad88b79f54cc26ff6a3322d5d31da1b973bc8d7c481b5dcbea8c5e4d880566fdcd374a0dc2ed68c39f4b8c26bfc8f9ea95931aa712a9014af1da2a3cf74c14005270ccfa78d5f46bf9717eeda56924a22f3ef47fff5295866c8abce3bfacdec72a845b4e40b4dffe3e9aac98646191432d1bdf782404c70129fc76e37477c4c3d8b8968c429cb05f54e258aa15aab35c61cefa2dfa27f7086bce188417b41436bc88cabc7fdcb1394fb4e0807f1553dee45706831bc9c6cb3b48be84800e409a1bfa9755d172a11babfe51d1440841d0e1e5c08d541eedea6126097397f8b70d08bb6a01924510f0b9832063e19943a37351fbd6d3600f8cfb34b4dd9cd1d04e2cedd0e3f95cd89570ca62715009f6bdd8fe516e369eadf2bb3133a440753f842965cee3972ae460c5cec9a4a1109f8237dd3d6a28bfb964f8c8e56575cabae959328fdc071ed545898e70338b4ea4ca3cf0b9db8680cb80a4e4c24ee60f2c24d4b0d3f13776f3f91e5c4ea512839ce50ed4bcdf172becd73818fa3aae4bd523643db802f0d92c990c261b3874c2f266627f4f76ffc0e8bb58b00f53621a95064c15be8d4308d98b2b1964a80b989543230f4b9d571f2a3320314ef6613046588e270c9f0a63ae0562be0027854279fe190254d1cd75a683a2641b80ac7e52e0d1f368a29074f03fe23dee1c7cde193b7b427a4828603d187fea4dcf148d25b12dba8b5f69a8d4c14570d6f8bb7076fb6f22630642d4f52e7f4927192e72e4d28517a718a6a6e72cff8e41cca0b96f0173814f0db2ca1546c953ce03d9f8d421b502c346c1933329ca6e9e85b04bdbf0f9b20fb9ffe727ef16731c4b6abfaf58c6ccd0ea8a28202c7c7dfa88c0dd83149bf464f5066249494f7f0bacecd3b0bb22f1afe10872f5e318a68b8a78fce80d2cb493c1e5a6cc0ea48e45fb582eb2243ddd62ecc673bec8cb121e4355d18fa016857a4d7d6e60e7c32ed0e20bf2543a8e2c5ed98f02d1b37e6ea4cb1b2feb4cfa9f338827fc37c25d48a609058b2b80b748d354d4c5f0525c98081025d9f0d401b4295772a32e3a546f99b8ea0697b75ffd5a1a332b9f3470157b0cd1b8c2f0a85bcee1c67937a76f68e02a00990227be68b30e21f29ee74aef7448e25df08f5c8ddf87c8eb2542c874e59bc44f9d4979e2c46d4d200c70b917f3f2f3657f394e27c5fb8d6f585e8c4e2b85f24b4b9845b128ced1ce238bb355bb394747966f75a21ce0ced5b467ec7005510779c74be242507d9c3b7cd7a244f90d46d448b5f6ee22467e3a14f017707277f04e4dbbc2314e622372cf48be833b5e0948ff8612b55944d31d01405f25b8bf6c6ec16ad0f3686c69c5504d8efa5872678df7055fe8fd95f311dcba74b65a730778629ddca01dcb1225cdfdb26df9df14fd3708657727c3b9f2346f5071f0d5f472dfaf74c603e9f7353e3cfee9a87b720ecc3a077d72127b5e3e47075404481dfe57cdb453c410b07e144e8ef960638c2b52b7c013ecfe35bc4ddb64cd1561d5000fa32e4c7b5069b13febe12b65dc554c4e135af9c377d075313dbc0ed802454a3a7e085addfacef870334283fa7027e6b51183cae6b3cbd9e0f6aa9b1ae9b8835ec5da4f2cd41f96a9b6a8312ac473d56a96f58a96ef6b2dfb01587913deb85b6628600938899d0b043689575808d7b53f33008b378ca968abe323cfe8be655494f14919f95e8c71406892ba536bdeae3ae56a5d17d5a63198cf5ff562c27baee339c4541cb30b949fa7a5d24f5cbf54243ac9b0f6a041665df51439c1afdc560b53c77cf2724138c0a7e1e5b7a5e01561f0a75b57a1540c46c3cf30148eb59a805f4a967f46bc944235071cd38f960d5ef2c11561803ab2f4e58474547324c486e4feacdd5b9db4a76c41024e2e7d9e42681fe88d2136593feb5be09709ad10ce351a291d1aaab963833d447e5a044e6583226e51259dbdad04260859eddf84d4f21024655e25694a439567ed993dabd62d9441ac3b0800d8d85850ce15fb42c0859bb40ef36b813ec9beebfc4b86ad40471a02fc75869223c168da8de795eead50fbc1653e98643150a4a99903a9291b76e6c8bd20b2cda7e39f7ac06ace35f2244c0fbf5032482d94a9e191f6e4018ef4234b50e4fc1b5f82f28e222e8617b76dde1b4cf655cb17ca7499796e2bf17b0860dba8819ef16b0e759a4beeade113f879e3ce8299d052640faf650424d83b6bc91cee795f71badbc923c2020fd2e8a50d70ecf167953d8ac2025a5b72b701cd184c258dd3c6161e263b96ad9c2a438aa99ff12e1a2a8ca0ef6a80e0826ef84f7b6d0e65cd78807568646a9002f8aec47e2c7c65c63c888687c2b1a44921bf74e5908ba71e233144f08e2464f24d4d8dcd2e01f7de6a2967542866f93e852385c92002485e571098c3422eb4f59ab1feef76b15fb6e9045a5e80f3c1e16dedf5ba4c849446580531327e698274a36dc101c0744e7a300dfb04eb532a1f47a975463fc763917cc843ece58dbcfcf35813907d438352ad20a70b5d536e1d455bd564f01c10c9764b1c42f219a298f34c733360f8e1f13d4c7cc4ab6000c394dc04fc111befb26825fcc5d62c169c0b721762ff4244fcb0ffb93d486fd1ab672af6190a55ebf4dcfa0a5e4e2f340ec91be2b0dd82437f315dae5ec9433e8be54b7f055f205e7c31e01a29bbeb969d25224010dbe8fb73340a82f731a34fbc9a710cbb86f99c60ded8ce309bf10555d3bf72781d7cc9b3b5874af16319a9bc82e293ea712571d89b37ef34e294d809c697245c23eb4c62b868e642da011ea1d6cdb570dd15593e9acada1b70a932552081868e6001d49f0a5498d3107d3ba289d6d789e6d71651893c2c8d33e94f3dee35f5c92771803ccb0743041a7c283ded5fb72283ff9aefc28be547809a5468e280ba8fe9c3ae1457fb32a4754d56299fab734baf71d76437f5f19bd149b0719bd9f87ca0904ec490d3634add2a04c51aad27c23f1b9eac43666f8ea70097a1d215c8677e021baae7366d51df5dad40c0f6a8ac1ab04999707fcf71267ee6efc8782e734add3043d81c645cda1b39fa276242770825885eb80f55044544d10819b8ea00aeef7b730180814d8c0de45ac985e2f03b58a92dce122fdf201dcf6ed31c4645c906ba3cf8ae2ace4a88d8d0b60c1231fcbd6fad2ca537f99c37cd5373fdefa67c70b3a58ac60f433a5dcff3bc1024c5467c51d794710b9d3291fee99ec7fb97ebe58eb9b05506d3a2a3eb1e5425e138bd746f233ee436acb0f5e8268289876b7e302243613166c8e38e2bba44a63d4ecd9527711b09615a1311b14ba932c40ea33b8fe7e58e7f25189b7e84c8844bb1d09ba153f13f377528a999564c63f1ce0459dd9dc2f00e0aff1ac38f35b2af3ac6c80a04cb879eb49076fb661d94accec02753274e3c5e72615ac6bf3106df85cc77f158314ae2da469ef5daec4f46b51a672cf97a6801e3414ed0643ddedeb8117404d034448206703e517a2cc6ce729e4acb0b1d408009162d3e514eb19c76d1dc1088f8ff29bd30a32a0603b819d25443fec511dd61485b0889e2ed09034fdacddf90709b8a4a581068444668501b7d9d3fc048196d4350b0f14050a54e27ea401f83b0b6cf40bdf45798a5fc2663d5e60f1ff175a00fa8934841afe8f40f2bf41bc9bc5ab6a6e82b2a1b25347e8f75b0f579298f07e53e12d9d3451bb766c95eea3f82cd65a20d576dc6c4cc3024bbd33f232489dc9763c8d02bfd6fa428117426b9113c3c33e6b0db4b4ac6a4c1aa24c94358f68861e9078b6e7127bc6f0a517201faf7482faae0d47f9c0e5d4418067db3ac80e6700e13eefc850f80335b2f8cc86a0fb5b43f0ce2c76d0d15d00d7877e96edf395cc37694dcce7540d9edcd40a3867184035ec349df3ce945aca219237c37083b6244a8bf4de38f8a5cee37bcfc42d3b5b59c9cc9ce617269d48ec00ab922f0a07f7160adfa31e6d3d76e3eeedeb5cc4b7453f9851a4c75113fe65d5a864d1ae8e169ba4a241ca849542784d8b22a46a750363f0249fa6337a077cfac61ab036a59aeaa5ef56b67257a0872a45084faadf85d3afddb3675815224088cbda391e70afbe1608a8bfe30a72c84fb4707c019e6bb250b3afa49b0b7d07864f988f181242a069108752f28b7332b4ffd5002f9206470e04ebe69f38996d50559248323aff1821205b30355f552e2089b2cf13a6f078bba83720ec9daadb29672d194ae711fcf0efb41c2c0e8858294ca37506549ea4ec46a2dd764f081c27c6d5de15ed6f3b5f2c20fbee0c4be0aa9255bb22be702afd6d041217bdc489e83334acb6a8c1c3322ee82b5f2ac77cd57bca41274a615980f5697caa01d4c2e6a37498d54db36b2a2b36ad82f327c03f90a765fbc7667eb111c64e454ff3e56e5066abac047ba3d85770b131c06b8a0fbf113d648e330f447c65a491d67c4dfe5c3967b3cac547eedaa99940f1d82d8c42f79c87d37180568bbbbff5de5a6ca9ee0a350840ca4d418f32145cc504ccccb9d96a46064ea55b8cab8e02ceb042344a4fcf72b0c795fea0230b9deb6510258c0d6f5f5bc63f2843bc9995a5f91dabdbe2d4a50c1fca63f8cea3cd31ee4f93e294898b42730aabbd573242057fac50e207fdb3013b6a9b13dba028acd6888d27c9ca70d32e6bf30f1e2f8072aacc7cb22c01c15a4b3aac13d9447eadf915539378b3bbbddd00859e04df65cabe836788fc02366a85ca9ce848d04c4f54bdedde653af31ccbd6f9bd9b073a069d14d583e9d0d4e72712a2214440b55a5f1488c0564109728f6f2fc1b48a42266decdb73a889f768683c7a042600fa17e5e98fd95219b739b56631156f44094902da8611b984c4c0999069505be217e5fa112bc5a63c1eca60c2859aa373b98a9b49859a1cf556af62c4cb5ddcefbb121622ad06768c1e5f9a00ea4c7fefaa0b07ee180ebb6b366b8e133944c11c68f4479952c762e189d991ebcf0398055e5bb31de19a520d67253c71d47eede5df46e21d0dc1918e0fd69cec2e983801d91588b38833514164556436985fd37d7f38ef681f71cf8b2e968cd6bf42f078068a86b741bbcedca8aafae625a27dbb38d0261c3b38bffefe975140e157570212c1428f5847cf52494799a23c9f2b9cb2ead5ea13f841538e04dda8fc8d1bb4d09068f6ae96505c310a2d61eddcc7f68df4874f2b047d2453d328bd06c285e82431735df816c3061e4e1d72dab336c01c296c928354699fc94462b876e71d47caccc9871b2e8cd6252072c8c4de717d0edd2e40ffc63508c18ea89f4424170dd51895b516420814dc1621bcace7d2f0c642b5f9768b761012ac175c11f8d41a5b3b5d2369f6732306a739b5c0476b84bf22e7b7e9be52d8bbcd8c32fb11f2e3a495668bfdbb61d1875ba80b1ff900f86b7e7db79dc387492871807482d3444b47b416ec8d2114b4c375e7a4376bb7c998deb3a939593c39de6e05fc5ad053a84a5b5200ce5d239609b607ef20a78c249578dd5f550415c74614ab9ad2923e4fd25e4c39eb6e3fca77c9fcb57a65812cc59d94de6bc7b4bf5d760ca19872a79b7c5f590140ba6922989fff8cca52d1b9033c8029ea0eb48303bc9b9484b539e46735ff8443f905ac03f5ca1edf31ef621e44dab89b9dd8538f46f62395290c33390f59537f95e00bad322d51b6c4211af00599f5c24a40b8d31d060ff9aca51bba1e6dbf984c3df7eafbaad37eb3b8520ae74412c76cf0f94141a27276d54f91315359bc57349148a31324111ac1a15d2ac70d4fe223b802ab7a52253f389054d06085386d4bdaaed1da59391fd99d317d96da6400ff78f6417773bcc8c799b1e3c43eb308d92660e2ae53099fd2d92338ee4c7e0dd9037919438e8bb606338ea9641da402f40efda71fde0a00dddb11bf5033e0876233571c85f0fefc38d88a27f77dadc054218306418e51dd4360135f924b94b999d2f8a7800d9f47ffa80a42cd539204280afed86b256c17ff69929801b504d012bd7bf712a58ee505c3a8cd55185b059576596c92073758a97d0ba1ab8cf8cd98c281a1e4b57f760ac5216301f6d497a6daabfef0f2eb8dc2f70470a38642f8feacf587a3a0f9a57ea592e28f4e4e62759afac04feca372a2abd4974f95ab9ab7946f00817f96bd476b7d87c303c61821b79f5f44403bb11c680d73623cb15def1bc3315b5bc64604bdc899bb7da9202a463d3ce446eec710a7a537aa578b8ecd3a2c638977abfd909bb92bd9fe909bea820ce0b4de92cc53e2f59a8dd3170567009c679aa392fb13b875d08deaaf79997c60f57d837c548c43b24beb315b92f7f0817b7aa2daccf532aa8116b51f19d2ee2a78741d4059934b8b953a5dabe84f741ed3dc3af8988fa55b87f5e8a18d39a2b23dfe711edd9b07ee003fd1efe8ae08277c052036a3384d2d468e6ea26115ff68adc2f20c0106aa5c766bd18417e287afb739f4beddecef56a25a92cf22c080cbf6280baf6ce6f06ca004b0d3331ba6fea45826c071953692b6c1affe6ce93e0444bf48ebe05fb2f98d83187c8168d15bed4dd1f5709a61f377f0d0842101bb689cc95b83072829bac578cd0c8ed80b4212eafaf4b3e62f3e186101a4da78a3999ebe5ede02d64d413b4f1a6e7c8aadeea4aa07ac93806150578380eade54006c7a9b3ec98b5856a683e60fa78be5ee7fb564c6bd1ec8ba8eefbebce301a712f06cdee5682bdf9a4a3844c8accd9706d7aba3fb0f5ca7f29b84922a2a9d7e3ee072de5b0e775622b0c02c779d7c7c1664943bdaa3b0a452b9755069e2c58fefc74bbb00409bcf17cf8895b115387b19763a03b3daed67660a48f2d4ff262a7e79591e1739882eb82baf2c427101f4cd1fa4a21137b9930b20ba96e1045c2f98520c5a84ed2f775411af69223c09aea58a4809a3caa8a1db96f9c25998f805534372ba1370e230170e82ed7eede7a12ec8522b470c03ecf38585437650e97eb01c472568886c084b9c997eca26ffea70032d48e9c277794c14a0a2d10eca4c5d39197b5d56849f0f62337f2e5392a8c71885bef0aca508945a3967e2a5f05a1640acb0e351f249b097462be9334746a2d321e9d5d2c3869c64d91a00bd700be2f47a603d06a825236145fe24c6aab0b9fb0e9c586835c208a94bfb25379865bd79e326bab67dec5c8dc79e4a671b5883c5b8cd2b12948d448306ff942b58d5fe879d3d9f00ebc1132016127b4e8d2049d6a6e78edfc5021d37ccfc375b155d5de42506070e063f18e4decc069a44479f8a9800461120108631c2e5d2f5000868ddab0cc4f63b94a8d8bf00ba6074e0c210a862604f9f75d1c8f5479acff6bef43057e9139f15831894a8ce19e98e751693a2646b579f8444ac032aac4d0a9b166f20df2fa24dc5f0b8929891205e3d81ba73e271650f5beffc0f17b6d4cee21a3cd449b2a373ede057450fda3535c510c7ebcd08ed5294e5e186a67e1f9b51ff8e9717e640a5a64effe87cfe8c50fad12cecb6226150c5c1b757612ca472f38829d77596b4fa70abe3163cbb4d12c7f0992d4be7077b8b2cad069e4b0210d4b6c1a705e8bf30c75abcd41704cc9cdf124bbe41ddeed001ffb19fe9e19e5fcd0ec2ffade28d0eb7955f7d5bfe30d45c28cf8896bbf2d3a4f13d5cfe84d79b9f00d3f03613d7526afad76a31c2eba1c4be935f882091d1aa724a702e20fad6017cfff63696bd4d58a3c88f19f26934443871ee0866c6c3aa56ea41428a003e4ac6e03b895e45a0b732f40e5be65fd309eefce536475989ea973fe3bd373d4bef22d5e698315545b3127142207dac12587e07ee19091a8af8bc94c712079204512e26a855bf74bd9f9f284a61d5c4e268388b1ae1ca3dbe9c8ffd29e3c9101764e79b31a156743f15efd3444b1650dae6d5a7613ff7ae7e50b693d9adf58edb2307309c016c1db28a7648fdf4480de75396e6d3d6ff80a637f21ebd409d8ad4ed74448bf832b51f49202e7ed26c6d1de2697cae1d008f2c314f8470051db21827c5f8e2e8fe52b64cd6c8d0e1185eb4e1a4dc3017fcf8a398b0cb66d8e568c9359532868762aa5c47ba32ffcb7251cf681c0d41fb7e750937dbe6795c04f068e0b578cb9dd429ac78640793b39412d40774057b20a757b5a84f37cc57646442e026b4e17537a7ccf1418dfc59b7b85c63771e5bac26f7ab879bfe98a088bc122cea015cf0431f4de113d88b329e7a06248749ff6cc8c078cce17f9edceb5870efdcf2a343e4af1261c969acd6506afe58d65a3f2ef3051f1df2856f0d7e09c985a2098495692f0cb531ec20c5982a2402f50205df5fb6027722ee2d3dda69f2b05ea6f8df6b84d5c33818d6b53e013dc80fbb7214080aaf131025dfdcead01b975e823e97cff505f56b655dd5a5d6519178ec3322d1058a9236d139fc32db09f4b50ce295be689a37e61a25f4839253f83d07072cb16e212ac59b8bb56cff4d6bc9338781efbed7b7ffcd6715ba548fbc43e30080e86f9dd25bfe58829d0310e4f6cc4e8e8d37a2841797208003005a3b0523d5e2a723c25412bb2f01fdd2570afc6543299430d81d79fc85211b5ae55bc06d3845835e9c55f9b0e57584358a8057dc3c717ab64e6404f45385d81ba0e7d725ca15c3c54152f08475b0c5b5c8263fba8b3ae553379a5f39eacd917794bd332ea886614ad3cc4996876c79b870a1a3b525580fa5a5a495768feebed638f5c38e8893954ae219984aba355f66cb9fe4a57e65b51f0eee827cb145bc657f6c68fbd3bb551633dca1bc0616240b94035d2933c567ef19f7284bfd5df1fae7642e7f0e8f8fc146e6e7fe98992965b8a9829fa17de1d8ead13b6b2fd80f2dfee6b6b1914874676ebd4b7d2457d7a8ef2530f410a059fff331335f6dd5835b8ae76547d7d5a19b242f3c1f2f57a8d6ed3aa7786cd5f8cca98647394457d9ec2b1e1286533b34c9a2298afa3fb0bb2a6c70f4cd41929e8bce249cb78bff008b48355084213bc2df41b7060e352911406bce58e2f529052e39edeab90634e7ea326224b657bc3d3c51f9dfc889e257c8263f5b757f37cb314537eef69a10eb308372335df1471755991b5911ea1c013f5e63e57049f0295a42f51a86c66ffaccef75ba3d439ed76c6eb7f8d054f09af634aced9ab6c3025f615f9f9466e332881e19f6a333ba94e2ed3e6938cf3bd1792ced182662d597680f26c5234cbab035a6133616bd3d01e228f23a913512959bbe991d54948643f05c1111ff58832c122325c1e5116e0347d1d78c2a5c3115f6b12559339e63c6b8440be98f174e735d9b043155bcd7b7382e02f2a55d5026e1d37e86ff60030d6a8454fba9b4307a49bc7c66f2da89a38cca972862c30123151700c194b7c0261eac25b06752d1c443a9f7dcf9eceb3c2094a251f70df5b1d5518a00bc5f499dc562f449d27325d6fbbfa448a422b6d602ecc88d2a31c2f00caae44be350d7dfc886a3419c9140408f752dd49cfd11af726f7abf33a21f9323051cb415f22b5b542cfc7728280eb169afba87026c03278bf7e6f0b55aada8376f1332392ed93f20685871ed8fb46039780bbb7d8b31821187ad2382d0937cebcbd68c8902d7ed59e6080592f640948556c51691577a36d8a74fbd47519cefa92e02ab571ab95c7e8540aa53116f4a44ac4c07183be4d6504e23ab3d8271914318bda2ff5a8b1f9fa8d860c990585b18b635175ddbd6342e139cc303798ded50d073c1cab9ebb040bcee562ff5eafd810a6b83d1e24a26d2fc32c5f2c1fc287e125a8d875b07dad27466aff638353593f68ea8aa75628c3fe5dc8b94ed64ffb4502a5ab13d0778a7385e9dd4ee1053480fff20daa44a63745a8b394faed405e2948e7c230dfd0359024b03d2bc79509081d771d5ed3a70e111eeefaa55168795f10d5ad3f86452839fabf93fa2ba38d9e86bf9e5ca6566932f91d5f866be6b5baad16671d596f11ccdec8a3b34e60f4e2d27aaae304e809dbbc6d035f475bd0cb7fcf60507bd2bd3e60cac7aa85215b01b5e5deea3c3633944abf57b5ad8c6f5ebf15ec08c6960f4a4c85999a1165f1111b540e0b4a609c35b6d3845511872a7d7d5148cb2249c9309434537aafa5758e8b0260629cc0cf141bf59fb8d11836d9b662d7427adedaab63c74e6bc67412df7115984876fdd03f35eeec04dcc4a516f6b5c35c2a5dc0f1941b15553e0a67dd72393a654711b3048a4c4b5da1fdb2443d13ca041c210bd818c943d6463bc0362e4e67f58379fea466730336e4a1fb7e8b290342819af19d8673ccb16975a160fd482c5abec738097d6a124f229f18384bbdfc35301e69a8e01c0c3e3a6f4c9f64030bbf51e932962485395e6370bc6af6a8df3a78a6cc77af7d85bdd2456fe84981c56559cd27cadbc875e3befc496d5fb613e4fa2cb2725c6ee5a45395dfd005a05579b2b21fed5ad343da535929a4dea1d1b1d450ffa061eff1698da5a9d2c56fb8bc9dc2c5cfaa61b4f04622fbe5c657fd4e9d80d40be24a855cea6e75641524ec57cf74853978a828ca5dcb23e478b51fe4f6ca152f57bc25f3e485ccfdd710f1c5e538a5a7b6b46dd4911bfc79b06447024fa886dafd30bd0dd99900462834a7d3000c65d8dc7cfacd17c86d49fad53fedfe056db241b7ff90677540d9e4ace93435cb2f878ca723675201b5aa4a412abaa9266566d327c680cbb220ace2ad219a7bc4dbc1eb249679c7108759c2d83ca9c6af065c6bf9e42ff5e618db18694ed7c8d5b8f9bf1f8a40495f628f927854b327947353c302d6da022c3b114582532fed79a4f89a8f3584ff1a1443e45fc3ae8942f03b47c23d9dcc34111d5ab90a8ab688f2c413136549535f99fb2cdabfcec119ac057a26c5bcf3fbf6c2789acef7df2cfcd7238d31805c663f4e59a05b143954b6a9c98e32ba1dd0206495c7ccdaa7367aaa0d6ecae7ccf5ba488e46e6686684397313db8f06aaedfa4166b013c34b882cb9997abee4176bb098c817514a9f5c6e5e3de2982742b49f58bcebb29acf658e03651513acd82feef588d3a337263949b2004fd9b2f13016dc6de4fed11ad28614452f9059019962c7260c022067e85e5d7d28fcca31598bed460a3ae59908be4ce6d3543ccc6ee93a5bf81972609ae59a47111695cd7c7183a2dc8dbf1fb002576473939b3d09f907e8bb5a975c5774e2b8f3af200301b568255952a96c299def96358c5a7b5c8f627351c9a56fdf6ce797723a08e2063d81d39b46da88512d7b869fc09462c35262abdf57cca10bc3028c09311d635556463b8dc3e00ad08945ee765356572567437a588866a8917fc84ac0643fe99bec3d4b27fde84530c06d448b0a59adfad591a20c70e1ec03eb77cfca2d3e7b0c91cd637d3a21498882e11d639d4a31aea6e5106e707c3d220166c21fa566d9ab9a74d1e4f0774acb164a1ce4fc893f06064d0aecdaa8703c488f6c4c4cf1074ef47eec54dbfb757b660cab4d7006c8c5b3e2448b56c656191e07c67bdc897dee0de7396fc2301d0c19fa82a74471618a06b50e619c851e46d50eafab959a5d364545f19d2a24da99b8e77f66d43a28a1bfe51ae781d9dc42b193f340f18d3e51165f882cf146367c2624cfb16441697a2295210e66f88cd5290cf88700fc81411b677da29a82f840fc96db294769b01921fc542f18a67074830ce5c978c3cc9b17129e0d82cc7b02f4176fecd3e74cba0d40004c07ff2a1cd4f1baecc43716e08abbd78295bb23cb47afd5d8c52408a53f665678096871fd4acc655ac6dece2d317a2f501f140f21c218a4a8744546975bda5c3c71335589c3d601ee9a1fa0034e4f389b8ca84d6c2c817b75f48fce9b5d980ea2eca4cd5d68cf237585c09d3563096601cec9dfeab93dead412ade843d01bd67a813888e6894f8ef5a985eaec38dc619b50a255efb1ca9bfa4abfda1c58575ff31c54201707d037674c21af12923ecac054a847f48aa0faf0ad111cb118aed7de65ec496b7943ae070541ff03036401ba201e3b6358b5d00c53f3f8f78c7174cea84cad352096f25315a218ebb8ae352ee2ff8f49d3454db4f71940dac3f4aea5df6e32ecea66b1a587cbd304fefa7c76de263424f5ac6dc3e6571095fe7916d44371a56347a11bb668baa24e90b3beac619ed2e6a12513741ef1c039df854dfaaccdd04ae8db5438157d56cc86c3c1784c061756eb9071749365496390abb259dec809be81b9b4786d26f5cc73af97e1c0952263d9e9e3b309fc3d874d68dbce0197aa02cf3e5e9fe42aa672ff6e54a0d8dc7a2206976b8614dc7161785d970dff9698611b5a8293cb19b4e530967c6150c0c14bb45c48bbc877a77c18c3ec263a5637d0cc999052a916210dc8c25193c9af087ff4f157cb888f78252e4226256da194beb6856ba4ce8c61dfa39dba7169a4b544786d3e571d14a0972e1eda5d1e48cf55af8626bbacb3eb46545beab8e6be1ab7a264d38018d4624f8b2ba9e4de5e46d7c5e56f8964c9c130e998b1eef5f271d9ed688650ba4828657a85837f51c7716299b4a16904bd32f960e107968fd37b5665f14e5d6360b9e1e9fca670a88a79fb98dcfcd110231383402ddec94a21eb93d3a9cd92aa351715f9e6fe48e644ccf55a46ea6f1b318c1156461c62abcb2171fedb45e9e3788fc06d617143a2ba10bb62c6cd97ea6be5cb722c0bfdc5a00ca3cc123dcf80dd5f4b5539da7cc153aac7de55825eecae548529ccdd3090baf9ebb58003216c9f21e612c46eff8198283b914bb47daa8793c5cb92b23febd2d4b263f6c94505fc389898c6f95402a463203c363ba1e28d4cfa869558e5ec8f4a11bcabc8d787bbdeb9cf012504c09d30010be516dabbcedd6c1e64e6e75fdaf45ef75f2ff9da491b9fcab4837ba1a411821f1120cc6513ddf5c26c186b4198f49bb96ad393cbc7753e095f0e162c2cda693721f1f09c0cccd08e079927d67842d49a01ddf37c0373f396d5c91d52d5466d1ca9f4ece7450187d357fd3efe2173e5bc68b2b8b372cc2d30efd4cfdd065ceb0b4815fc71d6bd1ffb8540e7bf907e0fcea7881981b82383f045154f6612b12eaca3e74d4ff15520bbd263291dfa159cd451b78f1d9acd133adc16095c5d3dac504a19a17ea339e62197b3f78458741de18ef5c784ee3fb8bee5b925b4ddf549198c7f639374e498e73f972019ae0670d078328a3e19827cb8391e8dbb59dace8f07f30d5ca68c7d7b2561ea4e16324fabf02f433927f994030d62c9bf0a53aa4bfa2975f29a6d93541145b16ad4829afbe85ee65fdfdadd39ce6f68e48fa355f57b2270b167c7d8870db256fa0adaaaacc63a4d73bd9377cd6162db6fb32ac030586c72ed992faf5d05291532e46801a75871ddd5262035401038c43480e027a204d05aa5f2296f84ac8a860fcfc86e62393ad60f0286516ed4e0bd1ab052cac68750b41574788dbcc57c1eb4d37b45cb41b6ded526ed9cd7db09c64c89521d8bf54e0cb016d62c4b7b938c8fe790c3dd6e0ce272e2ef5e0c4390da3a7bf796740314b9b1f059ff31fcf2d25bbc9138f1f07e31f0fdafa9d9eea311e9ce0121587a5f711059b869ba77f6bd60e67bf67d51bcb8933c337dd57f73b828c73a6e6079cc7eec091de2b0509c13dfea8f922a485b54cbadf001b135523e79f93876ca1cde8d084b6dfebf5e663618163f913cd5641d079342f8015dbca4e49d6d755b165397d36d504f9480e85d2aaf6cefe1a5709a5a1bfb119807a22ea17a6d67eced86910f0ae8325e6a04eaebf25922613cd8f3ebee0079bcf64e6189ef1a5f1ff931f00955099783f3528877a2334670a2c710dcdf64a42899f7e4230ed45876116c5b605e7b851667c1f9c56c993711a82ec4ef81e21493e6ab18f19cba64556f83f19fc271704a9ff9c17f07ffa925b5aaf69bf945e5ed6e8911a7b87eca3573540e1e0efc774244da5b9b022157a80b80a5841229ed2e4f2f681b48c6a6067b539c5050fa2ba0afbe373369935fd8023831359b95078ce0265197342b90cfa79e2ea661a192cd8d020e56a133bdc467c27c91879795b17d83d7bdd581b60da52020252e3d7f8a84c1b4173e5bae0f372a9430d3a8b880d92eaff80800d0ab8d6e70c6d48c44dca547a84fe8e7130123c3fc1e0ae1527359cfb20efeab10a1e3e6e92ec26013bdfec1b0d528a816828b47dd0460787b85e0d1df016058e000a5997ca9c1c713c58dddfacff551a0f5e1aa2b4ffba1c712577b5c23545d8e62394851d46a2af763d95ad8d69985dc53bee8599923e6ba550f2dc5d4ce60e220d350823e771309da0b41941097bf38f79d364d12fa681674b4937bc4ed4dd95507ff3ceea35e76ab2ed30f3f126e1541e91f26a0c26a98cf0d414d697c34b8463232c0ac3750ca834ba0613798b4f934ed95fc30e98b540ea098f7ae79512dfc0094032899f8721b75d0c3bb347ac5268662e76959a5ca6b6bb8f7390436e8f149233a26097ef6d8f3295ea6961f4fdbb82861b6599bb0eb20846580176006e0fa32e62f631fb83972928ce491769f10d0137a98498dc8207b9d2b34f51b4c47d1de7cf64fc2ad729fc46339304b427f22225c9924a7bc8def9b54dced65d94cb274bfdf8501dcab19984e78f2b83f656d65f40ba895f72516d2f7b54d49ef8d311bf47f3fccaa3e17ace32f73bf5e230c060a1dc8f3a6f682aeb6e96a6a50038cee69f07f87014ee8fba9e3deb0a82895ca6da2c25271be6ae061244150d84b2ef5e47cb3818de4e7e48d4b0fa6c7a16d7e9218a756308b804638419c5ab3a11385fe1895242565fcce78fa6b76669122a071cae58653ca5166cfa2c9745400e9fcd8388f525e1d150739d107efb320b6577cc51ff5b10df6120491cc24ea4804ad1c51756b4983ee7d17f5e54863e05eb99baf514c9fd2bd488741b084b72757a105236803dd9a167838ef0285aab746b2bb40a42a9e50acb85fb04fe24aa8b32b9c64fc87d091b0627b70f7193ae33f207d290938518714ed38256e5ea0d3ad6e70925e81dc5575298866c428ba8cc6fd82e289c70dd934156d5f2ef857c2d9d8299cf0dece20f70301cc64e0326ef199bc8854b5105a2907d956a5262c0996a681e737ca3b71c9c389b7cb0b730f10603e627999bdaa69e133a90785a05b142a1dd01c45600e99c9e5026a60d8174a344ae443dc0d778ee0db5b4e7b196cc0b2712b41063c93c457c2e4cc93649b6cc230805d05540da3711313279897f4cf7bb8a2ab399d0302470f9a40a7342a8f8f2130f2d9bef527cbb325448c916720fbdafa246cbf4f834ef52f7bf37b07351099fc1f051d4ec005780d1b21e16ecb420866685111709a0145d6b136ecaf88f4316587e59bba13be1cc08db1cdba8b14adb9e113ac44d562d848b1c4629fefe981ff8e51767f059e3d2d4fae6d3b178286726c2e4ebc6c827a4adea7659045725ca3d59a1b3277e5d13ba96bae5aecf4098f7e8b3b52a2738cc52b331ebdfaa8817cf7434cec0b20dc00e9834ff6e66fe5cfd7fb13c7011ea34955faf1b719f28784f8b6d66987d0457049ee53e5f5191f3d46573c92e0554a58c0a8e21c971be1a7ebf56bac7e3b293ee27c0fa5e4056b73a8141ac75ade376f902c94a9332dbf4d04edead29af52157afaf5afe41e793d625aa42170d9a5f858fd0b83d5ffbc78f10ec6349f51fe6ea786fcc05d493cd7aff07bcaded07015e5e473513f0c717009628543cfad98fbda761e836a29999911c4903d9ef7bdfcbd8d64b217c3b0cf1e7252a988f7cc7a45b6b052114a1efaabe731cdca723f4b35f21743cc3c26b9dfe6bba8513813ac46e13d877a02f0c3c932db4e05d93f5f65578e0a8b8ccca5321cff93c336e2a07baa3ba5dc0fcbbe1740cac026951ee53254647a4691010526cc053188b913702032b026634c1b22902644aacdcf54b90cb9771e9b272ec225f6227cb3d742ed9e45a62e53125a055657e0449a9c7e2142b01f9d3dae8bd856517c17466e5b3f69069e2bbeb3a0a9aca25faf28055d5f21d2bcf5b6cf386964507959815276acd23d85a91f2ddcdd3c16ac0765088bcb6edd5bcdb3dd5e9257dd6133f470ee1a82c8e1a192b19f8f33dfa9b6c77dfa4aecd464f003159beb62a32ad8e101a9713b6f008527d4a8b1e6ba6c4449db5904c1ee2c91161e661480dd835bc2f837e7771ae9b5573ca39d3ec962936902af224e719d2ac9b1b96eb8246eaca70fffe57614a3b31e2dc6aa627461b3e01abe0ab06963baba61508467f3f8ba33e77793c9ae0a32406fbbd4bf810fd9d67daec7318eac5808616bcd754bf996bacfd383fa89fd808f349862297823448c504dc4d87893fdc31b218fc64f4863e3ecb91870efd40636fbfa1f19ec17f8009862b3887602be71ac9a2b3151979ed9eae5f5f5d2963f8f9c39c1dafa1d390c8916eb75cf50692dfd07f75445320898b3249fae334a9afd601451f81419cabfc01f0c12add1f232f901c53ad7d1c2f72244991c79767c7f0d999dfa073ec5cf7e8d962b06e9291b92cd366f6bf800fa5228e510c48cfdcb3a4becd413190ccd2b3ac8d48fc2e76a7880a095f142b314422fce769564edeb88b9e942d499ef8b1c5a0a4b3e2ce236ae61de22fe7f8d8fc64ce1016ef28bb576c9cb82b3ebf9ab02de6dc4afa3e2961bb9cf5479bc8b677fcae292dfdfba14e42fec909212ef6be71728a3336964ca14f385ca29df6eee2861aad7545de7a41e6c36279832f3fdae281fe7a2263bdb4c3dce8ad86db50065869a6d91906cb6d38a11ffd53d6adabf8c0f7d37180b0b2de136c5f142af7f44119320c77988a81cfff6ae272c180e818c367cd12d6db0e3aa444262e9fd7465f07b2cda1a32c21d38f9a521450c23940ed16d860aa9219d78a07e17bdaad6cdb60b4372309285968a0dc734ee06ed3660f9b258c2d25f44136c4c7c1f5f6f53f4aff90f5d5d2f75adee8cf795e92162319d9331b9f2b58c38d8aeded330a1cbb254f8a40829329648e0230d88867efbefe72003e03b7b948334a62b256eb6f44014b69f0318c06ab1257171e93cf8e0bf3fda671e322faf0ca8389e218fa5e628f0d0976668cda4aaa3360706ebf56abfbe62e0855bc849e7d0b2d50d93da78b88dfd1667484700b1bbf09b754e7faa68ceae73099baff7cd8f770abb8ea4f2eb00b32cd2fde706acad692d2824dc2cb405fa5fa7d0ae061a1f784240ccc00d213c1ec0714c3c7568fa52e8841fce0f503073260f16a8ee0cf29b3412b01cd1f666047938739096940cf359bb436b5e07d870af2af89a6e740455dfd54720e9c2e5660bb187fe734c0b4f4fd5a15dd5e14c1bb9b5072c9e1f1a704f7a39eaa72af17a285a1cb18146eaca43e4fa3f083ab18949d2e2ab855d3803ce29b0b42ef15d0a08140d15f34251a1beea1ec963311cb5efbfd3827a9faef2c9b4cca14ba508eaab192a40bf88388bdbb4359ceaf68b20d81ec3daea8d17a64c0569adc2f086556f9e1c631e2d036a8025e2a81c8b1bdd7d71d2464e1924dada050adc0a9199834bc44a9a56d32da673eb2476706666634bae8264cac10ef0f61b6677708f371b163fa5e1d0110cb808a8ff9bf533eff2889bb092ca66532e6e66969e41255d0e8672dff5a55b1141d60719b92d5a0e00a2c6313f873fe7a55058115fc452d216d9700ebcb925e462e29f7622d7f59da3a6357419339a6ce4818182252af69c75f95c0842d6d2ffaf3a997f2a403d526e465acf84130e961b41fccde815a9d8231b5501266b4520375c61de68201483b032c7f5bac8012751d34b662c958012954d625019ffa591c78b64a4c802492d7cced83afc71465acffd3f1ab1ee3e2b1e90a167f41987b1bc0e01e1531b0f63741ebb6902a6bbf270d640f63446c6501f59af6a79c0a93252d97f65951c35f8aeddae9440716eafb11b3fe9f2ff88100b1208fbf73c3acea83ddb530170ac8d6468ba77ada43cb3e9a4f9a28b8346bd6e8a8a2452f10a3711832da6ac78220f623431d2116b645ddf02aea7785b572f871c06745ffa22b38bfd95f93a4c7273f1e60ed6e2e313ab17fa6cdffd025031957d64c626d9de30036af54662633afcdc4ce05a92b700c6c1d9a5b65333a2d981b564d9ba6bd4d0d6e56df74bfbad87404c1506c737a61e736015cf6cc53613cf2c15eaf587952904ef278d051241e222c9cd5a64292fde841336d26031a4e11d6dbb939135608a9d55ba5c1ce167eb0a167376f79d8cd7f5183f46768c126cc8b687b792caa8d0196feb9ea5ae9c350db8b452a5ffaee5d9576fefdfb1efb9f16a4a0e050d139c1e48b9eb6537c94600aae7c4afaa787557fc60c80001a1a1e067def0ce008a06bfb36d1e500852a84e6019f9000d382f35dd34f6f38e0c47d5631b65f1748c6bf0f315bf0580b317900f3285afcd8b3752e0e249ff9fe41775da472ad3ae300219721b7aa23589362d342b82cd87eedd71a7951ba917a02b452d5f73d55d7d54aad3bed7e774fd1a796019f7dff118af7d6551995bea9e06ad3ffc4f538aaaff810aca3007e3ed210e7ab1525571366f59a1841b752719f51b06513a073ca2c83a7cd465448f323f715d77f170cd8e8c1c6221c84fd96f948877f9446c61947eb57f96346455efa0794879630b043d0e8649bf1f15958f0bfac95589076e1fdde8a5eace896e21390e7649b65611f3f2e0e1f8457109fe06df2a198824984d0886e636a60e92cca4d84785ad962429dd97f5b0a8d8e100a9bf20ebd059015bf3fb6719e85efa80909fdb30d5448d0a6056fd04701f95132aeb80391005c77955fe493a20e78b12c2ff27e2b97d27c75c7e31f49817c682134a9f06096589debcc20581dd947b06518d3dba4a5ca60aad97617b0b662607d7a43d87fd846149899bd2f12be9c10c9ac3e47e43805dcdf644cb70bf6ea0d11dbb5a52a00d820b557d3568a56c3554c64e56d9b0d0ac42acb44fc4c3d526007381ac7b2ceabd9c1f1519c0601655b4dbab347a0ce2cc480b7a9a3fbfdb4606dc5bf949d4665106f6573b83e6843dbbf7e2dfca066c30128f0f0faeca81bca237cfdcb3f94353dcb77bd30b8168f0b035e796f204b120e589f44d1d825e26e61195550722365f2616c1e80efc70e8865d7ac4218787c9739bc279f716df61252a2a66efb6e6175d2c7088d20dbf0ef0d205b2e9e1a01ff0146327ed072d66082318aa70c28d24d31bf0db97841ae411e97ba2176e6dc4ba144f9b1dccf4a263efc71aa542261071594307efb595b89508f978af40676f900321d4a626a215da8c9872831efa8d6b5b3718761a19fa27e6a081d6133b1776524410f45e6efce6f2ecfc0a01363ed73e1db62930312150f2756b8d6ceec6c30cb6f2613b95b57a213624ceb15574275391f9c0c404bc47e9013698ef3c33935d6e2955c58aad14d85d0af03e4187f79aad0eb7a5ae2acb2d2ab14695f045921a29f3ddc82cf6ad02861da47d74b47ef39eec85e5c0bab8e356814235709676251f3f8c142dc38b2bba1887e9ea359a3aca72d64adebeb7bcfaa9b151d5b3799e9225187bcef79909a8fd20901e34bc8ddec12483c2135f3cc387c2cef49d10d3cf5ee2ad3e8e414b991954c59a910c22b2d8b2342ed9a05e9c25a3535755080ea9bafb160e7d324120570cc00735291127addc79ae718e449b09705c50dc018bbef4ce15af71c047845d03c3cc84823740bf1af53479b7482aabe30bca64dcc841b590845d8fd6659230d57bbc3c945d87fcb6417c499442e93eb3ee138ba7a405182949cd9580aa3831013bc3114417440803aa70c411bf7121fa7963a46c602e8b92debad4d760f7fdc7ca8165c14e5ee4b5ff060f7db9e28a22e98b9388d04f53218bcbd2ea14693989fc5c138ddafb103f57f671e148e519ae02d7675ba5f71edf354519585ad896adfb2b6967de3669b52a6d12fea7c73e573f23480d4e8a4e853f6e049a89bdecd6a12f1e30074ca599a1b1a6d6e8fd429bb3f2583af26b09cd9e2340e41c0dee6afd6ac72830328fe58b4a000f0a50148e29eeb7f7401c339fcdb791273cf254ea47ab1719a75cfd359fc127d0435c9fe06f1968897ae483d3821d03843c7725cfe50aa7b6665ee0ef8371b294c0ef9225a85aa29793b78c44690746bc85388c8dde668ae6678a6fe85e42bf8301b9b89197b58b317fce7e4a17b9baa4e21421a8f438ddaa2d73d5fdc4c3f414e6bcf172d7b24be9c84c3c3868396ac5c5ad6ad9fa4f4efb41dbb1e5d4acb91353265dd11c45a89bbae27cd62a338f8f3516421d8f49b92c9f946cf2db5f5ee38c7db0c1be0648295a44ce53ecfcc6b8d364ed3bc5b86df45a7ed62fbd949f25ae496955bca55df419958aef720bfbf2e31525c73a3f91b399e4514d2f34a10454fdf368f90aee595e0b4ae79694543c4609ebae5f258afd534be06a893314ebd3415114fc742fc73e7f7c5f7993d256162ae0917a74012774234931fd0ff1c3a88ad5498e634e2877770f4d17f4ebc083f8ef07a688f684a0c9bdddcebde4d627723b32ed04a3bd8ce2df9438d2ce4de0f346a08300511f65634f9dff2f2986b125adf14f578ff6746a6b615acb9c6b04e224855c11451bdb1983c69f87650df9012a9a962fc2f4742c3aa8d190fa744fd1914207f827e7d687db058be0121c863195487af73ce6f1ec720acb4323d06b5ab43d8ec5341821d234a17c8da511b8fffc359a1f12d81db55dcef3fcd5e4b5f12becc3c28bee303cc4cd1ffc0e80e2ca2d325514d402a2caacd5ce821ce809d3815dec09029d3a020ee93b022435d339adab6b5c3f98737fa3635217f3320fb6e7211e307d87b527937a15f5f52364129774005f8d52c572fc28aae14e0840ef5d8a2f38008a67b75f03b6803b3b89690c586e167930852eadf54adb0b6d8db7ecb4eb4e5fdc7f9bda4c469eaf2d05ac5d4c3e3a67e17ac64ad3c83a29d29f79bfc4e137c560bf1986b1e815752da44bcf81fb668c53f965b0e99bc729d160e115fa0cd098792ec68243353262add4560910f41369666042b529898a2f5ac76343a4f0f175d9ada5a17b3ed50cc99aba43822e8acef8469d938a3db5629cfe455d028233aab62c28c6ae322d58f9e418284e3cfe44b76206b42c2ab21e52487554bd8651517390e8a7ab613769c81293e7ecff8465dd46cfed41b1fcef295a29b283e0fd01404ffb838b86242a680f568e71ca3c1cb3c0ead406eafc0085eb378fa96f187da8a42ad60c9b92f4cd817119a21ea27b8f368a8e9154b7faa24bc6c55c18b76f037ca8b37461201324e64d7e5b2f057ff687e99bb535668709cc6df57fae2fcdc309db3b03013b3abb50fa761914c854707b61efe4a54e1cdae2985630de2225029c19397c5c890b26e2ec379153a84011f53e33915d38f02e0ead6ab1921aeb4025d1795bd92b03242d76401800298577427b44069a2d10c2a944e43a5f111182809d793c89bed5a55d71eab732901d5980a0e31b44c31c5f6416ba2e1000a21c6fdfe8277c8444a031b4c5d5820fbf0fd735739ddb16edb3d055dad8eccc7f88f735b2635d9c0164dd8ce01247c693e8c03ec9eacdf0f88c99b96b1c6af54b44cb8c3ce5463a511c78cdbd9e28bfa79bcdd6bb49aaf9cf8be0a75b4f37b9498851250164d9529e246f9e613bd05d9d0a9072b2358369d914456351bcbda51106df03ebc1852e74122655a93b316a137d694d66e24f1718474a0c29686e20a0f5707b4455a2471a21aefc47df78e4df387093bacf975807c0720580b2244b62aefda0f7ae86c3502cae41a4f327e82ade23682103e8aed61069e95712549a3d8bf354cd2154a156f189c660d7a864ee981a5683ffd7a336f341d2034d328060e42f3e9fd2b340989f396d1ca99520fd2e92836bba7d43cc87389a7f310d79d6d6ee0eb7a8af6d4f3d1747eb2190df50866eb7118009a813607f70280232563333fa9394a9c4d53296383bfaeef48fb99f473e32ed1109841aa3d7f54293c3bfb3a227b8da650e7aa61080abdb9b7b3027e9df53f155d0394eac422e314b9c6a51f279084d6e861963631963bc4abf4b6381a459728c5826e8e33e6d493d2c3966ef5419b27c1ae0ff66956f0280d1cd48f438a93ef9a6670fe0d1624a0fe254dcc101a916af1360a4a851047e6a85b48903ffde3a195c6280cb0e15e810dca8cc9620d5d3dfd17a4447e57e4b3f9027085ea53bda7655143cb6522cc1582e999544950ca6dbb0a551a8daa63cf3659a49aa8ef2489a90c7646ad45ffe93717c1ddde68edec84b17d2e3e1690560230da26f58c06ac6dfba91fcbcae1585f10f7c0c9c75344ec0b509c3a26430fc709d101db4629699682a570f8d026871c33e59a77c6cdd9eacaeb789d74f724877d848ed838345287d52efe1ad9738a88f0464ab0af3685557c99c6cd81a2035f788e075538272fc3a1f4e22a7c24fee66b056dd75763dac8f0103cb5eee6257ff5a3d15dae2e3b9a919f70f6e96f928835b9014f0f0a2347eab8288f3c6c563d6b0de0c86c5816b5d9dbdc7695fc046c3f9ea8914da7ef2922269a60b450a2aa96afa5bc919c3ed74d9ba4954d9b4410675b3f0772a269d3526ed90482877b0f0925cd377060b7e7593322d0e0520c65903858eb113c3a70df3acc27524a91d19acbc57b0a2563153b9792135a3748bdcaefbb471250b210c3eba964a26122243279d37958b041e087b7b54c688886fe156aad80216910510038a2a6cea60a57ba4414ca4ab478cd86080ede061e084f71526857f6e09c7814f92b039a5a08a935d8f16ed06d61c8609f91b289b5cae350e9ccada892c021278a170a8d7781a5e5693a9c45e8c34474fffd5153e7944d64af39ef45a5d4a6f24b70e845132c096e09f1e83e5a096162ae38d57b0ff511815db4cd98506f9b548c9c7f2e15c4323efea2642cc8b253dbbc1affd64de01b0b6088f773fa66f940b32b8d9541a96ea30b9fe211c64e6335381a4ccee7c072684670df7e5f1916fc4ae694c7134854eef40df7c544cd9c0e6584d8cf24ad02f8bca92b3947ad6445cc487546ee4f2ef4797907e68d3aead9e4302ff1c984cfb3fb79b994e24a84f5f7441ca35af02a38a69d0a99c9507261f0ed3949701a09d556a5fa080ccd5738e75f654ea697139e8b1b89341c538369ad68dd5600195ee603036f4899a2d94f4f17370e76adddb353df8c41b9aecb7a70895e94f1f9e7f904c273a34de1b10f3734977100a39ab7dcc4381f6ed03cf69102b6c95bca19e923a0090d141e22e3635e30927668e7e835ec95193cbeaaf0defd3087be7ad4c2a93fcf9fa03517ce73812559bcee6b75a4f9764050000f83f9f03df438ef085731e3a3728787530fe987561fd32fa3ec7362aacb7fee4ad5099661e73f086b7a8e799ee2f9fa73e319bfece07ee92b555552f59cd5de0522b610007f5c3481cb84099fc2dfd2df85d591108de3880b73cbaf30ff9705d33d48cf884764a0915fc2b82625acc92970475a9982531a981b4c99783d8be9e3bc1f0918de6176803b4f59e904fdbf83d7dc7a0025cb60afad803167ed244ba63a398bc08e3240903b34da0ce496ec3e3a565b545d9b2ef4cdeed78727a1f41fd59f7d8042f55c285a6f633728c2467bdf02caa95503187d43035da0473097a37a5a464d03f9a155f39ef98d561c81e2de7cd44ee2211772d89f02348be3f8fb5b284ea3223ab1fa84286dcc7aa30cba7c2d38bdd492d6ee29339ea13df3cf369e65cc0aa330498e2137c9d1b65f3d7020ac50babfb7782643fed44ddd5e4833c2fe556669618cd850224a0831db401521c1c0c12b9c089101bba6e92ea29db60d533f47c98554416e4eb109e40df11d054c0153582037167ca4680ebac9a76ee19c444e713f3a2c8254e93fc0217e3f12e107dc2837b0646a9de08a5689b5ed141295a0a6385d82f16c8dfb257863a41c4f112d6df313a173e74da081be8693ed996cbee0f1f7206ea7a4bc978f72e1cde8079a26ac2e16fa39ffcfa7ce3a9a1dc7a7f42fa1998d9d2df9ea8debe780cee9386c88622070116bc4cbf99e4d46c6fe50e1fe3864a29d9da9108218b8781320a91de9b559f158c212409763c365b432ff50ca183d7cce4e618e1dfeab92a5f48665527ee79d30afdfede4c58905f3c4f86704b9207a8cf1b792e35a60b689d1ebc61ad23f86201fc74c49df582c6e586783899d35aacdadc25af3291d082ea1031c0910fb531b58dd9b58c65fdcefbe8689b29a1ee9d7997abaa563f0ad4a721ea479ec172cf17270d809a5f286af5330f55d83493b7a9fb93c6a7a2b02d732a63545fb26674230c0d169e7a7544ae4614bceec898f6f9e5fdc7ab156b8bd83df22bf811fab21436cc09fa5751bb22eeb805385cfab649fb61a2bbb28f011b68b55da6f8b38d6ac29b0de49636ec051c8e300f592129737e38e68bd9426cdd1d6fac2f80abb290a4d76249f374263a201dccb1b4d90218ca6fb766c8f9b87ca7fb0ba0657e73b7e19fd09a02e34731fe9139976a34f1084f1f482ca519c62eb612328e99c2622a0d93eaf019d21490c6fae9c0e85af81cbb5a53a187b9f8b19c035285a71051000b2760c5752e37cdb4134deb4260f8daa9b0d09b7ec5fe1655ee1a20e7a8a33051291553e20c7a90337a7e09d7d832cfdfa813dc139f460306f25676231ae009eb0dc8758aa360f4b424712411d79fb3fe50e09434555fea481791f35959fbd4d4e93abeaf749c030c61d74aa8455022c4a7b18b54cc715f40fa4e1eac0136abacdb1e55684f21f2159004397ce06accbdc61a4413e9b93e207ea1ff94ff5b7f98deee3b9f2956ec4a7c79698c5cefc955066fcffab419986ecefe30d9bd27e0c5caefa314436db0988a5efee15588571ed2fb2df61a633a48508277a757a87a56a1e397c21135ed1fdc23e0be562ba381c20b5526e941a30fdd11c8063577322756d0f1662c64a685a75fe7c441d32dd45cfe0e61e959754a4faa60f96a5f229f6d9aac5f00a505aefe62b8fbc25c9d79fb68b3c29cca57c416ce8079664c13d875c2b7aac8b9508e340ef1e8a73721bb3fa87c592bc2a6cd29d0c0dfeabf9ee714edfb71d599f03357abeb1e304fe2d10adf58bd0ce23bcd3c460c096814c88fecadb7cbb08e3021246b95c625e84d9f1a35b83d176694d2b71fa93435e562671077417894fd0006990e45c1e80a7982983f5dac2531eb93ce29a4ca351606cd43c0f95436f85b99d29f4f43c56f5fd35368362836acb23c83d96dec6622f025ce0c5721afd9419c71877f447153f7eb2874904460d0a9bffd2fca6adbd98df04089250a2aa0192d87df177f64ee8b6e34fce2bfc3f22fee22ecbe2c9e14e7508b22570f2c699f25374e4b0fac6bf8b8021bc640e7a83d1c739f162a76988b0021942d23a2c9caa55b1e05724a32d6facd4e7af3bbee69a5611af7bb7341666f252dc32a63f8863c757f3e43c5ee8eb990443c8296e4a04691a6f36157bfa59e1c2ba6c117ba0df6ad512e69dc3781041c92be92e743cc6924ac7068a14c9c5b04f9089d914818e66df6fc24601fb8f182ea019785e6418b8c548761ad554fea21f75664774d8b766071e58d1b46021fbf3a3482b79d813c6c311aa208933769b03981eb1d7f7705351b8113ebfb8dd081d97543b3f818c60fa240dcb50fd181f71b46c0994d84e48f802e2bd9db18893d2098ba4ebdb36e21c5b5c6745f3d432301c0b8c0673f99076c5febaa7e1d5202cd7532aa94f94b3f7b8940bd525d49ee8de7f1e7cb43e50543631836db175bc7d058cb73de66c9d0c0e9693beb20b557ae9523769bbdf1331c79058a7de3da8709ee1e0d568eb00f80af5bb829daef48abc1e1512862de4f90cbe1cc33fa94008d1780b5b0f2e1cb151a75c7bee00d7d1765edf46acf2d5fdf6c26a5ca3c519bbf925667e4578093235448a93f5e219b0b699926b0adbc6d7c2d6958bfe8ff9abf2b1f877b56460245bc8828fa988f972d9a1a43fd53de561c2eebd5742838c13b0420611eb0514f6b9cee3d538b66f1dafa2141ba513ff1f076906e9888c1f1a6c63e6287263a04bb7ae9dd2a8fd5b780951426ed4a9e2a530d459212280f91245a7544bac26b925f468ecde8f5597e40e9e6b60d05e83de4ccd0955d0001b5a0a7ceaf492137c1c3078f3b8222d46a1d923a5797b8e520cf17c8775b58287ffc3d60b2aa727a7eb7c55b33a815ea0958712b7ecf836707ca93fac6367c7ad63a965de7580a992ea7deead16f6a91f41429a63c3aadb61091d12299cc5e4993ecbe2a88a364a80523fcc479a47143661e3fe0922b9936562eab407eefdf715fb076d5cc24a60f23e33174183b7b8ef9dea1f27f27caaa982b24fdfd5bd19a979bdb9dcd2fd0f11c7dcaf64d4445bdfba79a72683d79f18b4f0c723b59e27530da0384153c14bb6a2851c1441cb124112239fd9eb8ff89b5a2d32a6f9fe69b18ce57505e4fb67983ef6e163b2c8646d279556ca4834365452b1c79e96db963d4697baac6ca55f1d205f2065734939d227d121d42ec6e11ec9d1ee19ed8605f5091d1673980ec8ed59b506bc43bde11e924f244782167d014b39dce9b734d68c53e0d703d1da8c154ee8533e77ff53b5be6549967c9cc5617a3c0d109b1f5b0d52544278f100c3276436383b72d49a3ab4529ac09494b08ac99c216e69a7e752f217191280ceb7b219a2fb929c82e9aa4dd36e3c87b667906a43f67f5c2db703e9ae0deee28e7ae69fd28483e39511abcfb504e23ea3594dd8a787091cf541f325d30a23d3e86d8a4b6030b2b674058a1611d3b83087acb6e6be6ae436efeba072266630154595d5b42a0a3b56bba32c3b2969995ab73e09361e0d57487817898c93b91ecd19d203adb0eab88d7667a7e04ee91249c83ae3cc9b5f90bb3c77eec3ba01b57ad6dd8d2891a653092b8193f98da2355ea2b5d98d071fa7fb21822fe157ec45d80aa9289cc65db7e13b7e1c23ca5a80686b0f1436a8aa83dc8ef234e5499a7632e2ca343acfdda4b4b56b72e7ab4139b97872b9cfa776e3692dc4023f37be6a5294ca38909f1cee8c73a10c938f35d72946d8130cb8d953b6bb828aa4c641a063f6e114f939c82b264bd26575779fe7489f0624b53e5d0c234cf2b04bb983b61083dfae0d98f60909075ea1b6308dbeda529220ce7e38b5432b0c66cfb8633af90a67b35ee44e7c674deedfa0f607eaef122641bd92572fb84f531dd237a1907fd607d5260a390826f76ece6500e442dbbf9020ab5df3e39a647bcfead9d56d6b93a08873a011b0a7c01535d325e128e763d889d503ce06bb04229b6da96d5697ba011e977c75d2808a26ee28ac6a895384b46d6754f5b755d289fd2b6899245e3bfb89241cf4adfbb8e0133d6458cbe3b2dee844794892792804ae9dfa06a7e46e79ea624f137c5fac05ebbc4f7696a8c6c9904f55533eadecddd4373d2e6cb7ff76fde9f36c1e846734c95de0ffbc83c2e17f24d1bcab7dca59ed3d481925627035b79eb49a2d3333055410c41068bc02df6d87e1b96f5c967cf27825002f0a75bb6648203d335f801186b570c136a32281dd100f8e793eb603698cd64736d5df3a1096b98d3ec7edd0408e45a9bdfa5f005a15a0663d8b0927d145002feb4b81c7031de87a59fdbf0d212e1aeca33b1aacf50ac91704178e44363af5192d750b1d3c1ae1c85bb0e6887662ce19ee17f4775bfd406576b5af89a7a00b412695ce1b7cb7420717e264d4c2ed81d4fa815fffedd86583bc17331de89772c8e4f21b46f8a0c39fc9b21853566fcfdd3e4d6eda5b0f8b1f12f2f5b06c564a473b7b19f618ce921bb22559b8b1925be6c3fabe5db1ce11694e5b0e0a9d20938d4762df5e47ce22b33cfaf091427eb1ce3e2173897c95982a6a3f48d0e8bd1613cb8614deae56ad32f672318da1010e3dfd5b2ff20ea34fb5ef0394fc45002147ce1ff1ec5aaf6b4d7b28a3dc32b9d25f682c31971911fe483017dd100d6615b95e6daa7c4fdcade4da2e354338c60cd41003d7cd77a51285d025d8e95d504eede9c9e7fbbfa52de59ae7f49d572cf2be9be47e9a08ea566b5f7d42cc70f0e3ebcebbc2f0be296e7b3f2db013a96456d9bae87bc061521f97f4cdd14580bd26f5476d51249d6bf03c3142bef1d7054fae5eee0455384fa1b70ace9997a2eacce770a42bcfdf335086ba3d8d9e07d6d74bf3a686d7bc8002d05829a0e5caa01365c5d10f58972d1a3497befbc9f3e337cc5a811e4286e7374503f0c91bcc46e8065baabbea8904d22129a8777c17b78bcfb96c6721bf0c28aa39e070d3a17d15954992b1a3897b833d6b1b6d0ad234c154114f36790a355921ace5bdaca016855ebb3fa1d138f1a03574ccf18983c7cc6080d0c174b6b299ec73e51da83de20e9cf66f0f905da7dbaf08afaf072b136bb20ab109804ca92b7cc06eb3f8c21e311eb593b5b84a1d2dadbb51abba66c85a7a33478b3fc733c2a75fc51f8a527da88de058593ea89392bc9e8960d107af80a3b1e587286525bcc50ce2609d8fc724e97ebe0aff9d86b22a44d944b3c85c9631afa824a946385707c03c9c22800e571a679b00502049308c96148224a4eb96bb4d6a307601d4c50b9a906de85a35e52dcdbd5cc4e6b71091490b7f16784f0737b45f13ff40b4746e6ecfdcf6b1f9207269eeea49b9e9d457f7a6dbe57ebeff1fc363deca97ed13767b873656205d3a5f9760e1b31950446cb286228ffcba8314e60e324d314bec48b00d372f4f124326fda1aa29b608b8032899e3d56e61339dc8933d039571776dc0c5fb4702cbac6af625b68b94e7d18f9aa0d72ad9731f95ad2dbc1332134f46836aaa511a2600d346a961d4ccf280e804f7128fcfad6d3a415ea06c19e61c5c027ef6fcd63ad62c4be5621d8237c9cb955eae35dacbe7cbbaf6853cc94aa8359c7cde0046ccab7867913a3e2364e740c45af4878a5bb0953c3525722c188a9bc2bbec830a3d97a607eb2c93b59badbfab249ccfd7703b2254bf3cd245429031322de6bc26d40e054e796678d18860ff7bde5d101d13848aa27eff8bfdab64a77e33898e9233b3615be48dd5fc8ad37387c680ef21c2dc18a5cfa7c9624587eaddf52ac7bed61059c268d32862ce826e548fa88cacec8b7c88f5374ad2ea8cd79646f0109e7f21a2d89c3943b76c4b8cddad476448a15443006821c50caa5d09a51645fa1b8d71903cd899c8ebff3fce4e4753c1c33676329067c7f385917d215f61139a58d19757a6285a18a0b3ce7e8c2a85fe726e4f888c068b0c7c6964cc513590280b61f417bd64e3246038a7c7cecdd8412c4533ba8b5d2d11cb74ab27f167733383fb93f43879332e97e851584837c923fa4b2b97c9d2bb29517933741cb40b31a6de8e706fc0dc7aae3bc9612fdf8040e1e8ec01a0bd04c2ea728d323f18c94481ce8b0b22c889ac33aedc14c109693556e06f13a7b8b16bfaba53aa3cf473085107c92e9d1d09a2aa8ded7a97e8aa918de6699c843c77ac4996d371cf5dbdd436e77f4c28ce4777ea0430f1390de51bf6d25daad5e5271dcafab8abc5b7e80b7380984cf0b7d954f0c1c1974ed261a5c32f7aa07662e5abde2e04f33427296b1707cff035e17662021e6fd16d7547ac9529926611637b31a46baf430b3013c87f06f89ee924e1cf2130ecdef4b7d7cf55e7ebbc39b1c961d7a0b50e80590b23ffcb0dcf2b9f2f2f989c3fcd5b64f07cf0efb3e4eede51eb4c6ce9855b83f111fc51f071b2d88f2b71aab95fe661d1b7b81ddd2435e1414329e20226964bfdc93538656028b4a30a68ef4aaec76e0ef914bed15c1a37587c5220ead3615f502f2adcc4cdd391f11ddfa59f4be759cc2cc6041e66fa966211a8d94d43b5577ecb949776595c469eafe9dcdc3dd8c59d6274dac4ce3aeeb96eda08fe58296ae2843cecb963a8ccf9ee62568191b7aac184a5c133e4256c78b8ad5f69a5731445d5468e320eb4e717ef6097a99aa6297c93500911567b7a6890ac8908ada4d1bbc51269b9bfeb4f95e65f5926ae4e942dafb632e830298d5b7e1c07b719eba7ec6d0db814b16d7471fbc95f197f70f8d218889840eb0c47876a15b464174740606e7cb5c0c448d6a0ec99e0408b3fd436fdd429515bd289135e4d192401b8b6c045d966c74d2d9ef1a9267ba007850d5cbad4b98806f3837d8c3480b91ae97ce82f6a2598bbb404c8d8897c828e312bcb62cb4731e7f7afc2c1e7eac02c3e47d69266bdfa8bd16448a925f410d05f45bb3ed50dbcedda1a9a30691b63c97ecd7665116033841a42949461bbbcf27d152cd512db0d1979eeb3c01c18d5f9451eb993a63a554ee13660d2bff006876061d13538414d25e26c80974ef5f1bab64eb369c2427372053583478b8fc6cc045d5d6a7d9100b0ed4448270709d4843ac8f7c851af7f7d237f32d2ccd9a8d7258c102af787303d9da66b7e17243644162249e5314c56bac61cb73af0a8b377089f94036e1e98f041e844009b6cbcd3b323bfc118dd54af24e6c1a6a3d1a2887e44f4917513fca3c3e53bbdc4f40dd22023e378511527b8aeea565c12c17cf113ffbf21aef35623cb8a41411a5f1956942cff08d192add531143b7012cad5c6f281dc0753aeebbc9a13fe33d1056ccd1942164d46417b9746412f7f5daa02c7d4002101e58d5424800c959a4642df5524076f05dc656401e51c0c483023e8dc0ef11a0a72117a2f0eb87fe401239ad6174c9dd762906cf9c017e543036135dfa46c37c59b4d8d7eb770936fdfae392c5f40eede49ad11b26d12f200657cf70f5e2a035a891e8566f03aa1b28158b5c7b1d50f621556df1cfd94067bb3eb14c4ca108b532df4d40446e8ced7c38fbfef3f3835e4d6944eac197d189c42654015be48de5d62d60f57ac9cada2374235917c74c763753d8f122e1d7c8de791f0c32fe45972d728fce3904debda16013ef1a1f0bf852d31833f321a3514a0703edd8058b25c8b0a051f2e6b759f3caf72c3249ca3acccbf3a1e91201191c77c09480ebc93525b36bf3f815cc0120a13c10001d36c9bba0d236299ada1ef17aa6ba7c33efa057273ed08ac30b15b03b0a6d8123743afb2dbd0c13bd45599e752f665b2422ea31b6289b452b94bc19ffe1351bb4b7597d5ad2e6548c53a82efaba7af9dc96a723f310b91e1b0fcb235ba25efe1e9c1b79371d7f399ddffd6ca9f1ece8dcd55ec7fb742886ae042a2f18173ef4595c32282448fbe6f26772430e6fa78501718f19888efa15ef0b49994e2f1a8dc18487f3cd4b6d6949cd02474f56f56b5fd02aeb97da10b479864d187e6958a550ef73eea5be725c158620646c23aa27cc9a0886caf9d68349c2fed715621aea259aa67d8b8a3f58d90f79eb09cc2756585903f00421f33de78e440e7fff90c085dc9b47bd5f26ff03d852dbd1212dd279322315e57a82d4336161c5e611d3e86ac42a71ee7be6f0db18982459e3d177b87ed765182bc0a34d9090e8412d9021b6c6d914364e3de785c3b0f14c659efc1f495436a19cab0a5faefe2a4324e3e30f5099f2c0aa36f2774c6a0eca4c69ed48cbe1e708a5f05d647aefb3932e9dd1ba644d3b9d78402b439b9ce1f02a0592389eedbbce4b8b3bddd32ac9fd8f94aab0171ff0f2f5da187102eed2836224b87584f212958058b209443d96240206c6fa61e54094ee5eefb5647691ad1f7b7a187720c9ea2f66444e001ba6ae8d57bba116924f0148a53495ce73de592b605c5d0731429495b8b46e9bdd24bd07aeb93bed440bbf1ae376e0fef1f08648ae977b183f93783bb963d9a996584d09fb57230c1de362896504eec30850ec130f1a6846f1f17bfc161a48c0f9c0fca1ef47acbb54efc53d0b4a0655fc9819292d59343fdf7b43bc0c0a8c8d2d4921f259e857c889645d1cde7eaaa99bb31374d96cfccdb73bf9e9906dec46ab74f2e39f00266f3da840d1b25547e9e7a433bffe08822f5edb8844118062df0815c1c4bdfb0e3fafb4a4420b91a7e13b5d465cd35573bc88bcdda25bcf76aa23121508ec4a839329c49052975f57e8fb6510aaa17ac67527424e88ca7cb52e8ddd5e68e9febffcc4e4e93f3c0b444ce3459f456eb451c4c78531a38144bafcea6884084b8dee5ec1a3779ef21f3d4ac6ee2cdef2cd5d3d4d562c413ea3a7b4b7f02c513c42538547dd03783b3a92afd50a495644265f0251f8c47ce7d52d57e9457ec74a8ff4521652c12b623968b1da5c0beb5768c841904d0bf2338b836f31278d8227724aa985c95cbb13ea7965cf30bbb641b19c15af2c892641acdfafa4e83550e763d03ed82be01b0b41e789c2b00e897fdcedd367f44a7cc31f32cacea419d2f7ab1f729fea2b934a65a9f13a77e09fc550399a86ab8d25fc146ecb96571d710ba21ccce78354b448265c6e26a938aecac8caab7583c2f2853ca8368f612dd1cbd36e4300ed80da229b15f6b2a8f4516aca7ceb80b619055ca26ed52290b9fe5e49e6471d0f1ddbf0f165dbb37999cbae041fae73f1d856a47597d15fc110a5a821209c8c6fb10351d2acea4d165a6f8971bee5b167ebbe57177c50985e1fc4414ab64a53f3b0492bf1078fca68756618b4e9cde20d7aeae8e8dfdd8c81db6df76b97cfb8437a0f137df2f4f65b6df8c8d52804ddf14cdfe0d01941e7d5e513173da389ae7ead18cbefbdd1d259efafdb4d420cc0eb388630dc24e5adbda3e8c127a05ca783a8567ae01a83f3e79da9a825a9f78f452e535da8131f53dc958bda548896a06b6affc16db73d0959eaf32f41b1ddc6927ec1800e4383b0bb990d68636a1c547a09f0316a74e883fb04994e18384ac3f7b737a3e72e51ce9f6c78cb11ec3228fb68d0c4c6341e3d14f13437c568cd54d944054a9f5b94e898a48636e50da46c0f7940fc0b5519bafaaa9edd1b1bb3850aee1f7884f87cc2b8648c62529b206911cf8d1fe74a13ac4233913253159d3d09e14d8dbce694f67864cc18886801d1a6d2bfaa13b9739af5f3e34ac11ca37e936c66cc1fb63ec0a8618ff537af57cba4ec8e3b0dc479fa426a232b403fa0747e0dded21babc0b9f379346372e831c50c413af05100cee77b21f988c70b6582e9bbd0d8e813344748cc0892a57c5a48675ac9b90b4ef806d4f75576d29d5d37b84eb1a27c9fc3d910170fc0869568be695cd767d248274b89724897a0533aea65e71b052a1a75bdb36f94bca4ca504e6e744a5134d28ab9179192f864ff584b12af6dfe32abdf28b9f8682aac782d770f5a044b29da6339e71322fea979261cb8c24b52436cf40e3e02832c63adb4e717dbe31db0f336cc33676132ba6a228ed0b1beb9f128990637cfb7a8db13a490a2342548670e12b0556fe74d7c833519b5490fc0f9b76696ad16478fee5252d773fd584141980f3eaf39dc4e47b0a074ecbded639a56c905ca87480004b24365f725dc2da2ad33c4c30d0c6ac6cdc759cae87897b2ba2803868029c09c87cce705cd3b12bc67d919392e8a9dd9e7172b4dd2e7f47235acb0610aabf99551eb7ca58cca9d38ff6ab8bd9f0cbe77d8bc9fb96990b7f4c78d744b2a63a0f9086dfbea38d8e37714a78fa4ff3d9e0e1762515d2a45849bb107ae174fd09dcc657edfe6b6706926dfce9ed68b7fc559e387ca5c149218d1ee16912324b0b437ce1ea0bcec3bff2e3dce4e6800e0ed648537bb52e68872f87fe497f208ba88b8ffec01f8c7ccb24079aff53ac8ff8ccadf7529e9631df9400efd064d188a989aed6ea5a453c1cb46ebd1a7edddba13aa031e53bf4a03b15af6f9428c02ad2c67b2d040d1d84d9630d30d93fa7a613a868d6518967b599fd1c72980893e26d7552055a6607ad6c2ccb78bb362f5492da37fe0ae71e2c7ae69d914d9bc72bdbbc14d8fe73af634bab3f38b9b1b0c4cf8856f512128943bbd9d005429b3ea3dbf58dea106389eea3e2333b6d0adc921b9f60003f46864bd39d50fa3e60b5b067ab4a7d46c2ce3354d43e3fd0dd33fad8de7aea1bd7bf52a45e726789e1565a49a46919ce76d219d9aa0dfc3de7365051b3ed541d30268dd6d27019745e6cd8cbffa991b57229a6671b16d0e267a369e96925a4e3201be1647ec247f6187ece4ccf090b017949b90fb59740c1302ff00c4640cb9e8c1e6b08ae3ca406b105fff197c20761a3346dec772871b34aa288dcd1f1efbea2bd84ee4563d481a1feb36b598fac43a8fd02b0680421be5e8d707ec638aa77818ec5254cf69b3f9ed0969ce9ef4d3aae1ba5455ea123c3ecab72e538c06fe9f10086ac895ff5e7b7db7c5349ca6a7ec1d965ee154682c2aead93c99dd675e9d874986df9c7077143be59e6c22cee91738327b44fb7430d50ae69b92f3f0dfbde455c101754583b2d03188111ad4d8204abb20c51fc486737f997b0883be1aedad7b6d00bfea19493a4e714f0a92e3acbb1a9406baaccaa3f50341c7e1033c3df68769c48b4f27cc4586a9ef9005a63b4302d6bd452fd4eb0bc21be974578f3bee7f9da9a0e46f88b5837fe04cf952bf3ac3a38647d6be95b56368d5bfaa46ac45f75fd53259565308e5d0a63b8f15be300f62afa300da71f69595afc2fb08bea4c6c68da57c8a83bf4c9d057411054c25b64ed0c708790d3edf2c3ae3b5e479aa42f2f39d4e4fb19d603ed128810c2060672dcc8f1f1577d64d4f3751f5ac55eb5d96376b587b3674713f1c8546d021b770767ceb67cf956824747affecc164c36b73629cfa66daac4f8f74c02278738b7300a9e6f006ddbf556820a47b36ae8e45c67d4b0cdfa999e5f0f8bab535b79de6a4106562f879d1eaececdf3fa10c573f57e73cded002a190c6be944d8baf7b3383c62a9995665605c9dc01e1494d2d600debc1ee86fe661294330b559acb80e899b86e0d1a7bc88959711cc895435957e00b28776d8ab311d03693edc0288987c32885f8fbaa70dfda3d158f303c74f917d5435f7a86d2fa512f40a50617fa462eef7a21ab9dbab18b062573449eb948e0b73e70cc2675b16dd0b94781c321a217f91f5ec99f749a3c68abc38b82c4c97375d26fd95d91de42bbb82f1f8d16af371407e967a19cfc05f07cf58cabb3c407268ecf2fbdfd708bc1ce379c47fab84fbc0d7cfca9687bc5fc972abd6d9abc0df39d462190ce8e282bd9b32728ebf8b50236c3a34f42cd1344be1873bf3c4745c2f7d3416670bb6451f069a8f8af4dafe27c31f7b184b9cb5d743c3aac058a36bb0cb94e996fefc6951074005b3e24babe7c9ab019c017072758e11200be146eb5099904bf1e8cbf0418e9ae86f934658cea6c75df38ae3129554f6666ef4ad4f8bcd9968ee1d16bec68076ce6ca3febf9c9628094ddc8920c645ec591e52317cd2c5dacf5fa3e4b7110588618935ee45a6c7517dfd6b891e24e8de28cd0dad9e42079b36c5b983728f0ffe8a3e8c0d4a8938e7d01a3e41c1f120028200b3b4c0dfa7f627deadb1ec65bfbb88351d5e5ea71abe9166c9fb996c7fee735ea98ba1518ba9ef3d528af5c69a19f2c7b114677a8ad686a9606afbbf1e285bf8d450dcdf71e8d8b7af83609e6401340ea5cfe7cc2ef52b1551fdd3c68b04ec49c2f564ff18ff26aef4ca64163b2f31d93d38485bdefc3fac8d62f0e876fc9cdfe036903a2fccce7e640eb3f4b9ac8d33144608a771e6558ba091567086543ab0c25454fbf03ecb5dde1134a99c75689d7e5d4dc4e5f196c7d12537e9c43ade078919bf1a7040c81cd852d2d477b8ab0debfa84495b2ef3be1e06e0301a62259001fdcde23b28c0084f9cb262954c6094d29880614669c11b2bcef62ad51690b574c4b5c486b66a4ae6c3ea56fb8c0b6550ddf9fa2d4fd6840dd5910e44b41e30d4164e3e62a87cf9c9ef4a3648844e0d60bb3a4ab19e0fee4bab4c384158fa3e057d1170c3af7ffaaeaa0836da00c7a08af9a9cca7da0c1f3fd329bbe180e7003ddc6a44445e6950b9e8f4f8de13836e7b14b042086c85018aaa6697780c217841c9d7793802c6acf0994d013330e8e9974aeb852322bfdf28b871bb2d7fe7494eeb1eb4ae10c09ac412696d318183e3e8a25eef6da9c1d6fdeec806bbcb4faa511792a7191fa199fc1112f9269a393ae961f7b4617f21d8d8dff11ac438c7858691c4e448a9c0d7a81e476fe0db6d49bd221525e25c6bf6792be3b400c73ee2aeb8ce925c89cc0cc369ceb76a6cc1c5216c2ed99ebd4593ac728897e1398b858dcae296b989afb8eb7ae5fa2bd8e7dd9fe05e037c093a96b1b084a8e21289b5dac9c2956a4c575f4bd61c1ac109a452412c7df980c88b1bd64e88a4758d4bd7e87cee5f998519de3ea3ee6b3c4e27d709c0ea6b31c30c1714c17999b888ff753da218d89fb9d66b1a81cba384b4ca123df146fd9c5c21283ca389ee935c5bb26a12b68d64b55fbcec41c6839d215c55d3c8d5db763943984fae4dc61d902754ee164848227bef2c9f69d0073f54b2fd75cc972e46ace285fde862abd76c862801c600d068720736fc7df103310933d4187cd21659d3aae0c20b68ce97bd1fd9f5b5b338c1f2a6d6fc5b7aba64430b17d8209ba8003ab38fae48a29f6b536a67fe5cffa32d4feb56f7302c1379424bd4b3f53040708d971ab6b04e5f30b79fd64fbddeda420101974c11f80b94615f2ef1d3bf90b4c188cfebb30cb4da4dcf75bb8c89638effd480392c3c00257d2def1289b001f8355f040d8ff60510c132eb76ba137bc60af25c1c966a7443c6871b140cc054084cf3a3bbb39304c76a25f29771dbdacdd2069077e5ce9b73b1ce3e14121f6a692bd5f1eea7c05de6db91b338b5884be9046ffdce8d21253c50190091d947e31d9e6af78d27a4ff63bde4faca994998a459f20aace929b64ac6a9aa09300377a334d50106f550e674f2939e1aeba4b2955e07341f75ec3dca55403676b6c2e68487f9ac6edfbbbacdcd5da714b82b1bba3e7889d7f5c166aa9d32760cbcc2ed07a3dd775aa0c57110f0f582eb8e6da068f12e236cd1acfc4d8af7789e813774a68acd748e28ad964648fd9dbc6d39bc7739095e5cd8f35f6dd439475715f8f7aa9c4b196b19a588a3cbc948f39fd1015592760fe00a73e17035cbef34d1a98fec98486cd67f611282140fd4a4e10f045467c53fd1686abd8e3e0a53f8f0c81c7964d7e455e5b3ae21ae18d368ca799ac1a72250a7bac660539f6453efbdca38878968be01c23da2e3c76bb2cca12c5fec53d72cd5bd2df06b4d3f58ad80f0431ee45ae779fbdc34138ab7c4aea471bd2e59fc2d5202dee334f61c54a0e4b1f04290b1ce1c6b2f716692e3d365d38f74bc4d03f11fde29aae9cca1b12a4ea8dabda3bd2dcfa05fa036d784923fa59a26e8fd35920fbcdc945a1a1d8c2f018482e1a230272e717d0eb12ad42b7ffd829c576293021f4837a4a1faa94df29fcb2b5998781f98523f7df1e124664f51a5ac23cba8b636c50f121b4213e730bfac635dccdc86fea31f93c23c201f8da009b6e31098e25b55aa3ed8d4673dce56bac0ea5823cf1fc4fe875dcdc055feb208c16f9d2d5fe460c23f62c80bf948e99010ee698c29a53a26a6b6ce8dc43ade9fa0e886be9d9aa62c0d693e46bedd3399b6c0a13d1829415ed5540bf867a228f2fc4aee52b35e3c8596d03d8caba97b0c4ef473a2bb0e341b36258be07009ce801354272b98604f0dd95a7828b5de1b636bddd8351f76389d92818b39969ec887d2707d8851cf6852ae40f986ad440b3b3b8e1bbbe93d9577e6854575acbc448145ce318d1eac9c0e44d38fe1c7edd723b096e26d73e059fac8c0cd64e4020baffd43542bee605dc2d480cc1d0e1743b8fb95878964646ac9dc0dc7064233f21e7496f551962653105d3f68318d375fce633d3f49730967d50cb36eeb4c92d07fbb3ddb57aa01ad59d723fbe04cada6ba7ae00e508ad8c59eb942c228e193cfc384e7986888f6378119ddd44d873f396bb661442b04c72ff24f2eebebd5b16c1cf41e2adc02e8d61968eeeab3db6ad79fb56712ea587347fa5f04ec42ad9dfe8f094044418a008ea7eebd77f13655f1c083e95e9d27c5f4b15f62159b5117d9ee12ad687a20c9d365a60c669f7cf7d01279aacde2ae5e88eb8751440d55e6ee3f5bd38d78c162b73ce88391a579d863b0957680867f9d2814e0ec165840a5af3d842a11e87504f1da6ae98da4c87b7bc99b331a5afb9265233e26b4fbe37f57368c0da8436e1859da39c62b6d0ec4d9e24b4132e6fa609287f736c04af10705645fa0e6b613c19fef6447c5ca327a929b1f995fd49162decead5204f39d8442b540bfe7d202f876519eb864d20eb5fc2ef5c69f4a7a989f13f6c1c0a914e01b93822550d4b37e5e7db424021a916f81200d386b0527f73ca5348225c9a1d62fc5c0e8a56ffff203db69a7af0ef80cc80eba27f992d117579e27c3cf8640bedc556299543eadf46a7f784289efa22e2a7565c98b64d093d3061760a22566a77b8fd4f3d35094644f4e2c1c91c22912520b026f802bfdba3fa61224abc142156d212e7f7ca984bff6edc3c25619443f4db6ab06384ea60537daef073d84a8df870d02bd1c890f06bda4aa99fe6bde24e3caee126d090f443f0c4f8a38b26a692a821c70bd048a41a1aa18c4c0b7e3e6ddaa4c8cbb0d5e59014fb38a221501d65721090b9877f848a91309f5ec12798523979fc72be20242e2f77800a8d3ab74c5ecd55d2e0ae857a937588f028a691b1918b483f200c8776ff0f3e933d043ce79bcabff8760384a85be901739013ac49e57c2d7662a11cc9906554028eed4da45882b1acd0e8d397b9eb5c0713b1327d6bd87d4baff49b0f74f5988b8e2157653cb4d3909de009fc7142204f4385d639902bc8aceae36a0a134208ef3d6cdc6fdfb40407005560df93d24363edfee0365d78f34a66046d7b85a08d7c82fcbab39b2947f3366bd86a89d7732a47381bb6a93cd552922e4bebbd80bead879f04121619e798f9b0d39a24331c728d9b63f4292fa225703306273ba2f5eaf44cf66cc8b2e6eaf8b9209fc4666bebc492142f5fdc2a3f3e1a57e21777cb6880e754288121518b91b58278459328a4ed2318c176e4fd318553671e53ee3578a184fa4bf45a4bad8dd6ceb84de9636d5c677bf97922d610a39203d53add72ec4cec847c43c2eaf96b925069f35ca817118a20d5b242746bd8e0817586bb1fe69a32b64ef6f9ecdf3e53bbd46061ae4514eb2f5fae6fa498eaa869f7060d08ce58f11413b3641b922dcd856d257d96e21ab3bd035d533d197644c59bdb513a7b22dcb898c7c671ab0aaba81a2591fdca540370196a2936761508d9b67b22b83d90b5f33b55bc716743a103edacb5530f44edabf43f382aa45f82dba4abd1811d7f56686ce05014f517d0c42225c936ffabe9c7dac1ff5fc7f01ada3b6ebe8f7789eef169210687ff739ca4fbba295d42d5d328f84014501e945cd612cde4b7e1fd2f5520bf68e2a7ec28a29a44dfb527b794b2578c340f969894f7e47b25d237d0c542e2d388a5fff896d885440c6d6644989faf369aeed25a140ab15ee000824ea073595e1c2a14668f40d43ab27425cc505dd8ee32b1301ded92a3bf3c878db406657f52cc70564bbd2bb12f2d110e633f73f2f3dd8849695e577340e3808b9db4c762eac13e30c2c636bf9b20754fc1bcb49c6a649663d591d38203c5fbb485f362e66bd8255dba0f509cf26da54badd7ceeaf528102eb7f6b762bec25588fc0fe391f3d93e7ecae0f9bc0983fa61cf81a9cd94306cd19a0b0656d2505ef527ca96e837f889263bd2f7a3053a5a57996269ea53beeeaf39fbd35700dac6c8a0d4f5537b2fe97fd849bb032f044874af0e2ec38c82affc07d0f7ae013e8773a94da6ff30a0c5ef61fa228841e715a7857ac1f12fc111240c13d7303b7a20ed212b553aa96088abe6ade0323118ef0a37d79348b8ce95852789d6101c640bfb0e837526e5d2918f9f93b81853553ed90ce6e1c70944feab8416992261e4821422b695d4a5de4f6680eba3838687a8dbfae398dd8a0ee566a3015836f4b4bae0b244c60a69357ae205acabd983e17f1c0eb158e3dbdbd8a04231f1d511d498389b037caddc2d0577dbd0967afa3702a51234dbca0526be9f0b7071ef8579a1a220bce2e8dacf52bed7d9f375b83d2aaae03d99c662a7bdc264e3b55e9b6f83945f9290ce4838e2f71b3868db1167e3be625a388ad26761e471d9a5a4eec72f62905cd65b36654456287f0158f2dba9b2599d82c6d3748357020923cfac9a9da8761ebbaa2629e76c2717018311b4a838a4bebdc141cd7644c3233b391e54f54517bcaaf8b0d20fd7600eec5668e1ff4522f59cec3764e99ab346e37133b8822cb26a01945c6fb28e150cd18a4187248e97fd74ed308a8e46eaa10cfdc39d3419522b2ecf26c32bdefcfff804b57a0591256e582aee67893d474e1cecfc99de26242e32d0525c24ac056a60c28771b4507dbe2d4ecc2b4730a62d92c00ede3b9c2794bce37f5aede40ce543c0b80819dc67146b8086ed4c6d4a68f43abb0826120e78437c81b2bc8c9893643624f8f38504a5e3459bd5ffbb6aa5348106dfd6f5e7631e43af725dc3f42a2ff5e1de159462b006cc114a2991335dfce449cd879795f3311fd40cca99d0d713cc66a18f436cd39ff6d141f5d96cfcd269f1fb30a321e9c67d7a8886ef52f1221ffa443c3e22923a2582efaa908c6fbc64543ddb5032bfd6261919dcd7ab62dbaa897b5339eb2558a3c16377b6175c9a498208f81603377c7899935186b0b52457b17711ed93c30d7ec6971ffd9ec7aba7527fbcdf075673b23ac65e67fd64d6363dd0e0aac58fef58f90f1e14468d32249338249de554eda5acd46e6444e6e2fdb8d92cdabc272842386ed6a7ce63aadc06e993d5cf0d00a82693346be5c36d0ef230b72d6f7aa7be0b44659f4cb44d3228f300c74d8aa72c2e61eafb170e7737118cef322864bfaec943c31e416487784a86cefefb520ee7a3adbd66859134629f88756b133802a3bf264a32565431abe3a5eab66df1bfd6735a5cdfbfd1c47876460126dd8e65f6917831e0130a3145897228b6f1809fa96aa1734b2a6ede7a9b68705c8a06dbf1a7a7d8998191e19c8a047307584488c5cd961d1d6199c5a7eb513a5b7653a1b1beede7bd78c8edd803ca0f168e331a9323c2f18a1b856f772d325a3b7e1df8670c2b33c2b907e989208086cef16ac76b170c94ebfa7bc9f29a225a75737a080bf2959c195476aa8e734f3dd43080315adabda2f07397475dbfd959d8a0c8a4d590020d0b62a25d38ae5210c66ff9ea25a6b966f01a5e166edebcedaa781014bb50e0617fd74baca7202db78e354593c094d9adfe901af6bfc13d19c6c52e61f131fc1b6bd53acba0978bbd15fa3ad83103d8e0980d0842ab68fb90b8ac0e74687a6a150087e061315f01e1c41fbf07946076feb2dcdbeabd93ef75570f255b51cb1cad54d48ff40b9538d34d8a30cff47b77ac7d184a38bf410bdd3459aa519c6d348825451de000688d6b6f69623ad91c82adafbe3963b95015f251091ec799f855448590d57cd8d399a51607184272aeeb6ba4bf3f80fdcedd95b0559baeb4759c3db6d493a597c71010be51c0b27d959793127957223f241eebcd4728d0b2f4f419e8f2979db694959df33afaacf80afc182e15a8117357df39be0f0efa2fa3af81ec3d58586bc282a93f6abdfde4db049372eba6d8bbb7d5d9bbd7979aac828fbc9e93d61fdf92b4a5a7e66b5824d2d260f90f4e860f4ffcab95124d4132066fc71d4fe8b8a35d01f7c42a41edaeb6435c4e4f9fa30c4ef1c43c0e7db5d12a3c4ee39315cfcbb68e0f76e8af57876bc36751c0f2c725a26fb767c8c256da28738b08cd6cfc746fe87aaf01a0c5c3f2295d549516e9ad65442ec982135c25ff5ad63de3caf3abc1e4767aa34266c9ce3ddffc892ed5c494b5c456a362865061b21bf597e109324c4373cdfe0c924710600931329dd3a66e3611ccb02ebe57a821b9f47d6c3eb66eee6dd4d70d43620efc462a9d88e533d0e562d0da53a59b5f6445737aac814d11bb51fb714f5f3e2d1152e29d9da7c232fc369b2fbcfd887103185ac29a41f5054f753fccaa93d0855f0144b064b32ac44fff94c7a8c349616fe825d13b0b45bf018990f8c54c6338ab518462436704e345ae85f8f536ec489142cd8bcab5efad03d0d8ff2a967851d40d4a33efbedd8f0d0e6fadd97ba5846bd53c32158d371c4145e97fdf1a0181873935136d1f5770b47b5d0acf1afde6cd259c07372f09001ba6420c5e398ca7928635314aa3e232c4714ff81b42a8d6d7899c6ec5efa9dac7431856bb5464ae6fd691e0489756ba010216f9fccf45b637f2d3c218f33cfeb83231472f95730452b5750246020579630bee78e00c140126b69764c49835d31eb6f8a8bbdd549555259bdafa7c363b3c116bb0d3073f8807401bc1a1ef418676ab08d363359d572238d2bc1b1e13f99c8a200c53ddf1d4c2d23b7da00220e07a05c3604d04a8474b19df8eecb91a6cbc4a53bfc5161a256b5421e8a59e5e6353aacd3aef4c2c66a3b07b0a2d1a243b640561dd59d92c2c1ab1e2cbe131c6728338c9194b35fb47c7ca59401c4232f8fb92dc34e27ac4d949b04fed32882c23a20dfb4df96687225c7af92804e0fd64050a0ea5e169fdcc5f357d14bec5ee927e030ce5606f01c9411df52be1f3d48857b1f317851cba740dada2c578a1f9354da8d6517248af43c912c9f54bcfb6f4f266a9d82fc53891fc6ec245013b871f95a219a007cc83b183662fadb6c56c0249c2117d4828e32f5506f53df5977a9e5a66626a68923fb4cb07b269bed5a5198d9481736482f104e2e384106da9dd4905f672f44cb52b863d1a2fb3799bdb8f7f0f5044671dc1975c07cd3c14108fe9791a219d33f53bc4062649ba64b754c858a98db2d3c0097ad7fc6874e9e448a9a04cc1c2db21cddcc3a3ec8665f1303ec58ff1217d6fd606474a6d8b31aae18d45b7da37af2f016bb35ba2a3a841aa9ae97e694554f96d11b862cb76cf7d5eb0da02b2c36a50a7e19402b6357b9b6c4e697fa945ab269d93e7f3bf2e84b5e88dc94f8ee2ccbdd0a16283132be447c673bc0fa688a02633aa324fe662c3fecf52a1ec40741ae6abe86416a221f990b5e01dce839152d0b0c255f85cc12c27dc48215b7c21b080097225a45bcd1e21dd54c09e99a1f989438ef6b7038917f17341e7fcf1df37213fe3198bc15e134d20073741d6b705e7cde641dff688d7596a58568b334f59a47366ae8fa3e44af386421322690a79aa5b26bc1fdadacb4482b6aa0d5b10e0464315b67de6c38ec217440f0d709a6eb45e1d036f89988e9ec05bd9b9eb1999ca0b13d93b4746dd20668f2844a82d052cc0a884a273cc517feacde0f0291d5818542e8bef580e00ee28de89acdca8ba603b94296cc9f552bf0a40e1747c5b5d3179c4f927f3f7fc604930b628e7cdc6bf5a44b2ab6f8d3753a94fb9f4dda1ccab36909b1d102b127a103667814ace17a828d96235e8a92ecf12428f4a881adfb4764afa72a3dc60b9126f512a1d35b327e08a2ed0bead72696795919fe873e6b2e4c75c7c4c7ab3fb02c3d523d45542da612616fe772c6094aeef77eb66b24e2945b53614a9a96dabb817bf6b243fd1d6d009b844f909a899daad759bda9bb8153159f6a79c6af0e89b1522e63a695859a4c34c0173deadc7cc7ea7d7e2153c17ffc78a255a824b84305a0d701ea7c35d56700fe13e5d095373509c1df61393fa65b50d4bc2b1debd14fe77b557cecd485908977f8a429aae6cc824fcfe786f4ba5254062ca98b43947736d9bbfda88419f3ee8535a8ba435a87b555014c336271630b722d91961c9a247acc7f5f2e17eaf4fb4fd2dfc0365ec8ee6e3372b88e288c8fd76614dd3c5b41783b72185b451492edfc2a5a2f4bfbe2100797bad1b12bb559a2af87ae38f10b7c9f23ecfa1ccb9108d13699a0c6a0184ed50e8f0f3041e53cbb49a3df6469afaae2615f3b2f29952575ff85a6e7dea6a936abe218ea57e8f5281fa33ff93f03e42ef649a6ac8a178d47dff8d4a851b8300c1beede00bdb773560c5f78dd9b8189e4e2ef520fac708bf8f39e6c71d68fa4e8efffc5d0bdd2e0e35b8b1c2bc3a875d7d6ad43ee1235d243be6b4c6f22591346111c7462118ecd4485470f7a59c34044b4cfc5488cf159996f32e9d90a26cafa1f9a8fd84719bf009cfa511cd9556df2d7db71b835673181db46c24127ec515a5291d83df79df21a07f83dfcee86962e43d3034f96f41c819d2b592148c3f0a1f32a911928f1ad8f3c6ec2e88ed8e28853d11060154fa654471b068851f913c593557ac2551d0854faec47dc73a5fd6c1d68bc0a02eaee1ef2eb722a0e1de7bdb3a517e1848c14b6259d1867b5532bdde4e6ea05265d4fb7cc3306f8f2572cc8b20865a84a8a2708109335c48311bed5a7037464a2ddad24572e3591f5c3f2d3889c77920628287082ac846c99cb1a1162f2f3fd04a9b777cfd5dcb3bb0940043714e7a55f638fe91251b507bc0c1a0b5b736af0b136f917c591e521cce85a35fa055c80f0f2b5e8f4fb12fbb48b1fcf201740447325e13f2e7875d048651df793e015fb2b7d8567e618da7968b0eadde25f8e0cb9406d293c04bd29ff0b2b9e7201d486ce6d1391076c8c6cae470a6e0765e76984aefe78da4ae25417a372181667c14ed6a0a6b96cea117c44b227da41fe59537a219332a3f238f40f4b6c6bdbd293627fb8a460f0dfc67b2bf3ddc1349dfca8618771891701180443ef15c5d6d8d62fc8dfbe81644bf6038295719d0d343425356add3decde996f7749d4c8441620a4fc157e8a96cca7bdad05cd1773dd0f1f91f0832c7295296faffb330a39c251af7574b00307a1398d99bb4620e2d3bb43fcbdba976e008cf5087922fcbf7c35812dbe7e6f251361d99b92e55949b3401f0888d25fa0a13398cc36985e49ebe1a8549d21ecbaaad1b41a923ca5f32fd1edebdd24ffe6c0db1bcc2f5cbe7cd00df0f40cfd38ec07bde33a5dc409b0c66755db5a5fefee09eb395ab654f2e39519ad715412fe3092de3eca931053e1e98bfffe7d9e27c70a05269e0e23b203904b6ec41f0040813c237ee907019d787b70855638a12f5cba287b26d7e1e3d430927edc2522a759265f9aa66bbdbea9d162d83e31009b8c8974b6cfca02261884aba89f0821656b295932116f3147bbdced9533f35b2b6e7920d1076f0c1c556ff39e8c7b846e63ddc3eec9eaec16eca802e58287f8fce0cbc4413134946d75d7ea0a013cdc0c254d182b8ba549cc6ddd33e873f9e957c45c61f8b05a173137f3887f0e388d503fc1bcee19c984c47f6ea72a3d94e998988fd6e9701d227cc9c495d7722c25be4d95f566e3acef089dfccf789348d08925ccac6a1f0dca7cacc64be30ea0b471c05e8525c88e5b3f79a67a77ace94c6a5c417e7a422a8cd4eb8e5113f36d3d12930c3d67c8d1200605148594b8db78433433c376961c76ce1b0ff52cbccc4cc5d8e7f2bf32df1e265d59ee51bac94b4fe495418e04b274a3c6244778ff28de66790a56942c40ffddf66eda85eec76c3204caa858e4507cdf26286eb572d3a22c1cff39881facc4eff24e15946a585fe4393b430ea14f270417035892fcbe46b18dbdf848fced530bf64a01a0cbe7802f82af2a248b2193a1f0e74d1607611f26a0194032cc9ab8f695a3853a24649fa6808a5f843cedaf6c9f7ae9d8391f2f40aa4538443963346ab8ef14cd81f097a2a4c566ac019eaed4c77ee8d4fdbf380d7de86747c44ebf6446d9ab326f7feaf1139e04ecd30125c63803d82093bb8a655ede28b9b1297b70822fd90d738920b782a6600adb04b736a53fa013f9b7d7b664ad0ea3e1ad3fb92165edfce1841796b75d3f6fbda4cb53456017109529981ff17027fdb8eb579861bf6e82062fee3bff56539e762a5a814c96fd59da412c9f27846c10d56b4ffdfd2b4a1651e1bdc38d59fcdf91cbd51af9f67b86b76f63afebeca4d57c223628dc60e97d0bbfbace39716405fb7c1def6f250e56bcfb303b24bf63dd51cfbd023c0e4f69d1d262df35e0cf13aad34ba67ab39cbc9f695504f500936a74946b99403d4c7e4d0a019c373206f35f59ff9894b8789f71ebf38315ff05648c7400e216b4e1625cbce9fdfd55b85edbfcd58a2005c40c22e06072331235e5c9a56f143743f080f8375e2bb8f58fbad781f2117367ef15f58d93faa423b0070a77ffad53b4a206e061db880a4ecbb9b535adfb49892268056b3e56d1cc73c701865e94478e382f541915c402c25010599d24fdb939e2411767d54037749567804965b0fd1649c5d1ae9e39bfa1e21555ead879fdb500077352266b65d364d1602c6354365615916ca80629a6e604b584bbb4c8059b37cf9bdd079236bbcfd1867c8e391c65c969f14c81264d1b36a3d248581df18c75467c70fd9907588405c21e0753adeaad2740ba82a6f7ca051f0218a704ec43d0e0ca000febfb0dd9f6042d9352e9cbc345137f5a31ee4e8672d5400a672952004339ccbc3ed7fdb4ab63449066a80332ef04f8edd02eea560a7cf08a3865206888dfa97f42234d02834ed79322ff761f83b8f70c537a34e94ab830a5abafc08c3843108e1728555d6a3998618530552e947c95ab8a91837591c6abfc964cce8ce15843591b4eb2cff5d26bb2104f79dfdd0b660caf80277fc1c63c3c2085ce6736be56194b1a1b1eeba0125ab85353020cc317539fdb0819bd9b87b95c631a1dd976c514b42fa8b5163733b2338943c02d7b80e09dbca319c9346ebd61512063753ab3ff1dfa08aed0e2bcb546c5e538b5965326d376dfc5e87e137f9ceb9edcf4cda13cd1288a3f92112ad6bd10e4269dab200620ba001a63141f472aafe287d5a46d4f1921add46ffca3e7221da667154d4e8baa442b7f3b2317362a0e6c5367ac7d3611013237db35c9de755ae1c36042bf4fa077edde5b618d85b0fdd4d6c53390776fc72b02f6a5e9d0ea467d10da7b88fadd7585ebc6b7c8a297b516192ba026352641d057e6ef1b0b9dc4a33db4a2e23fe08522ce121fb974df50e8e0078615ce855a7a921833b3c6a754fab6cad3de0b4b0d9551172837cf43fea9c65c4017efdc3f603dde30dfe0b5ccac321eaa9a7c6a362136cd52c92197ee1036967b67174949b1e1bcb354fe41a3e8a8d18b4afbd52eba7a4021856c1b13a2e3dfa1285e1a59a2aaa5da3ae28b5071c0b429617c1e1fc5b0ba9d193bb8372decba4f245c8b85c995c13c7bd2247f4db706aa7c972f21e23f81aaddb90073354eb2c44051387df129cd129d450da1d6273e4b60afbc29e47efda3016e640e5303a78a10126e998e79eaf801a5b782828091456bdd2d1ba3e307102ed39f8efc88b02f5006da1c572dddb536f1094fa669b7cd73c781b50986adb12b689e79cfe55a872db23587c2f49f39a81003cffa102006cfbc5a481d4532e6083e33e81ccf68ff6ca94d3007374ab76b92530522589b627dd7c81e93db908be19ec9df28065f1f23d79ad4e844541d7b18b88c038c7f7a39b17ae70a564a977b21a031f36cc0d62c4c3f17cbbebed7f497acb71fec460f96a4463bf82cc772103ddc8e14bc346d3363cc0ba1d8e239ba0648a28240c31176b04b5df810bec6d2ec559ce9b5ba3cf15db3be5fcb9bded0e3602f626a83c1791123666d6b78c6cdd88fa703f19c0aec9dac4a79a5d6c2db1418bd708ba513313b2de6ac79f83eff813b1986489cbe62e6ad014b50e645c79cf785d03f5e80fbceea147383d2123e851ff13972879f67f933b5c2c44bb12d7feb7d82b15b9a9dd041badcd1b35b0643ddc5dd2b1cc1c7333c4bc9e07a3547c75753478c719f33f18382a6b54b90663149cffb23b72852e962aa0121752d74e447836c3c5c04da8dd538bcce7800950c6470d4b2b9345f66303519a315a2dd23527d059066bab6fc7220d5f57e16aa6e229b208b3d565f06b8fd3a9e735e5fdad2a617dfebfa861648363ce727f670c2403ea65ca16573ee0c8eaccd320c548747e7da080f917190e448f8d02a8f59baebf8a39fdb6165fa5d10d3294bbcf2598924172593bdc6700ebf53c596eb1d07cc33fabc0aa9b99877d6a7076bb3cd56a566732ac6f63b4e96009f9bb185939721ab2adbc4ef8551e4fc26c7cd289e403a55c62f73277f7e1a87301a4b836341dacfe1f83115c3c1306370df19a3f8ca30c3acd26d48bc93f9883823a328543efc5b51e8c1bc1af0731ccf7e36a9793a43bc191b32a6dd343d775ce00bb1671ac69867b4cf9c4ee6a85d0f45302b6d1f0a5eea72befb9fd784926f539ca8347a1b53edfe3aefcc3067052da20c3f56e398da3158a18ca6db760b8299639ed86cd89e1826435b3b5ecead5b538f6bd33cffac87f33ef08ab4b4e47823354d57f29d2af424eca11f2b67eeb869876d2221cfb24ab1c837cd8ca25cc53cc9bea73586c0cb6d03ee0ef96e3c1744da4921b44767bd5772c1063c81833689072ee6097bc08f7a627a8a5ceb5df8e36e14d9bd42a7cb51df9d44c5481d2d676dd16ef5a2f1b782e1cf3c74bfc61495d705b52d7a9fa4c6b2c4fa2988ebf0e4a9ddc381462c5a948b1430b05e6deeeb73096bdef828ef9baba6b5bb3318220bd32832b87807c5539350e65a11388ef0706628e6419bfec63c348c3d6f532fffd571d65b71386fcef7ce3262732d48e05aa51b7a9bdb67468b4c5deb2381d8ea1dea80e8aedc5ce4b9d9af6ea0edb4fbe680838faa7cf7aef35dbec0b57ee193cb6e4a7fc8d442f8fac862b5f20e24f1024a2abafd597a9feb7c4d22459a381c810c0d8ca6f5517daa30aad65719c8c2c922389105efccaf8078aae825bd48b0bc9ad7ddf42d8fad8e2add7dc7f305fd88ba81a7c2e29f5a8c481cb4f1b3910069d6337d1dd4e33d8f20a93596d9e9b3b3fd3d37e374c763909212bae067e3e8a2efd0a6eefd9e8f3f55347d9dd4d70490d39c03c3d1c27a588083212f9bbb1971bf1c097a0e360a441cdc6c77f68b6795a18021287ff7dcf8d98e546cf7aab86cc0be2c40a0e169caf558a090d70bb427e534f90dc02e4bfd2e8b9d059bfd111bb777bab606ad8ac12650eb83fc8cd69be45692990ff64b03ce44b5816cb06e48d2077775cff774a763af1d3f5a58e4aa91ef3e01defc1e1e7502427c7ad8b661275f7159f5ff91695b028fe48a598a45943143cbf7e49a31ddddc196eda1331af07e204336244c3d8a1bd7143125a99942241737a17128a59b493c6725912c7bc25a109daf1cc2c8c6a79aff488fb5c69af083af1684538f3bb798e316b78e9d81dde4fc2ab0e64fd9d7465a01458763daeb89c18c7723d91080164815454cf3e4d38861930ecfc0f6822728d00a3000145492e7aa3b863a86a8bc11c4d9a1e5aeef93ba8beee24d579d44283ab65612a447ef9b78bc1d5d1308f4bcfe1834ee7da8c3a9e8125726ce30f98f2e5420b645f870c999d60b39590f95b446eb21f34fee7cc7ee76016b826981003c59bee9bf4cfaf980d8a809115ae8c057116ae93c6e4c82654d86f1d29c21571a1b9484f1b7a41785c4715f909f7907bd04c21ddec4fada4e09b8313c9fd15b7e3ade1ff65e701f6141841dabb9777347cfa95c692dfc9b74690b3901068180c1d441eba047aa0ce26718e1dc3836a1d70116d5a93afc935fd2f10a556be5072308d45d278dc6c1bf2ab9ce8d38a1dd934b981f4f6eaae4ea8faec3b043f00e5ed96ef5dc8e0ed7f68a8ae3091e19a8449640ab8beca44be4c68e561b03e5999dec7e5306a5dda1be135fb55df5770aa6cdcae5465ea7cd40ebb48f5f6b8503fe22ed619fb91de146eef69459ea6eba9dee9296bd30baaa881e0425dceb7ef138d12db2d9d09da0771c339536d53563b7ead64625ff785315842cbca23ead8cdbb6290eb220f07f7702475c7fbe9aaa0e6691b2549959ff572dc3f4893c93f7eb087c5d5cbac49e1e431ebbaa5a3b4a69a58c8fc128b8f52d65740ca9b7422c31ee2a28f7fc6bc4191a76775308f053b5d4a9f575b5cc9098684bda16b27c5b9f1ddd7f49653c787c26278f9c48bd58acaa56a915e849fd850eec45a6270ea1cf58db7e9104e9b2e581f92d98b9fca2e2d9a64c41847b3f4cc83eff81bc33333d3ba91735e00fc4918f7fae641763c872a9a9f26546e2b0f8826daedfee1ccecbd015ee8f1645c3de3076fd53f5cf76e54a341477672838650d46e63bd778f91a1f9706a1d83eaed6c2e7931d17e4e5deef0f7f9efed84e9d09f72ffa7dd8e6e7931b83dae15872ea0f062d79dd6a04c2b367ea84e516440c462f9451d64289afefa637d825e3c1efbdbe1e7fa223b396086064f0bbab8b3a785854f4042ad9ae3e20a0467a2abfff814d5f9ac0e60328aaf06ada5e899b3248383207efbfb2457ac4fbeab5797defd4c00c50313b7ab1488f2ac5e1a71c60be0772ed554b8e3a06e62fdf22706afc35fc7f35813b47b04960746f04f649c4e9fa79c7ed638b6784e5c707689c7f692fd9d34ec9b91b66c85dfdfb2a6e2f9a91e678ebe3775f4a5e2375e744457725fad36dadacb00a407f9d53733033104a374dd33176bbc21aa36d5a83e06eaeb3b58760d4b6027bf9c73f993dfa201f36ef33e4718f769a0eb70ddd27d2fb51da351a1683ed31c412b4cf369d07f44e2c93268f4905cd5cd636e87da372b129debd256b01aebc1681b147fd842409442313d286aaab62d0259f8a8c3c19a9666a58e176857c0262c6d0303c5bb59139ff930ab5905b289099cb827266478365488af9f13913acf632be2f9ed60011bbf1dc1767aea17a6f0ba2babe8de150ad0b5e7a109ecde543c41faddebdf841c12fa0d4279db93289d62a2f16d353e742cae7446b92001d8ce0d150b696a4c2ef0d0d70725bbb52c91cad4d929515659f143b70ea339ee07a409ee208f41b65436f7369bce217c612936dbd54030871f67dbaebd08d2fc6a86cd6c2afa97ee3fadaca0052c488eda6e06d65946140e28e0668808e7925ece5a4c42d7d27fbcc4434d0acd19ae3394057955c9525834125c675f91bf1d3adf2294080e11e7b0a28e79d18cb95e68e8d7358e2a6e8877fcaf26a7f2f5db18af30b636add05f342273f98cf8d89d1665d9e32a2c2b0b03ab63f161fac04dda15b94a4bac8e7a6f4da75bc4a80f63e5a632be7b94e9618049a4749995fda80e51389680780223ba056b185ac47570872e76712d6a674db5bae40d9b94b2f92b8e51ed4848fd5b2a3401e04d0ffbdf5e4b9391fd04039e2f8239516cc719aaf9d62e9072ba01649d576fd220b59fa6f63ca6ea8dae1b6ec23c50e11ff9aacf9f78f732daa341c082bade203751df0198a9453e0c71cc19426dd189e467185032f2997c199b5601a4570a81d83196674011cbaa0306d25cdaa63255e477e26c5eb4bebab3fc1a6524541c619286faaa64daeee6eeb134e877bd76b8ce1468cb9850f62e75e677f9e3d74acbada466dcb856569f8591fad16a849af8c2f33102f7ee3e7a2e705290ef1121fc1d5e99850ead1439a63e7b19e4717692ec58d83223868f3162e95dc01f16479fa29979a7f4084953a8b469114c2e5f6af8aca104386ba372a15d472b1dc57f9d957f1cb2841f8265d499247dcd47266b016c104ec6d58e208cc5607083aab76963b89d5f0c97c48363cc0055bc6c5dba7c3a4b82699d7e18887a3d4571473c326fdee20842c5d34302746b02df80665ee4fa77145891ece1996116dbbedfaaee1fc30c529e57d53cdaed82e78cf7dbed371e7f704998a92bd331112eb6c4bc99efd41c7bc88026435d788f38ff57a10dde1903d071720ce95df3e9f2e3a079e7d81288346d942cfc48d843743039b1b0c50c34865831efb683894044246364bef8012f967150be4a131b1d110783ed3e42082c2f61b610d5e14c77077aea7354852f52422866d7b6df0f88c5b7d89917a018269e6cba2c7bb1ba0b292252a3bfe2115b62fc5ddb3378ae41dcf4e24905841514976c7230161931b959049186232c937a9cbe9c1fdeab2a42f4b95b679ee8803e5b30c8efe2c456c415f84e3fd0976904281cbd0afc6b297028542c97385968972b19974b1e8fca46af9d3f7a81202b60bda783f549e4783ddfbea2eedff05cda0975b8099ee9ee680df6205269852b17e69382df7690a0136948462b05b81a54a33679b87710959b7753124c484b51294bff8025cc73954e2d985f30e9fb55b1bde7c991da3db491f5f84a4b0037807d1f55529d16a14796e9badf6a9dedcf77a863d104af9936c4802a07da7a879560f771bb89fcda63ae037c36f9dad6694ca3d53ecfe63e80bab2525b70a517fd6a8e9b50012427bee561e29af947f7b9350980cfa61716a505a105ca18edab477b1d8d60713173feee3a401acbca4e140f320928bd97299bf74ad903e496580ca63a874e1ba3c6d84a15c81bc1a1562ec245a2ee97164aa1bb4db6e6d9ed13ffd9313db3c2ae5035570fe3fccf0202fc3da9c3611383aa8f0c2a596cacbbb934d8597830340badf99b0d093e4e2708e4a5d6e0d0ff21a98f8b988d73da6d41908c4a33f4a2d4ae8a1a1cb3faeaca58d6b8695e673c7009e937bfd3f860ce9759d9f04cb08c9cc82061ec163e74f60d6ab222baf70115a6f64cba8a3d51f911c6c19c8be92281050a53035c47ef5732ef0c1697cde3e48e3dbb9fb0b3bd89d5700f1800846a1158bc304dc6d69c830b0a74b0272617879257bc8d310a9c839da47a39eff353a3d8ed2896fe764bf79bdcc438bcf359985d46b5821f776737f9dd08c9b08df533fc207e923ea6f671d94265a678c325c865152e4edbe0c299af05ce9d1360eb2d1a458a5b0abba4b99ea97e8dbf3a2ab60a981e29acba827a8707d2e4684d4cdd463f43e175317b3662c659dc20eb2ac6f2a5a886757ac4cfcef9cd231f5d5481269ce4cd2</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
        <tags>
            
            <tag> 笔试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法练习之链表</title>
      <link href="/2022/07/06/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0%E4%B9%8B%E9%93%BE%E8%A1%A8/"/>
      <url>/2022/07/06/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0%E4%B9%8B%E9%93%BE%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<p><em>题目均来自力扣网</em></p><h1 id="链表基础结构定义"><a href="#链表基础结构定义" class="headerlink" title="链表基础结构定义"></a>链表基础结构定义</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">ListNode</span> </span><br><span class="line">&#123;</span><br><span class="line">   <span class="type">int</span> val;</span><br><span class="line">   ListNode *next;</span><br><span class="line">   <span class="built_in">ListNode</span>() : <span class="built_in">val</span>(<span class="number">0</span>), <span class="built_in">next</span>(<span class="literal">nullptr</span>) &#123;&#125;</span><br><span class="line">   <span class="built_in">ListNode</span>(<span class="type">int</span> x) : <span class="built_in">val</span>(x), <span class="built_in">next</span>(<span class="literal">nullptr</span>) &#123;&#125;</span><br><span class="line">   <span class="built_in">ListNode</span>(<span class="type">int</span> x, ListNode *next) : <span class="built_in">val</span>(x), <span class="built_in">next</span>(next) &#123;&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="虚拟头结点"><a href="#虚拟头结点" class="headerlink" title="虚拟头结点"></a>虚拟头结点</h1><ul><li>在对链表做插入删除操作时，头结点 、 空链表 由于其特殊性，总是需要单独处理</li><li>如果能够使用一个虚拟的头结点，那么就可以避免这两种特殊情况的讨论，减少错误</li><li>由于单链表只能向后访问的特性，尽量总是讨论当前指针的下一个结点，即 操作的结点必定是 curNode -&gt; next</li></ul><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><ol><li><a href="https://leetcode.cn/problems/remove-linked-list-elements/">https://leetcode.cn/problems/remove-linked-list-elements/</a><br>给你一个链表的头节点 head 和一个整数 val ，请你删除链表中所有满足 Node.val &#x3D;&#x3D; val 的节点，并返回 新的头节点 。<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">removeElements</span><span class="params">(ListNode* head, <span class="type">int</span> val)</span> </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="literal">nullptr</span>)    <span class="keyword">return</span> head;</span><br><span class="line">        <span class="comment">// 虚拟头结点</span></span><br><span class="line">        ListNode* dmHead = <span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">0</span>, head);</span><br><span class="line">        <span class="comment">// 考虑元素</span></span><br><span class="line">        ListNode* curNode = dmHead;</span><br><span class="line">        <span class="keyword">while</span> ( curNode-&gt;next != <span class="literal">nullptr</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 如果下一个结点是需要删除的,此时cur不移动</span></span><br><span class="line">            <span class="keyword">if</span> (curNode-&gt;next-&gt;val == val)</span><br><span class="line">            &#123;</span><br><span class="line">                ListNode* needDeleteNode = curNode-&gt;next;</span><br><span class="line">                curNode-&gt;next = curNode-&gt;next-&gt;next;</span><br><span class="line">                <span class="keyword">delete</span> needDeleteNode;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                curNode = curNode-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 删除虚拟头结点</span></span><br><span class="line">        head = dmHead-&gt;next;</span><br><span class="line">        <span class="keyword">delete</span> dmHead;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol><hr><ol start="2"><li><a href="https://leetcode.cn/problems/design-linked-list/">https://leetcode.cn/problems/design-linked-list/</a><br>设计链表的实现。您可以选择使用单链表或双链表。<br>单链表中的节点应该具有两个属性：val 和 next。val 是当前节点的值，next 是指向下一个节点的指针&#x2F;引用。<br>如果要使用双向链表，则还需要一个属性 prev 以指示链表中的上一个节点。假设链表中的所有节点都是 0-index 的。<br>在链表类中实现这些功能：</li></ol><ul><li>get(index)：获取链表中第 index 个节点的值。如果索引无效，则返回-1。</li><li>addAtHead(val)：在链表的第一个元素之前添加一个值为 val 的节点。插入后，新节点将成为链表的第一个节点。</li><li>addAtTail(val)：将值为 val 的节点追加到链表的最后一个元素。</li><li>addAtIndex(index,val)：在链表中的第 index 个节点之前添加值为 val  的节点。如果 index 等于   + 链表的长度，则该节点将附加到链表的末尾。如果 index 大于链表长度，则不会插入节点。如果 index小于0，则在头部插入节点。</li><li>deleteAtIndex(index)：如果索引 index 有效，则删除链表中的第 index 个节点。</li></ul><p><strong>分析</strong></p><ul><li>适当维护一些变量信息可以 方便操作，比如 当前链表大小 size 尾结点指针 tail</li><li>在写代码时，一定要弄清楚各个变量的含义，尤其是当前遍历到的curNode的函数，从而处理好各种特殊情况<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyLinkedList</span> </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">ListNode</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> val;</span><br><span class="line">        ListNode* next;</span><br><span class="line">        <span class="built_in">ListNode</span>(<span class="type">int</span> v, ListNode* n) : <span class="built_in">val</span>(v), <span class="built_in">next</span>(n) &#123;&#125;;</span><br><span class="line">        <span class="built_in">ListNode</span>(<span class="type">int</span> v) : <span class="built_in">val</span>(v)</span><br><span class="line">        &#123;</span><br><span class="line">            next = <span class="literal">nullptr</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> size = <span class="number">0</span>;                   <span class="comment">// 链表大小</span></span><br><span class="line">    ListNode* dmHead = <span class="literal">nullptr</span>;     <span class="comment">// 虚拟头结点</span></span><br><span class="line">    ListNode* tail = <span class="literal">nullptr</span>;       <span class="comment">// 尾结点指针</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">MyLinkedList</span>() </span><br><span class="line">    &#123;</span><br><span class="line">        size = <span class="number">0</span>;</span><br><span class="line">        dmHead = <span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">0</span>, <span class="literal">nullptr</span>);</span><br><span class="line">        tail = <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">get</span><span class="params">(<span class="type">int</span> index)</span> </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// 越界 返回-1</span></span><br><span class="line">        <span class="keyword">if</span> (index &gt; size - <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 正常 取值</span></span><br><span class="line">        ListNode* curNode = dmHead-&gt;next;</span><br><span class="line">        <span class="keyword">while</span> (index &gt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            curNode = curNode-&gt;next;</span><br><span class="line">            index--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> curNode-&gt;val;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">addAtHead</span><span class="params">(<span class="type">int</span> val)</span> </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// 创建新节点</span></span><br><span class="line">        ListNode* newNode = <span class="keyword">new</span> <span class="built_in">ListNode</span>(val, <span class="literal">nullptr</span>);</span><br><span class="line">        <span class="comment">// 插入新节点</span></span><br><span class="line">        newNode-&gt;next = dmHead-&gt;next;</span><br><span class="line">        dmHead-&gt;next = newNode;</span><br><span class="line">        <span class="comment">// 更新参数</span></span><br><span class="line">        size++;</span><br><span class="line">        <span class="keyword">if</span> (size == <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            tail = newNode;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">addAtTail</span><span class="params">(<span class="type">int</span> val)</span> </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// 创建新节点</span></span><br><span class="line">        ListNode* newNode = <span class="keyword">new</span> <span class="built_in">ListNode</span>(val, <span class="literal">nullptr</span>);</span><br><span class="line">        <span class="comment">// 插入新节点</span></span><br><span class="line">        <span class="keyword">if</span> (tail != <span class="literal">nullptr</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            tail-&gt;next = newNode;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            dmHead-&gt;next = newNode;   </span><br><span class="line">        &#125;</span><br><span class="line">        tail = newNode;</span><br><span class="line">        size++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">addAtIndex</span><span class="params">(<span class="type">int</span> index, <span class="type">int</span> val)</span> </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (index &gt; size)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (index == size)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">addAtTail</span>(val);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (index &lt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">addAtHead</span>(val);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 创建新节点</span></span><br><span class="line">            ListNode* newNode = <span class="keyword">new</span> <span class="built_in">ListNode</span>(val, <span class="literal">nullptr</span>);</span><br><span class="line">            <span class="comment">// 找到该节点前一个节点</span></span><br><span class="line">            ListNode* curNode = dmHead;         <span class="comment">// cur-&gt;next 是0号节点</span></span><br><span class="line">            <span class="keyword">while</span> (index)</span><br><span class="line">            &#123;</span><br><span class="line">                curNode = curNode-&gt;next;</span><br><span class="line">                index--;</span><br><span class="line">            &#125;</span><br><span class="line">            newNode-&gt;next = curNode-&gt;next;</span><br><span class="line">            curNode-&gt;next = newNode;</span><br><span class="line">            size++;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">deleteAtIndex</span><span class="params">(<span class="type">int</span> index)</span> </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt; size - <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ListNode* curNode = dmHead;     <span class="comment">// curNode-&gt;next 是 0 号节点</span></span><br><span class="line">        <span class="keyword">while</span> (index &gt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            curNode = curNode-&gt;next;</span><br><span class="line">            index--;</span><br><span class="line">        &#125;</span><br><span class="line">        ListNode* needDeleteNode = curNode-&gt;next;</span><br><span class="line">        curNode-&gt;next = needDeleteNode-&gt;next;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (tail == needDeleteNode)</span><br><span class="line">        &#123;</span><br><span class="line">            tail = curNode;</span><br><span class="line">            <span class="keyword">if</span> (tail == dmHead)</span><br><span class="line">            &#123;</span><br><span class="line">                tail = <span class="literal">nullptr</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">delete</span> needDeleteNode;</span><br><span class="line">        size--;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        ListNode* curNode = dmHead-&gt;next;</span><br><span class="line">        <span class="keyword">while</span> (curNode != <span class="literal">nullptr</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; curNode-&gt;val &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">            curNode = curNode-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><hr><h1 id="翻转链表"><a href="#翻转链表" class="headerlink" title="翻转链表"></a>翻转链表</h1><h2 id="方法一-双指针"><a href="#方法一-双指针" class="headerlink" title="方法一 双指针"></a>方法一 双指针</h2><ul><li>翻转链表 其实就是 将所有的指针反向，那么就只需要一个 pre 指针 和 cur 指针，让 cur-&gt;next &#x3D; pre</li><li>但是这样问题在于 cur-&gt;next 改变了以后没办法找到下一个节点了</li><li>所以需要 nextpre, nextcur 来记录一下接下来需要操作的节点<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">reverseList</span><span class="params">(ListNode* head)</span> </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        ListNode* cur = head;</span><br><span class="line">        ListNode* pre = <span class="literal">nullptr</span>;</span><br><span class="line">        ListNode* nextcur = <span class="literal">nullptr</span>;</span><br><span class="line">        <span class="keyword">while</span> (cur != <span class="literal">nullptr</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 先记录</span></span><br><span class="line">            nextcur = cur-&gt;next;</span><br><span class="line">            <span class="comment">// 翻转</span></span><br><span class="line">            cur-&gt;next = pre;</span><br><span class="line">            <span class="comment">// 然后利用记录完成移动</span></span><br><span class="line">            pre = cur;</span><br><span class="line">            cur = nextcur;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> pre;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul><hr><h2 id="方法二-双指针递归"><a href="#方法二-双指针递归" class="headerlink" title="方法二 双指针递归"></a>方法二 双指针递归</h2><p>思路一</p><ul><li>双指针法中有 当前翻转 cur pre ， 下一步翻转 nextcur , pre 可以由当前计算出来，所以可以写成递归形式<br>思路二</li><li>假设已经有了一个函数可以将 head 链表翻转，也就是 listReverse</li><li>那么翻转一个链表分两步 1. listReverse (head-&gt;next) 2. head-&gt;next-&gt;next &#x3D; head</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">reverseList</span><span class="params">(ListNode* head)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// 边界条件判断</span></span><br><span class="line">        <span class="keyword">if</span> (head == <span class="literal">nullptr</span> || head-&gt;next == <span class="literal">nullptr</span>) <span class="keyword">return</span> head;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 递归翻转后面的部分</span></span><br><span class="line">        ListNode* rHead = <span class="built_in">reverseList</span>(head-&gt;next);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 翻转 head -&gt; second</span></span><br><span class="line">        head-&gt;next-&gt;next = head;</span><br><span class="line">        head-&gt;next = <span class="literal">nullptr</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> rHead;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><hr><h2 id="方法三-取头头插法"><a href="#方法三-取头头插法" class="headerlink" title="方法三 取头头插法"></a>方法三 取头头插法</h2><ul><li>观察到对一列节点，将它们按序头插进新链表，他们就逆序了</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">reverseList</span><span class="params">(ListNode* head)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// 建立新链表 虚拟头结点</span></span><br><span class="line">        ListNode* dmHead = <span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">0</span>, <span class="literal">nullptr</span>);</span><br><span class="line">        <span class="comment">// 反复取下原来结点中的头结点 头插进虚拟链表中</span></span><br><span class="line">        <span class="keyword">while</span> (head != <span class="literal">nullptr</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 取下头结点</span></span><br><span class="line">            ListNode* cur = head;</span><br><span class="line">            head = head-&gt;next;</span><br><span class="line">            cur-&gt;next = <span class="literal">nullptr</span>;</span><br><span class="line">            <span class="comment">// 头插进虚拟链表</span></span><br><span class="line">            cur-&gt;next = dmHead-&gt;next;</span><br><span class="line">            dmHead-&gt;next = cur;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ListNode* newHead = dmHead-&gt;next;</span><br><span class="line">        <span class="keyword">delete</span> dmHead;</span><br><span class="line">        <span class="keyword">return</span> newHead;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><hr><h1 id="交换链表节点"><a href="#交换链表节点" class="headerlink" title="交换链表节点"></a>交换链表节点</h1><p><a href="https://leetcode.cn/problems/swap-nodes-in-pairs/">https://leetcode.cn/problems/swap-nodes-in-pairs/</a><br>给你一个链表，两两交换其中相邻的节点，并返回交换后链表的头节点。你必须在不修改节点内部的值的情况下完成本题（即，只能进行节点交换）</p><ul><li>简单的模拟即可 多用虚拟头结点 多设置几个变量 多画图 就会好做一点<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">swapPairs</span><span class="params">(ListNode* head)</span> </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="literal">nullptr</span> || head-&gt;next == <span class="literal">nullptr</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> head;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ListNode* dmHead = <span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">0</span>, head);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 要交换的是 cur-&gt;next cur-&gt;next-&gt;next</span></span><br><span class="line">        ListNode* cur = dmHead;</span><br><span class="line">        <span class="keyword">while</span> (cur-&gt;next != <span class="literal">nullptr</span> &amp;&amp; cur-&gt;next-&gt;next != <span class="literal">nullptr</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            ListNode* node1 = cur-&gt;next, * node2 = node1-&gt;next, * tail = node2-&gt;next;</span><br><span class="line">            cur-&gt;next = node2;</span><br><span class="line">            node2-&gt;next = node1;</span><br><span class="line">            node1-&gt;next = tail;</span><br><span class="line">            cur = node1;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        head = dmHead-&gt;next;</span><br><span class="line">        <span class="keyword">delete</span> dmHead;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul><hr><h1 id="删除链表倒数第N个节点"><a href="#删除链表倒数第N个节点" class="headerlink" title="删除链表倒数第N个节点"></a>删除链表倒数第N个节点</h1><p><a href="https://leetcode.cn/problems/remove-nth-node-from-end-of-list/">https://leetcode.cn/problems/remove-nth-node-from-end-of-list/</a><br>给你一个链表，删除链表的倒数第 n 个结点，并且返回链表的头结点。</p><ul><li>这道题首先可以转化为 找到链表倒数第N+1个节点</li><li>采用虚拟头结点 + 双指针法，快慢指针同时从虚拟头结点出发，快指针先走N+1步，随后快慢指针同步向后，当快指针移动到末尾nullptr时，慢指针指向倒数第N+1个节点<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">removeNthFromEnd</span><span class="params">(ListNode* head, <span class="type">int</span> n)</span> </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        ListNode* dmHead = <span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">0</span>, head);</span><br><span class="line">        <span class="comment">// 采用双指针法 </span></span><br><span class="line">        <span class="comment">// 删除倒数第N个节点 - 先要找到倒数第N+1个节点</span></span><br><span class="line">        ListNode* fast = dmHead, * slow = dmHead;</span><br><span class="line">        n++;</span><br><span class="line">        <span class="keyword">while</span> (n--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (fast != <span class="literal">nullptr</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                fast = fast-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> head;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (fast != <span class="literal">nullptr</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            fast = fast-&gt;next;</span><br><span class="line">            slow = slow-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ListNode* needDeleteNode = slow-&gt;next;</span><br><span class="line">        slow-&gt;next = slow-&gt;next-&gt;next;</span><br><span class="line"></span><br><span class="line">        head = dmHead-&gt;next;</span><br><span class="line">        <span class="keyword">delete</span> dmHead;</span><br><span class="line">        <span class="keyword">delete</span> needDeleteNode;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul><hr><h1 id="单链表相交问题"><a href="#单链表相交问题" class="headerlink" title="单链表相交问题"></a>单链表相交问题</h1><p>题目： <a href="https://leetcode.cn/problems/intersection-of-two-linked-lists-lcci/">https://leetcode.cn/problems/intersection-of-two-linked-lists-lcci/</a><br>给你两个无环单链表的头节点 headA 和 headB ，请你找出并返回两个单链表相交的起始节点。如果两个链表没有交点，返回 null 。</p><h3 id="方法一-哈希表直接记录"><a href="#方法一-哈希表直接记录" class="headerlink" title="方法一 哈希表直接记录"></a>方法一 哈希表直接记录</h3><h3 id="方法二-双指针-求长度部分遍历"><a href="#方法二-双指针-求长度部分遍历" class="headerlink" title="方法二 双指针 求长度部分遍历"></a>方法二 双指针 求长度部分遍历</h3><ul><li>首先要明确 可能的情况有 1. ||  2. Y  3. V </li><li>X 形状 是不可能出现的</li><li>对于前三种情况,有如下观察结论</li><li><ul><li><ol><li>如果相交 tail 必定相等</li></ol></li></ul></li><li><ul><li><ol start="2"><li>如果相交 | len1 - len2 | &#x3D; | lA不相交部分长度 - lB不相交部分长度 |</li></ol></li></ul></li><li>所以可以先求长度与TAIL，通过TAIL判断是否相交，最后使用双指针，长指针先走ABS(lenA - lenB)步 然后两个指针一起同步移动，初次相等时就是相交点了<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function">ListNode* <span class="title">getIntersectionNode</span><span class="params">(ListNode* headA, ListNode* headB)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// 首先要明确 可能的情况有 1. ||  2. Y  3. V </span></span><br><span class="line"><span class="comment">// X 形状 是不可能出现的</span></span><br><span class="line"><span class="comment">// 对于前三种情况,有如下观察结论</span></span><br><span class="line"><span class="comment">// 1. 如果相交 tail 必定相等</span></span><br><span class="line"><span class="comment">// 2. 如果相交 | len1 - len2 | = | lA不相交部分长度 - lB不相交部分长度 |</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (headA == <span class="literal">nullptr</span> || headB == <span class="literal">nullptr</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// step1 求tail 求长度</span></span><br><span class="line"><span class="type">int</span> lenA = <span class="number">0</span>;</span><br><span class="line">ListNode* tailA = headA, * curA = headA;</span><br><span class="line"><span class="keyword">while</span> (curA != <span class="literal">nullptr</span>)</span><br><span class="line">&#123;</span><br><span class="line">tailA = curA;</span><br><span class="line">curA = curA-&gt;next;</span><br><span class="line">lenA++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> lenB = <span class="number">0</span>;</span><br><span class="line">ListNode* tailB = headB, * curB = headB;</span><br><span class="line"><span class="keyword">while</span> (curB != <span class="literal">nullptr</span>)</span><br><span class="line">&#123;</span><br><span class="line">tailB = curB;</span><br><span class="line">curB = curB-&gt;next;</span><br><span class="line">lenB++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 求相交点</span></span><br><span class="line"><span class="comment">/// 没有相交点</span></span><br><span class="line"><span class="keyword">if</span> (tailA != tailB)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 双指针 长指针先走 lenA - lenB 步 然后两者一起向后同步移动 相等时就是相交点</span></span><br><span class="line">ListNode* curLong = lenA &gt; lenB ? headA : headB;</span><br><span class="line">ListNode* curShort = lenA &gt; lenB ? headB : headA;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n = <span class="built_in">abs</span>(lenA - lenB);</span><br><span class="line"><span class="keyword">while</span>(n--)</span><br><span class="line">&#123;</span><br><span class="line">curLong = curLong-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (curLong != curShort)</span><br><span class="line">&#123;</span><br><span class="line">curLong = curLong-&gt;next;</span><br><span class="line">curShort = curShort-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> curLong;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul><hr><h3 id="方法三-双指针遍历两个链表法"><a href="#方法三-双指针遍历两个链表法" class="headerlink" title="方法三 双指针遍历两个链表法"></a>方法三 双指针遍历两个链表法</h3><ul><li>假设链表长度分别为 A ， B ， 相交部分长度为 C</li><li>设置两个指针，指针1先遍历listA，再遍历listB到相交点，一共走了A+(B-C)步；指针2先遍历B，在遍历A到相交点，一共走了B+(A-C)步，此时判断</li><li><ul><li>若listA,listB存在相交点，那么此时应该是指针1 2 首次指向相同的节点</li></ul></li><li><ul><li>若listA,listB不存在相交点，那么此时应该指针1 2 首次指向相同的nullptr<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function">ListNode* <span class="title">getIntersectionNode</span><span class="params">(ListNode* headA, ListNode* headB)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (headA == <span class="literal">nullptr</span> || headB == <span class="literal">nullptr</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ListNode* pA = headA, * pB = headB;</span><br><span class="line"><span class="keyword">while</span> (pA != pB)</span><br><span class="line">&#123;</span><br><span class="line">pA = pA == <span class="literal">nullptr</span> ? headB : pA-&gt;next;</span><br><span class="line">pB = pB == <span class="literal">nullptr</span> ? headA : pB-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> pA;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul></li></ul><hr><h1 id="环形链表问题"><a href="#环形链表问题" class="headerlink" title="环形链表问题"></a>环形链表问题</h1><p>题目：<br><a href="https://leetcode.cn/problems/linked-list-cycle/">https://leetcode.cn/problems/linked-list-cycle/</a><br><a href="https://leetcode.cn/problems/linked-list-cycle-ii/">https://leetcode.cn/problems/linked-list-cycle-ii/</a><br>给定一个链表的头节点  head ，返回链表开始入环的第一个节点。 如果链表无环，则返回 null,<br><strong>弗洛伊德 判圈法</strong></p><ul><li><p>使用快慢指针，快指针每次移动两格，慢指针每次移动一格</p></li><li><p>如果没有圈，那么快指针会在某个时刻遍历到 nullptr，如果有圈，那么慢指针会在某个时刻追上快指针，即 fast &#x3D;&#x3D; slow</p></li><li><p>考虑此时的情况，记录入环点前长度为 a , 从入环点到相交点长度为 b, 从相交点到入环点长度为 c; 那么此时fast走过的长度为 <code>a+N(b+c)+b</code>，slow走过的长度为 <code>a+(N-1)(b+c)+b </code> – <code>这里一个比你跑得快的人超过你一圈就可以再次来你身边</code>， 又因为 fast 走过的长度是 slow 的两倍，那么 <code>a+N(b+c)+b = 2 *(a + (N-1)(b+c) +b )</code>，化简有 <code>a = c </code></p></li><li><p>所以 从起点走A步 和 从相交点走C步 ，都会到达入环点，此时二者相等</p></li></ul><ol><li>判断环<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">hasCycle</span><span class="params">(ListNode* head)</span> </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="literal">nullptr</span> || head-&gt;next == <span class="literal">nullptr</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line"><span class="comment">// 这里注意 由于最后依赖fast 与 slow 是否相等来表征是否存在环</span></span><br><span class="line"><span class="comment">// 所以一开始应该把它们错开</span></span><br><span class="line">        ListNode* fast = head-&gt;next, * slow = head;</span><br><span class="line">        <span class="keyword">while</span> (fast-&gt;next != <span class="literal">nullptr</span> &amp;&amp; fast-&gt;next-&gt;next != <span class="literal">nullptr</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            fast = fast-&gt;next-&gt;next;</span><br><span class="line">            slow = slow-&gt;next;</span><br><span class="line">            <span class="keyword">if</span> (fast == slow)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> fast == slow;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol><hr><ol start="2"><li>求入环点<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">detectCycle</span><span class="params">(ListNode* head)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="literal">nullptr</span> || head-&gt;next == <span class="literal">nullptr</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ListNode* fast = head-&gt;next-&gt;next, *slow = head-&gt;next;</span><br><span class="line">        <span class="keyword">while</span> (fast != <span class="literal">nullptr</span> &amp;&amp; fast-&gt;next != <span class="literal">nullptr</span> &amp;&amp; fast-&gt;next-&gt;next != <span class="literal">nullptr</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (fast == slow)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            fast = fast-&gt;next-&gt;next;</span><br><span class="line">            slow = slow-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (fast != slow)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ListNode* p1 = head, * p2 = fast;</span><br><span class="line">        <span class="keyword">while</span> (p1 != p2)</span><br><span class="line">        &#123;</span><br><span class="line">            p1 = p1-&gt;next;</span><br><span class="line">            p2 = p2-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> p1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;s</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> 面试 </tag>
            
            <tag> C++ </tag>
            
            <tag> 算法 </tag>
            
            <tag> 链表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>STL源码阅读</title>
      <link href="/2022/07/05/STL%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/"/>
      <url>/2022/07/05/STL%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/</url>
      
        <content type="html"><![CDATA[<p><em>源码并非完全体 只是提取了一些关键的信息 并且为了方便观看 可能简化</em></p><h1 id="内存管理算法源码"><a href="#内存管理算法源码" class="headerlink" title="内存管理算法源码"></a>内存管理算法源码</h1><ol><li><p>uninitialized_copy(InputIterator first,InputIterator last,ForwardIterator result)<br> ”uninitialized_copy()使我们能够将记忆体的配置与物件的建构行为分离开来。如果做为输出目的地的 [result, result+(last-first)) 范围内的每一个迭代器都指向未初始化区域，则uninitialized_copy() 会 使 用 copy  constructor，为身为输入来源之 [first,last) 范围内的每一个对象产生一份复 制品，放进输出范围中。“<br> 简单来说, 将[first,last)中的内存复制到[result,…中</p></li><li><p>copy_backward(BidirectionalIterator1 first, BidirectionalIterator1 last,BidirectionalIterator2 result）<br> 简单来说，将[first,last)中的内存从last开始复制到[result,..)中，这种情况一般是当 src 与 dest 内存块有重叠时才会使用的</p></li></ol><h1 id="vector"><a href="#vector" class="headerlink" title="vector"></a>vector</h1><h2 id="vector类源码"><a href="#vector类源码" class="headerlink" title="vector类源码"></a>vector类源码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 模板类 T是待存储数据类型 ALLOC是空间配置器类型</span></span><br><span class="line">templeta&lt;<span class="keyword">class</span> <span class="title class_">T</span>, <span class="keyword">class</span> <span class="title class_">Alloc</span> = alloc&gt;</span><br><span class="line"><span class="keyword">class</span> vector &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// 嵌套类型定义, 这里定义了相关的数据类型,方便后面使用</span></span><br><span class="line">    <span class="keyword">typedef</span> T value_type;</span><br><span class="line">    <span class="keyword">typedef</span> value_type* pointer;</span><br><span class="line">    <span class="keyword">typedef</span> value_type&amp; reference;</span><br><span class="line">    <span class="keyword">typedef</span> value_type* iterator;</span><br><span class="line">    <span class="keyword">typedef</span> <span class="type">size_t</span> size_type;</span><br><span class="line">    <span class="keyword">typedef</span> <span class="type">ptrdiff_t</span> difference_type</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    <span class="comment">// 空间配置器</span></span><br><span class="line">    <span class="keyword">typedef</span> simple_alloc &lt;value_type, Alloc&gt; data_alloctor</span><br><span class="line">    <span class="comment">// 三个内存迭代器,它们管理 vector 的数据,所以 vector = 三个内存迭代器指针,共计 12 字节</span></span><br><span class="line">    iterator start;</span><br><span class="line">    iterator finish;</span><br><span class="line">    iterator end_of_storage;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 内存数据管理函数</span></span><br><span class="line">    <span class="comment">/// 1. 内存指定位置插入一个元素</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">insert_aux</span><span class="params">(iterator position, <span class="type">const</span> T&amp; x)</span></span>;</span><br><span class="line">    <span class="comment">/// 2. 回收内存</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">deallocate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (start)</span><br><span class="line">            data_allocator::<span class="built_in">deallocate</span>(start, end_of_storage);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/// 3. 分配并填充内存</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">fill_initialize</span><span class="params">(size_type n, <span class="type">const</span> T&amp; value)</span> </span>&#123;</span><br><span class="line">        start = <span class="built_in">allocate_and_fill</span>(n, value);</span><br><span class="line">        finish = start + n;</span><br><span class="line">        end_of_storage = finish;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// 对vector的操作函数一 </span></span><br><span class="line">    <span class="comment">// 注意到对应关系 v.begin() = start; v.end() = finish</span></span><br><span class="line">    <span class="function">iterator <span class="title">begin</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> start; &#125;;</span><br><span class="line">    <span class="function">iterator <span class="title">end</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> finish; &#125;;</span><br><span class="line">    <span class="function">size_type <span class="title">size</span><span class="params">()</span> <span class="type">const</span> </span>&#123; <span class="keyword">return</span> <span class="built_in">size_type</span>(<span class="built_in">end</span>() - <span class="built_in">begin</span>()); &#125;;</span><br><span class="line">    <span class="function">size_type <span class="title">capacity</span><span class="params">()</span> <span class="type">const</span> </span>&#123; <span class="keyword">return</span> <span class="built_in">size_type</span>(end_of_storage - <span class="built_in">begin</span>()); &#125;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">empty</span><span class="params">()</span> <span class="type">const</span> </span>&#123; <span class="keyword">return</span> <span class="built_in">begin</span>() == <span class="built_in">end</span>(); &#125;</span><br><span class="line">    reference <span class="keyword">operator</span>[](size_type n) &#123; <span class="keyword">return</span> *(<span class="built_in">begin</span>() + n); &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// vector 构造函数</span></span><br><span class="line">    <span class="built_in">vector</span>() : <span class="built_in">start</span>(<span class="number">0</span>), <span class="built_in">end</span>(<span class="number">0</span>), <span class="built_in">end_of_storage</span>(<span class="number">0</span>) &#123;&#125;;</span><br><span class="line">    <span class="built_in">vector</span>(size_type n, <span class="type">const</span> T&amp; value)(<span class="built_in">fill_initialize</span>(n, value););</span><br><span class="line">    <span class="built_in">vector</span>(<span class="type">long</span> n, <span class="type">const</span> T&amp; value)(<span class="built_in">fill_initialize</span>(n, value););</span><br><span class="line">    <span class="built_in">vector</span>(<span class="type">int</span> n, <span class="type">const</span> T&amp; value)(<span class="built_in">fill_initialize</span>(n, value););</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">vector</span><span class="params">(size_type n)</span> </span>&#123; <span class="built_in">fill_initialize</span>(n, <span class="built_in">T</span>()); &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// vector 析构函数</span></span><br><span class="line">    ~<span class="built_in">vector</span>() &#123;</span><br><span class="line">        <span class="comment">// 析构对象</span></span><br><span class="line">        <span class="built_in">destory</span>(start, finish);</span><br><span class="line">        <span class="comment">// 释放空间</span></span><br><span class="line">        <span class="built_in">deallocate</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 对vector的操作函数二</span></span><br><span class="line">    <span class="comment">// 注意到对应关系 v.front() = *(v.begin()); v.back = *(v.end() - 1)</span></span><br><span class="line">    <span class="function">reference <span class="title">front</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> *<span class="built_in">begin</span>(); &#125;;</span><br><span class="line">    <span class="function">reference <span class="title">back</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> *(<span class="built_in">end</span>() - <span class="number">1</span>); &#125;;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">push_back</span><span class="params">(<span class="type">const</span> T&amp; x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// 这里要注意 添加数据的实现 先检查空间是否足够，如果不足需要先扩展容量，再添加元素</span></span><br><span class="line">        <span class="keyword">if</span> (finsih != end_of_storage)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">construct</span>(finish, x);</span><br><span class="line">            ++finish;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">insert_aux</span>(<span class="built_in">end</span>(), x);<span class="comment">// 容量不足,需要扩容</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">pop_back</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        --finish;</span><br><span class="line">        <span class="built_in">destory</span>(finish);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/// erase 的操作逻辑是 先将后面元素前移以覆盖 然后删除要删除的元素 所以这是一个 ON 的操作</span></span><br><span class="line">    <span class="function">iterator <span class="title">erase</span><span class="params">(iterator position)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (position + <span class="number">1</span> != <span class="built_in">end</span>())</span><br><span class="line">            <span class="built_in">copy</span>(position + <span class="number">1</span>, finish, position);</span><br><span class="line">        --finish;</span><br><span class="line">        <span class="built_in">destory</span>(finish);</span><br><span class="line">        <span class="keyword">return</span> position;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">resize</span><span class="params">(size_type new_size, <span class="type">const</span> T&amp; x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">new_size</span>() &lt; <span class="built_in">size</span>())</span><br><span class="line">            <span class="built_in">erase</span>(<span class="built_in">begin</span>() + new_size, <span class="built_in">end</span>());</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">insert</span>(<span class="built_in">end</span>(), new_size - <span class="built_in">size</span>(), x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">resize</span><span class="params">()</span><span class="params">(size_type new_size)</span> </span>&#123; <span class="built_in">resize</span>(new_size, <span class="built_in">T</span>()); &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123; <span class="built_in">erase</span>(<span class="built_in">begin</span>(), <span class="built_in">end</span>()); &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 空间管理</span></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    <span class="comment">// 配置空间并填满</span></span><br><span class="line">    <span class="function">iterator <span class="title">allocate_and_fill</span><span class="params">(size_type n, <span class="type">const</span> T&amp; x)</span> </span>&#123;</span><br><span class="line">        iterator result = data_allocator::<span class="built_in">allocate</span>(n);</span><br><span class="line">        <span class="built_in">uninitialized_fill_n</span>(result, n, x);<span class="comment">//قੴڍහ</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="vector迭代器源码"><a href="#vector迭代器源码" class="headerlink" title="vector迭代器源码"></a>vector迭代器源码</h2><ul><li>vector使用的是连续的内存空间，原生指针具备管理连续内存空间的能力，因而vector迭代器的本质就是原生指针<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">T</span>, <span class="keyword">class</span> <span class="title class_">Alloc</span> = alloc&gt;</span><br><span class="line"><span class="keyword">class</span> vector &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">typedef</span> T value_type;</span><br><span class="line"><span class="keyword">typedef</span> value_type* iterator; <span class="comment">// vector迭代器本质就是原生指针</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul><hr><h2 id="vector-容量拓展源码"><a href="#vector-容量拓展源码" class="headerlink" title="vector 容量拓展源码"></a>vector 容量拓展源码</h2><ul><li>这是当容量不足时拓展容量的函数，前文 <code>push_back</code> 中有使用<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>, <span class="keyword">class</span> <span class="title class_">Alloc</span>&gt;</span><br><span class="line"><span class="type">void</span> vector&lt;T, Alloc&gt;::<span class="built_in">insert_aux</span>(iterator position, <span class="type">const</span> T&amp; x) </span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 如果还有空间,直接插入就可以了</span></span><br><span class="line"><span class="keyword">if</span> (finish != end_of_storage) </span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">consruct</span>(finish, *(finish - <span class="number">1</span>));</span><br><span class="line">++finish;</span><br><span class="line">T x_copy = x;</span><br><span class="line"><span class="built_in">copy_backward</span>(position, finish - <span class="number">2</span>, finish - <span class="number">1</span>);</span><br><span class="line">*position = x_copy;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 如果空间不足 那就要考虑扩容了</span></span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">&#123;</span><br><span class="line"><span class="type">const</span> size_type old_size = <span class="built_in">size</span>();</span><br><span class="line"><span class="comment">// 新空间长度 = 原空间长度不为0 ？ 2倍原空间长度 : 1s </span></span><br><span class="line"><span class="type">const</span> size_type len = old_size != <span class="number">0</span> ? <span class="number">2</span> * <span class="built_in">old_size</span>() : <span class="number">1</span>;</span><br><span class="line">iterator new_start = data_allocator::<span class="built_in">allocate</span>(len);</span><br><span class="line">iterator new_finish = new_start;</span><br><span class="line"><span class="keyword">try</span> </span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 将原有数据拷贝到新内存中</span></span><br><span class="line">new_finish = <span class="built_in">uninitialized_copy</span>(start, position, new_start);</span><br><span class="line"><span class="built_in">construct</span>(new_finish, x);</span><br><span class="line">++new_finish;</span><br><span class="line"><span class="comment">// 添加新元素</span></span><br><span class="line">new_finish = <span class="built_in">uninitialized_copy</span>(position, finish, new_finish);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">catch</span> () &#123;</span><br><span class="line"><span class="built_in">destroy</span>(new_start, new_finish);</span><br><span class="line">data_allocator::<span class="built_in">deallocate</span>(new_start, len);</span><br><span class="line"><span class="keyword">throw</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 销毁原来的 vector</span></span><br><span class="line"><span class="built_in">destory</span>(<span class="built_in">begin</span>(), <span class="built_in">end</span>());</span><br><span class="line"><span class="built_in">deallocate</span>();</span><br><span class="line"><span class="comment">// 调整迭代器 指向新的内存</span></span><br><span class="line">start = new_start;</span><br><span class="line">finish = new_finish;</span><br><span class="line">end_of_storage = new_start + len;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><hr><h2 id="vector-insert函数源码"><a href="#vector-insert函数源码" class="headerlink" title="vector insert函数源码"></a>vector insert函数源码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>, <span class="keyword">class</span> <span class="title class_">Alloc</span>&gt;</span><br><span class="line"><span class="type">void</span> vector&lt;T, Alloc&gt;::<span class="built_in">insert</span>(iterator position, size_type n, <span class="type">const</span> T&amp; x) &#123;</span><br><span class="line"><span class="keyword">if</span> (n != <span class="number">0</span>) &#123;</span><br><span class="line"><span class="comment">// 如果备用空间大于待插入元素所需的空间,考虑直接插入</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">size_type</span>(end_of_strage - finish) &gt; n) </span><br><span class="line">&#123;</span><br><span class="line">T x_copy = x;</span><br><span class="line"><span class="comment">// 首先计算插入点以后的元素个数 elems_after</span></span><br><span class="line"><span class="type">const</span> size_type elems_after = finish - positon;</span><br><span class="line">iterator old_finish = finish;</span><br><span class="line"><span class="comment">// 如果 elems_after大于待插入元素个数</span></span><br><span class="line"><span class="keyword">if</span> (elems_after &gt; n) </span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 将 n个 靠后的 elems_after 元素后移 [finish-n,finish) -&gt; [finish,finish+n)</span></span><br><span class="line"><span class="built_in">uninitialiazed_copy</span>(finish - n, finish, finish);</span><br><span class="line"><span class="comment">// 移动 finish</span></span><br><span class="line">finish += n;</span><br><span class="line"><span class="built_in">copy_backward</span>(position, old_finish - n, old_finish);</span><br><span class="line"><span class="comment">// 从 插入点 插入新的值</span></span><br><span class="line"><span class="built_in">fill</span>(position, old_finish, x_copy);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 如果 elems_after小于待插入元素个数</span></span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">uninitialiazed_fill_n</span>(finish, n - elems_after, finish);</span><br><span class="line">finish += n - elems_after;</span><br><span class="line"><span class="built_in">uninitialiazed_copy</span>(position, old_finish, finish);</span><br><span class="line">finish += elems_after;</span><br><span class="line"><span class="built_in">fill</span>(position, old_finish, x_copy);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 如果备用空间不足</span></span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 新长度 = max(2倍原长度，原长度+N)</span></span><br><span class="line"><span class="type">const</span> size_type old_size = <span class="built_in">size</span>();</span><br><span class="line"><span class="type">const</span> size_type len = old_size + <span class="built_in">max</span>(old_size, n);</span><br><span class="line"><span class="comment">// 配置新空间</span></span><br><span class="line">iterator new_start = data_allocator::<span class="built_in">allocate</span>(len);</span><br><span class="line">iterator new_finish = new_start;</span><br><span class="line">_STL_TRY&#123;</span><br><span class="line"><span class="comment">// 拷贝插入点之前的元素</span></span><br><span class="line"> new_finish = <span class="built_in">uninitialized_copy</span>(start, position, new_start);</span><br><span class="line"><span class="comment">// 传入新元素</span></span><br><span class="line">new_finish = uninitialized_fill_n;</span><br><span class="line"><span class="comment">// 拷贝原插入点之后的元素</span></span><br><span class="line">new_finish = <span class="built_in">uninitialized_copy</span>(position, finish, new_finish);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> _STL_USE_EXCEPTIONS</span></span><br><span class="line"><span class="built_in">catch</span> () &#123;</span><br><span class="line"><span class="built_in">destroy</span>(new_start, new_finish);</span><br><span class="line">data_allocator::<span class="built_in">deallocate</span>(new_start, len);</span><br><span class="line"><span class="keyword">throw</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="comment">// 释放原vector</span></span><br><span class="line"><span class="built_in">destory</span>(<span class="built_in">begin</span>(), <span class="built_in">end</span>());</span><br><span class="line"><span class="built_in">deallocate</span>();</span><br><span class="line"><span class="comment">// 调整迭代器指向新的vector</span></span><br><span class="line">start = new_start;</span><br><span class="line">finish = new_finish;</span><br><span class="line">end_of_storage = new_start + len;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="list"><a href="#list" class="headerlink" title="list"></a>list</h1><h2 id="list-类源码"><a href="#list-类源码" class="headerlink" title="list 类源码"></a>list 类源码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">_Ty</span>, <span class="keyword">class</span> <span class="title class_">_Alloc</span> = allocator&lt;_Ty&gt;&gt;</span><br><span class="line"><span class="comment">// bidirectional linked list -- 官方注释 list 是一个双向链表</span></span><br><span class="line"><span class="keyword">class</span> list </span><br><span class="line">&#123; </span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="comment">// 这里在定义 node , 可以看出 list 与 node 是分离的设计</span></span><br><span class="line"><span class="comment">// 不过这里 也出现了一个新东西 traits 萃取器</span></span><br><span class="line">    <span class="keyword">using</span> _Alty          = _Rebind_alloc_t&lt;_Alloc, _Ty&gt;;</span><br><span class="line">    <span class="keyword">using</span> _Alty_traits   = allocator_traits&lt;_Alty&gt;;</span><br><span class="line">    <span class="keyword">using</span> _Node          = _List_node&lt;_Ty, <span class="keyword">typename</span> allocator_traits&lt;_Alloc&gt;::void_pointer&gt;;</span><br><span class="line">    <span class="keyword">using</span> _Alnode        = _Rebind_alloc_t&lt;_Alloc, _Node&gt;;</span><br><span class="line">    <span class="keyword">using</span> _Alnode_traits = allocator_traits&lt;_Alnode&gt;;</span><br><span class="line">    <span class="keyword">using</span> _Nodeptr       = <span class="keyword">typename</span> _Alnode_traits::pointer;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 这里在定义数据类型 方便后续使用</span></span><br><span class="line">    <span class="keyword">using</span> value_type      = _Ty;</span><br><span class="line">    <span class="keyword">using</span> allocator_type  = _Alloc;</span><br><span class="line">    <span class="keyword">using</span> size_type       = <span class="keyword">typename</span> _Alty_traits::size_type;</span><br><span class="line">    <span class="keyword">using</span> difference_type = <span class="keyword">typename</span> _Alty_traits::difference_type;</span><br><span class="line">    <span class="keyword">using</span> pointer         = <span class="keyword">typename</span> _Alty_traits::pointer;</span><br><span class="line">    <span class="keyword">using</span> const_pointer   = <span class="keyword">typename</span> _Alty_traits::const_pointer;</span><br><span class="line">    <span class="keyword">using</span> reference       = value_type&amp;;</span><br><span class="line">    <span class="keyword">using</span> const_reference = <span class="type">const</span> value_type&amp;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">using</span> iterator                  = _List_iterator&lt;_Scary_val&gt;;</span><br><span class="line">    <span class="keyword">using</span> const_iterator            = _List_const_iterator&lt;_Scary_val&gt;;</span><br><span class="line">    <span class="keyword">using</span> _Unchecked_iterator       = _List_unchecked_iterator&lt;_Scary_val&gt;;</span><br><span class="line">    <span class="keyword">using</span> _Unchecked_const_iterator = _List_unchecked_const_iterator&lt;_Scary_val&gt;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这里看到 有两种特殊的迭代器 reverse_iterator 和 const_reverse_iterator</span></span><br><span class="line">    <span class="keyword">using</span> reverse_iterator       = _STD reverse_iterator&lt;iterator&gt;;</span><br><span class="line">    <span class="keyword">using</span> const_reverse_iterator = _STD reverse_iterator&lt;const_iterator&gt;;</span><br></pre></td></tr></table></figure><h2 id="list-node-源码"><a href="#list-node-源码" class="headerlink" title="list_node 源码"></a>list_node 源码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">_Value_type</span>, <span class="keyword">class</span> <span class="title class_">_Voidptr</span>&gt;</span><br><span class="line"><span class="comment">// list node - 官方注释</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">_List_node</span> </span><br><span class="line">&#123; </span><br><span class="line">    <span class="keyword">using</span> value_type = _Value_type;</span><br><span class="line">    <span class="keyword">using</span> _Nodeptr   = _Rebind_pointer_t&lt;_Voidptr, _List_node&gt;;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 成员变量定义, 可以看到 next \ prev \ val , 进一步证明 list 是双向链表</span></span><br><span class="line">    <span class="comment">// successor node, or first element if head</span></span><br><span class="line">    _Nodeptr _Next; </span><br><span class="line">    <span class="comment">// predecessor node, or last element if head</span></span><br><span class="line">    _Nodeptr _Prev; </span><br><span class="line">    <span class="comment">// the stored value, unused if head - 官方注释 , 这里可以看出 list 是有使用虚拟头结点来方便链表操作的</span></span><br><span class="line">    _Value_type _Myval; </span><br><span class="line"></span><br><span class="line"><span class="comment">// 构造函数与赋值构造函数</span></span><br><span class="line">    _List_node(<span class="type">const</span> _List_node&amp;) = <span class="keyword">delete</span>;</span><br><span class="line">    _List_node&amp; <span class="keyword">operator</span>=(<span class="type">const</span> _List_node&amp;) = <span class="keyword">delete</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="trait"><a href="#trait" class="headerlink" title="trait"></a>trait</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// traits for std::allocator - 官方注释 allocator 的 trait</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">_Alloc</span>&gt;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">_Default_allocator_traits</span> </span><br><span class="line">&#123; </span><br><span class="line">    <span class="keyword">using</span> allocator_type = _Alloc;</span><br><span class="line">    <span class="keyword">using</span> value_type     = <span class="keyword">typename</span> _Alloc::value_type;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">using</span> pointer            = value_type*;</span><br><span class="line">    <span class="keyword">using</span> const_pointer      = <span class="type">const</span> value_type*;</span><br><span class="line">    <span class="keyword">using</span> void_pointer       = <span class="type">void</span>*;</span><br><span class="line">    <span class="keyword">using</span> const_void_pointer = <span class="type">const</span> <span class="type">void</span>*;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">using</span> size_type       = <span class="type">size_t</span>;</span><br><span class="line">    <span class="keyword">using</span> difference_type = <span class="type">ptrdiff_t</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 迭代器指针 的 萃取器</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">_Ty</span>&gt;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">iterator_traits</span>&lt;_Ty*&gt; </span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">using</span> iterator_concept  = contiguous_iterator_tag;</span><br><span class="line">    <span class="keyword">using</span> iterator_category = random_access_iterator_tag;</span><br><span class="line">    <span class="keyword">using</span> value_type        = <span class="type">remove_cv_t</span>&lt;_Ty&gt;;</span><br><span class="line">    <span class="keyword">using</span> difference_type   = <span class="type">ptrdiff_t</span>;</span><br><span class="line">    <span class="keyword">using</span> pointer           = _Ty*;</span><br><span class="line">    <span class="keyword">using</span> reference         = _Ty&amp;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 以下是简化的代码 方便观看  */</span></span><br><span class="line"><span class="comment">// 一般迭代器的 萃取器</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">I</span>&gt;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">iterator_traits</span> </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">typename</span> I::iteratorcategory iteratorcategory;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">typename</span> I::valuetype valuetype;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">typename</span> I::differencetype differencetype;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">typename</span> I::pointer pointer;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">typename</span> I::reference reference;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 原生指针的 萃取器</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">iteratortraits</span>&lt;T&gt; </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">typedef</span> randomaccessiteratortag iteratorcategory;</span><br><span class="line"><span class="keyword">typedef</span> T value_type;</span><br><span class="line"><span class="keyword">typedef</span> ptrdifft differencetype;</span><br><span class="line"><span class="keyword">typedef</span> T *pointer;</span><br><span class="line"><span class="keyword">typedef</span> T &amp;reference;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 常量指针的 萃取器</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">iteratortraits</span>&lt;<span class="type">const</span> T&gt; &#123;</span><br><span class="line"><span class="keyword">typedef</span> randomaccessiteratortag iteratorcategory;</span><br><span class="line"><span class="keyword">typedef</span> T valuetype; </span><br><span class="line"><span class="keyword">typedef</span> ptrdifft differencetype;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">const</span> T *pointer;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">const</span> T &amp;reference;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="deque"><a href="#deque" class="headerlink" title="deque"></a>deque</h1><p><em>参考 <a href="https://blog.csdn.net/ZLP_CSDN/article/details/104382886">https://blog.csdn.net/ZLP_CSDN/article/details/104382886</a></em></p><h2 id="deque-类源码"><a href="#deque-类源码" class="headerlink" title="deque 类源码"></a>deque 类源码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* deque val */</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">_Val_types</span>&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">_Deque_val</span> : <span class="keyword">public</span> _Container_base12 &#123;</span><br><span class="line"><span class="comment">// ..一些数据类型定义..</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 敲定容量大小</span></span><br><span class="line"><span class="comment">// 官方注释 _Bytes &gt; 8 then elements per block (a power of 2),当元素大小大于8的时候 每一块buff只装一个元素</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">static</span> <span class="keyword">constexpr</span> <span class="type">size_t</span> _Bytes = <span class="built_in">sizeof</span>(value_type);</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">static</span> <span class="keyword">constexpr</span> <span class="type">int</span> _Block_size = _Bytes &lt;= <span class="number">1</span> ? <span class="number">16</span></span><br><span class="line">                                     : _Bytes &lt;= <span class="number">2</span> ? <span class="number">8</span></span><br><span class="line">                                     : _Bytes &lt;= <span class="number">4</span> ? <span class="number">4</span></span><br><span class="line">                                     : _Bytes &lt;= <span class="number">8</span> ? <span class="number">2</span></span><br><span class="line">                                                   : <span class="number">1</span>; </span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 数据成员,以下英文为官方注释</span></span><br><span class="line"><span class="comment">/// map 指针</span></span><br><span class="line">    _Mapptr _Map; <span class="comment">// pointer to array of pointers to blocks</span></span><br><span class="line">    <span class="comment">// map 数组的大小 要么为0 要么是 2的倍数</span></span><br><span class="line">    size_type _Mapsize; <span class="comment">// size of map array, zero or 2^N</span></span><br><span class="line">    <span class="comment">// 第一个元素的偏移</span></span><br><span class="line">    size_type _Myoff; <span class="comment">// offset of initial element</span></span><br><span class="line">    <span class="comment">// 当前 deque 的 size</span></span><br><span class="line">    size_type _Mysize; <span class="comment">// current length of sequence</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="deque-迭代器源码"><a href="#deque-迭代器源码" class="headerlink" title="deque 迭代器源码"></a>deque 迭代器源码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">_Mydeque</span>&gt; </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">_Deque_const_iterator</span> : <span class="keyword">public</span> _Iterator_base12</span><br><span class="line">&#123;</span><br><span class="line">_Size_type _Myoff;<span class="comment">// offset of element in deque</span></span><br><span class="line"><span class="type">const</span> _Mydeque *_Mycont;<span class="comment">// pointer to deque</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">_Mydeque</span>&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">_Deque_iterator</span> : <span class="keyword">public</span> _Deque_const_iterator&lt;_Mydeque&gt;</span><br></pre></td></tr></table></figure><h2 id="deque-的插入函数源码"><a href="#deque-的插入函数源码" class="headerlink" title="deque 的插入函数源码"></a>deque 的插入函数源码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">iterator <span class="title">insert</span><span class="params">(const_iterator _Where, _Ty&amp;&amp; _Val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">emplace</span>(_Where, _STD <span class="built_in">move</span>(_Val));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">iterator <span class="title">emplace</span><span class="params">(const_iterator _Where, _Valty&amp;&amp;... _Val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">const</span> <span class="keyword">auto</span> _Off = <span class="built_in">static_cast</span>&lt;size_type&gt;(_Where - <span class="built_in">begin</span>());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 官方注释 closer to front, push to front then rotate</span></span><br><span class="line"><span class="comment">// 如果插入点离数组头更近,先把 待插入元素放到数组头前面,然后在数组头和插入点之间做&quot;循环移位&quot;,把待插入元素移动到最近的区域</span></span><br><span class="line"><span class="keyword">if</span> (_Off &lt;= _Mysize() / <span class="number">2</span>) </span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">emplace_front</span>(_STD forward&lt;_Valty&gt;(_Val)...);</span><br><span class="line"><span class="function">_STD <span class="title">rotate</span><span class="params">(begin(), _Next_iter(begin()), begin() + <span class="keyword">static_cast</span>&lt;difference_type&gt;(<span class="number">1</span> + _Off))</span></span>;</span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">// 官方注释 closer to back, push to back then rotate</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">emplace_back</span>(_STD forward&lt;_Valty&gt;(_Val)...);</span><br><span class="line"><span class="function">_STD <span class="title">rotate</span><span class="params">(begin() + <span class="keyword">static_cast</span>&lt;difference_type&gt;(_Off), _Prev_iter(end()), end())</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="built_in">begin</span>() + <span class="built_in">static_cast</span>&lt;difference_type&gt;(_Off);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="deque-的-begin-和-end-迭代器源码分析"><a href="#deque-的-begin-和-end-迭代器源码分析" class="headerlink" title="deque 的 begin() 和 end() 迭代器源码分析"></a>deque 的 begin() 和 end() 迭代器源码分析</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">_NODISCARD iterator <span class="title">begin</span><span class="params">()</span> <span class="keyword">noexcept</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> (<span class="built_in">iterator</span>(<span class="keyword">this</span>-&gt;_Myoff(), _STD <span class="built_in">addressof</span>(<span class="keyword">this</span>-&gt;_Get_data())));</span><br><span class="line"><span class="comment">// 显然 myoff 与 mysize 合作,存储者数据</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">_NODISCARD iterator <span class="title">end</span><span class="params">()</span> <span class="keyword">noexcept</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> (<span class="built_in">iterator</span>(<span class="keyword">this</span>-&gt;_Myoff() + <span class="keyword">this</span>-&gt;_Mysize(),_STD <span class="built_in">addressof</span>(<span class="keyword">this</span>-&gt;_Get_data())));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="deque-迭代器-函数源码"><a href="#deque-迭代器-函数源码" class="headerlink" title="deque 迭代器 * 函数源码"></a>deque 迭代器 * 函数源码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// get container pointer</span></span><br><span class="line"><span class="comment">// 获取 deque 的 内存区域</span></span><br><span class="line"><span class="type">const</span> _Container_base12 *_Getcont() <span class="type">const</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> (_Mycont);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">_NODISCARD reference <span class="keyword">operator</span>*() <span class="type">const</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 先获取内存</span></span><br><span class="line"><span class="type">const</span> <span class="keyword">auto</span> _Mycont = <span class="built_in">static_cast</span>&lt;<span class="type">const</span> _Mydeque *&gt;(<span class="keyword">this</span>-&gt;_Getcont());</span><br><span class="line"><span class="comment">// 再获取所在内存块</span></span><br><span class="line">_Size_type _Block = _Mycont-&gt;_Getblock(_Myoff);</span><br><span class="line"><span class="comment">// 然后计算块内偏移</span></span><br><span class="line">_Size_type _Off = _Myoff % _DEQUESIZ;</span><br><span class="line"><span class="keyword">return</span> (_Mycont-&gt;_Map[_Block][_Off]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="stack"><a href="#stack" class="headerlink" title="stack"></a>stack</h1><h2 id="stack-类源码"><a href="#stack-类源码" class="headerlink" title="stack 类源码"></a>stack 类源码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 从类模板可以看到 Container = deque , stack 的底层就是通过 deque 来实现的</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">_Ty</span>, <span class="keyword">class</span> <span class="title class_">_Container</span> = deque&lt;_Ty&gt;&gt;</span><br><span class="line"><span class="keyword">class</span> stack </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">// 型别定义</span></span><br><span class="line">    <span class="keyword">using</span> value_type      = <span class="keyword">typename</span> _Container::value_type;</span><br><span class="line">    <span class="keyword">using</span> reference       = <span class="keyword">typename</span> _Container::reference;</span><br><span class="line">    <span class="keyword">using</span> const_reference = <span class="keyword">typename</span> _Container::const_reference;</span><br><span class="line">    <span class="keyword">using</span> size_type       = <span class="keyword">typename</span> _Container::size_type;</span><br><span class="line">    <span class="keyword">using</span> container_type  = _Container;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这里可以看到 deque 作为类成员变量存在于 stack 中</span></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    _Container c&#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ... 各种构造函数 ... </span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 以下是 操作函数 , 可以发现其实质都是转化为了对 deque 的操作 </span></span><br><span class="line"><span class="comment">/// empty</span></span><br><span class="line">    <span class="function">_NODISCARD <span class="type">bool</span> <span class="title">empty</span><span class="params">()</span> <span class="type">const</span> <span class="title">noexcept</span><span class="params">(<span class="keyword">noexcept</span>(c.empty()))</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> c.<span class="built_in">empty</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// size</span></span><br><span class="line">    <span class="function">_NODISCARD size_type <span class="title">size</span><span class="params">()</span> <span class="type">const</span> <span class="title">noexcept</span><span class="params">(<span class="keyword">noexcept</span>(c.size()))</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> c.<span class="built_in">size</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// top</span></span><br><span class="line">    <span class="function">_NODISCARD reference <span class="title">top</span><span class="params">()</span> <span class="title">noexcept</span><span class="params">(<span class="keyword">noexcept</span>(c.back()))</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> c.<span class="built_in">back</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">_NODISCARD const_reference <span class="title">top</span><span class="params">()</span> <span class="type">const</span> <span class="title">noexcept</span><span class="params">(<span class="keyword">noexcept</span>(c.back()))</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> c.<span class="built_in">back</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// push</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">push</span><span class="params">(<span class="type">const</span> value_type&amp; _Val)</span> </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        c.<span class="built_in">push_back</span>(_Val);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">push</span><span class="params">(value_type&amp;&amp; _Val)</span> </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        c.<span class="built_in">push_back</span>(_STD <span class="built_in">move</span>(_Val));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/// pop</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">pop</span><span class="params">()</span> <span class="title">noexcept</span><span class="params">(<span class="keyword">noexcept</span>(c.pop_back()))</span> <span class="comment">/* strengthened */</span> </span>&#123;</span><br><span class="line">        c.<span class="built_in">pop_back</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// swap</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">swap</span><span class="params">(stack&amp; _Right)</span> <span class="title">noexcept</span><span class="params">(_Is_nothrow_swappable&lt;_Container&gt;::value)</span> </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        _Swap_adl(c, _Right.c);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="comment">// emplace</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span>... _Valty&gt;</span><br><span class="line">    <span class="function"><span class="keyword">decltype</span>(<span class="keyword">auto</span>) <span class="title">emplace</span><span class="params">(_Valty&amp;&amp;... _Val)</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="keyword">if</span> _HAS_CXX17</span></span><br><span class="line">        <span class="keyword">return</span> c.<span class="built_in">emplace_back</span>(_STD forward&lt;_Valty&gt;(_Val)...);</span><br><span class="line"><span class="meta">#<span class="keyword">else</span> <span class="comment">// ^^^ C++17 or newer / C++14 vvv</span></span></span><br><span class="line">        c.<span class="built_in">emplace_back</span>(_STD forward&lt;_Valty&gt;(_Val)...);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">// _HAS_CXX17</span></span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="comment">/// 甚至可以直接获取到 deque, 不过是 const 的 只能访问</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">stack&lt;int&gt; st;</span></span><br><span class="line"><span class="comment">deque&lt;int&gt; dq = st._Get_container();</span></span><br><span class="line"><span class="comment">st._Get_container().push_back(1);// error </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"> _NODISCARD <span class="type">const</span> _Container&amp; _Get_container() <span class="type">const</span> <span class="keyword">noexcept</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> c;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><hr><h1 id="queue"><a href="#queue" class="headerlink" title="queue"></a>queue</h1><h2 id="queue-类源码"><a href="#queue-类源码" class="headerlink" title="queue 类源码"></a>queue 类源码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 从类模板可以看到 Container = deque , queuw 的底层就是通过 deque 来实现的</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">_Ty</span>, <span class="keyword">class</span> <span class="title class_">_Container</span> = deque&lt;_Ty&gt;&gt;</span><br><span class="line"><span class="keyword">class</span> queue </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">// 型别定义</span></span><br><span class="line">    <span class="keyword">using</span> value_type      = <span class="keyword">typename</span> _Container::value_type;</span><br><span class="line">    <span class="keyword">using</span> reference       = <span class="keyword">typename</span> _Container::reference;</span><br><span class="line">    <span class="keyword">using</span> const_reference = <span class="keyword">typename</span> _Container::const_reference;</span><br><span class="line">    <span class="keyword">using</span> size_type       = <span class="keyword">typename</span> _Container::size_type;</span><br><span class="line">    <span class="keyword">using</span> container_type  = _Container;</span><br><span class="line"></span><br><span class="line"><span class="comment">// container deque 以成员变量的形式呈现</span></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    _Container c&#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ... 各种构造函数 ...</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">/// 以下是操作函数,都在转化为了对于 deue 的操作</span></span><br><span class="line">    <span class="comment">/// empty</span></span><br><span class="line">    <span class="function">_NODISCARD <span class="type">bool</span> <span class="title">empty</span><span class="params">()</span> <span class="type">const</span> <span class="title">noexcept</span><span class="params">(<span class="keyword">noexcept</span>(c.empty()))</span> </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> c.<span class="built_in">empty</span>();</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">/// size</span></span><br><span class="line">    <span class="function">_NODISCARD size_type <span class="title">size</span><span class="params">()</span> <span class="type">const</span> <span class="title">noexcept</span><span class="params">(<span class="keyword">noexcept</span>(c.size()))</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> c.<span class="built_in">size</span>();</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">/// front</span></span><br><span class="line">    <span class="function">_NODISCARD reference <span class="title">front</span><span class="params">()</span> <span class="title">noexcept</span><span class="params">(<span class="keyword">noexcept</span>(c.front()))</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> c.<span class="built_in">front</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">_NODISCARD const_reference <span class="title">front</span><span class="params">()</span> <span class="type">const</span> <span class="title">noexcept</span><span class="params">(<span class="keyword">noexcept</span>(c.front()))</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> c.<span class="built_in">front</span>();</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">/// back</span></span><br><span class="line">    <span class="function">_NODISCARD reference <span class="title">back</span><span class="params">()</span> <span class="title">noexcept</span><span class="params">(<span class="keyword">noexcept</span>(c.back()))</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> c.<span class="built_in">back</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">_NODISCARD const_reference <span class="title">back</span><span class="params">()</span> <span class="type">const</span> <span class="title">noexcept</span><span class="params">(<span class="keyword">noexcept</span>(c.back()))</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> c.<span class="built_in">back</span>();</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">/// push</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">push</span><span class="params">(<span class="type">const</span> value_type&amp; _Val)</span> </span>&#123;</span><br><span class="line">        c.<span class="built_in">push_back</span>(_Val);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">push</span><span class="params">(value_type&amp;&amp; _Val)</span> </span>&#123;</span><br><span class="line">        c.<span class="built_in">push_back</span>(_STD <span class="built_in">move</span>(_Val));</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">/// pop</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">pop</span><span class="params">()</span> <span class="title">noexcept</span><span class="params">(<span class="keyword">noexcept</span>(c.pop_front()))</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        c.<span class="built_in">pop_front</span>();</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">/// swap</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">swap</span><span class="params">(queue&amp; _Right)</span> <span class="title">noexcept</span><span class="params">(_Is_nothrow_swappable&lt;_Container&gt;::value)</span> </span>&#123;</span><br><span class="line">        _Swap_adl(c, _Right.c);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/// emplace</span></span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">class</span>... _Valty&gt;</span><br><span class="line">    <span class="function"><span class="keyword">decltype</span>(<span class="keyword">auto</span>) <span class="title">emplace</span><span class="params">(_Valty&amp;&amp;... _Val)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line"><span class="meta">#<span class="keyword">if</span> _HAS_CXX17</span></span><br><span class="line">        <span class="keyword">return</span> c.<span class="built_in">emplace_back</span>(_STD forward&lt;_Valty&gt;(_Val)...);</span><br><span class="line"><span class="meta">#<span class="keyword">else</span> <span class="comment">// ^^^ C++17 or newer / C++14 vvv</span></span></span><br><span class="line">        c.<span class="built_in">emplace_back</span>(_STD forward&lt;_Valty&gt;(_Val)...);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">// _HAS_CXX17</span></span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="comment">/// 甚至可以直接拿到 deque, 不过是 const 的 只能访问</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">queue&lt;int&gt; q;</span></span><br><span class="line"><span class="comment">deque&lt;int&gt; dq = q._Get_container();</span></span><br><span class="line"><span class="comment">q._Get_container().push_back(1);// error</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">    _NODISCARD <span class="type">const</span> _Container&amp; _Get_container() <span class="type">const</span> <span class="keyword">noexcept</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> c;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="heap"><a href="#heap" class="headerlink" title="heap"></a>heap</h1><p><strong>heap 不是容器，没有类 它是通过堆算法来体现的</strong><br><strong><code>push_heap</code></strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">_RanIt</span>&gt;</span><br><span class="line"><span class="function">_CONSTEXPR20 <span class="type">void</span> <span class="title">push_heap</span><span class="params">(_RanIt _First, _RanIt _Last)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// push *(_Last - 1) onto heap at [_First, _Last - 1)</span></span><br><span class="line">    <span class="function">_STD <span class="title">push_heap</span><span class="params">(_First, _Last, less&lt;&gt;&#123;&#125;)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>**由于 heap 是 有序的， 所以大部分相关函数都有一个默认less比较器的版本 和 一个可自己指定比较器的版本 **</p><hr><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">_RanIt</span>, <span class="keyword">class</span> <span class="title class_">_Pr</span>&gt;</span><br><span class="line"><span class="function">_CONSTEXPR20 <span class="type">void</span> <span class="title">push_heap</span><span class="params">(_RanIt _First, _RanIt _Last, _Pr _Pred)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// push *(_Last - 1) onto heap at [_First, _Last - 1)</span></span><br><span class="line">    _Adl_verify_range(_First, _Last);</span><br><span class="line">    <span class="type">const</span> <span class="keyword">auto</span> _UFirst = _Get_unwrapped(_First);</span><br><span class="line">    <span class="keyword">auto</span> _ULast        = _Get_unwrapped(_Last);</span><br><span class="line">    <span class="keyword">using</span> _Diff        = _Iter_diff_t&lt;_RanIt&gt;;</span><br><span class="line">    _Diff _Count       = _ULast - _UFirst;</span><br><span class="line">    <span class="keyword">if</span> (<span class="number">2</span> &lt;= _Count)</span><br><span class="line">    &#123;</span><br><span class="line">        _Iter_value_t&lt;_RanIt&gt; _Val = _STD <span class="built_in">move</span>(*--_ULast);</span><br><span class="line">        _Push_heap_by_index(_UFirst, --_Count, _Diff(<span class="number">0</span>), _STD <span class="built_in">move</span>(_Val), _Pass_fn(_Pred));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">_RanIt</span>, <span class="keyword">class</span> <span class="title class_">_Ty</span>, <span class="keyword">class</span> <span class="title class_">_Pr</span>&gt;</span><br><span class="line">_CONSTEXPR20 <span class="type">void</span> _Push_heap_by_index(_RanIt _First, _Iter_diff_t&lt;_RanIt&gt; _Hole, _Iter_diff_t&lt;_RanIt&gt; _Top, _Ty&amp;&amp; _Val, _Pr _Pred) </span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 官方注释 ： percolate _Hole to _Top or where _Val belongs</span></span><br><span class="line"><span class="comment">// 将 hole 渗透到 top 或者 val 适合的位置</span></span><br><span class="line">    <span class="keyword">using</span> _Diff = _Iter_diff_t&lt;_RanIt&gt;;</span><br><span class="line">    <span class="comment">// 此处</span></span><br><span class="line">    <span class="comment">// 循环变量 idx = (hole - 1) /2  , hole = idx 找到父节点</span></span><br><span class="line">    <span class="comment">// 循环条件 top &lt; hole 防止越界 和 父节点优先级低于子节点</span></span><br><span class="line">    <span class="keyword">for</span> (_Diff _Idx = (_Hole - <span class="number">1</span>) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">         _Top &lt; _Hole &amp;&amp; _DEBUG_LT_PRED(_Pred, *(_First + _Idx), _Val); </span><br><span class="line">_Idx = (_Hole - <span class="number">1</span>) &gt;&gt; <span class="number">1</span>) </span><br><span class="line">&#123; </span><br><span class="line"><span class="comment">// 交换 父子节点的值</span></span><br><span class="line">        *(_First + _Hole) = _STD <span class="built_in">move</span>(*(_First + _Idx));</span><br><span class="line">        _Hole             = _Idx;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 官方注释 ： drop _Val into final hole</span></span><br><span class="line"><span class="comment">// 把 val 放进最后找到的合适的位置</span></span><br><span class="line">    *(_First + _Hole) = _STD forward&lt;_Ty&gt;(_Val);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p><strong><code>pop_heap</code></strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">_RanIt</span>&gt;</span><br><span class="line"><span class="function">_CONSTEXPR20 <span class="type">void</span> <span class="title">pop_heap</span><span class="params">(_RanIt _First, _RanIt _Last)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 官方注释: pop *_First to *(_Last - 1) and reheap</span></span><br><span class="line">    <span class="comment">// 把 first 放到 last - 1; 然后重建 heap</span></span><br><span class="line">    <span class="comment">// 这里可以看出,默认是 less 的比较器</span></span><br><span class="line">    <span class="function">_STD <span class="title">pop_heap</span><span class="params">(_First, _Last, less&lt;&gt;&#123;&#125;)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">_RanIt</span>, <span class="keyword">class</span> <span class="title class_">_Pr</span>&gt;</span><br><span class="line"><span class="function">_CONSTEXPR20 <span class="type">void</span> <span class="title">pop_heap</span><span class="params">(_RanIt _First, _RanIt _Last, _Pr _Pred)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 官方注释 ： pop *_First to *(_Last - 1) and reheap</span></span><br><span class="line">    <span class="comment">// 这里可以看到 可以指定比较器, 而且 上面那个pop_heap 是通过调用这个 pop_heap来实现的</span></span><br><span class="line">    _Adl_verify_range(_First, _Last);</span><br><span class="line">    _Pop_heap_unchecked(_Get_unwrapped(_First), _Get_unwrapped(_Last), _Pass_fn(_Pred));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">_RanIt</span>, <span class="keyword">class</span> <span class="title class_">_Pr</span>&gt;</span><br><span class="line">_CONSTEXPR20 <span class="type">void</span> _Pop_heap_unchecked(_RanIt _First, _RanIt _Last, _Pr _Pred) </span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// pop *_First to *(_Last - 1) and reheap</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="number">2</span> &lt;= _Last - _First)</span><br><span class="line">    &#123;</span><br><span class="line">        --_Last;</span><br><span class="line">        _Iter_value_t&lt;_RanIt&gt; _Val = _STD <span class="built_in">move</span>(*_Last);</span><br><span class="line">        <span class="comment">// 拿到新 堆顶 的 val , 方便后面调整堆</span></span><br><span class="line">        _Pop_heap_hole_unchecked(_First, _Last, _Last, _STD <span class="built_in">move</span>(_Val), _Pred);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">_RanIt</span>, <span class="keyword">class</span> <span class="title class_">_Ty</span>, <span class="keyword">class</span> <span class="title class_">_Pr</span>&gt;</span><br><span class="line">_CONSTEXPR20 <span class="type">void</span> _Pop_heap_hole_unchecked(_RanIt _First, _RanIt _Last, _RanIt _Dest, _Ty&amp;&amp; _Val, _Pr _Pred) </span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// pop *_First to *_Dest and reheap</span></span><br><span class="line">    <span class="comment">// precondition: _First != _Last</span></span><br><span class="line">    <span class="comment">// precondition: _First != _Dest</span></span><br><span class="line">    *_Dest      = _STD <span class="built_in">move</span>(*_First);</span><br><span class="line">    <span class="keyword">using</span> _Diff = _Iter_diff_t&lt;_RanIt&gt;;</span><br><span class="line">    _Pop_heap_hole_by_index(</span><br><span class="line">        _First, <span class="built_in">static_cast</span>&lt;_Diff&gt;(<span class="number">0</span>), <span class="built_in">static_cast</span>&lt;_Diff&gt;(_Last - _First), _STD forward&lt;_Ty&gt;(_Val), _Pred);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">_RanIt</span>, <span class="keyword">class</span> <span class="title class_">_Ty</span>, <span class="keyword">class</span> <span class="title class_">_Pr</span>&gt;</span><br><span class="line">_CONSTEXPR20 <span class="type">void</span> _Pop_heap_hole_by_index(_RanIt _First, _Iter_diff_t&lt;_RanIt&gt; _Hole, _Iter_diff_t&lt;_RanIt&gt; _Bottom, _Ty&amp;&amp; _Val, _Pr _Pred)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// percolate _Hole to _Bottom, then push _Val</span></span><br><span class="line">    _STL_INTERNAL_CHECK(_Bottom &gt; <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">using</span> _Diff      = _Iter_diff_t&lt;_RanIt&gt;;</span><br><span class="line">    <span class="type">const</span> _Diff _Top = _Hole;</span><br><span class="line">    _Diff _Idx       = _Hole;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 官方注释 Check whether _Idx can have a child before calculating that child&#x27;s index, since calculating the child&#x27;s index can trigger integer overflows</span></span><br><span class="line"><span class="comment">// 检查 idx 节点是否能有子节点,因为 计算子节点 可能导致 整数溢出</span></span><br><span class="line"><span class="comment">// 在 堆(完全二叉树) 中 有子节点的节点是前一半节点</span></span><br><span class="line">    <span class="type">const</span> _Diff _Max_sequence_non_leaf = (_Bottom - <span class="number">1</span>) &gt;&gt; <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当 idx 节点有子节点,即不为叶子节点时</span></span><br><span class="line">    <span class="keyword">while</span> (_Idx &lt; _Max_sequence_non_leaf) </span><br><span class="line">&#123; </span><br><span class="line"><span class="comment">// 官方注释 : move _Hole down to larger child, 把 hole 设置为 较大的子节点的位置</span></span><br><span class="line">        _Idx = <span class="number">2</span> * _Idx + <span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span> (_DEBUG_LT_PRED(_Pred, *(_First + _Idx), *(_First + (_Idx - <span class="number">1</span>)))) </span><br><span class="line">&#123;</span><br><span class="line">            --_Idx;</span><br><span class="line">        &#125;</span><br><span class="line">        *(_First + _Hole) = _STD <span class="built_in">move</span>(*(_First + _Idx));</span><br><span class="line">        _Hole             = _Idx;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 官方注释 : only child at bottom, move _Hole down to it</span></span><br><span class="line"><span class="comment">// 只有 左子节点 的情况的考虑</span></span><br><span class="line">    <span class="keyword">if</span> (_Idx == _Max_sequence_non_leaf &amp;&amp; _Bottom % <span class="number">2</span> == <span class="number">0</span>) </span><br><span class="line">    &#123; </span><br><span class="line">        *(_First + _Hole) = _STD <span class="built_in">move</span>(*(_First + (_Bottom - <span class="number">1</span>)));</span><br><span class="line">        _Hole             = _Bottom - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 找到了合适的 hole , 把值 push 进去就可以了</span></span><br><span class="line">    _Push_heap_by_index(_First, _Hole, _Top, _STD forward&lt;_Ty&gt;(_Val), _Pred);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><p><strong><code>sort_heap</code></strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">_RanIt</span>&gt;</span><br><span class="line"><span class="function">_CONSTEXPR20 <span class="type">void</span> <span class="title">sort_heap</span><span class="params">(_RanIt _First, _RanIt _Last)</span> </span></span><br><span class="line"><span class="function"></span>&#123; <span class="comment">// order heap by repeatedly popping</span></span><br><span class="line">    <span class="function">_STD <span class="title">sort_heap</span><span class="params">(_First, _Last, less&lt;&gt;&#123;&#125;)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">_RanIt</span>, <span class="keyword">class</span> <span class="title class_">_Pr</span>&gt;</span><br><span class="line"><span class="function">_CONSTEXPR20 <span class="type">void</span> <span class="title">sort_heap</span><span class="params">(_RanIt _First, _RanIt _Last, _Pr _Pred)</span> </span></span><br><span class="line"><span class="function"></span>&#123; <span class="comment">// order heap by repeatedly popping</span></span><br><span class="line">    _Adl_verify_range(_First, _Last);</span><br><span class="line">    <span class="type">const</span> <span class="keyword">auto</span> _UFirst = _Get_unwrapped(_First);</span><br><span class="line">    <span class="type">const</span> <span class="keyword">auto</span> _ULast  = _Get_unwrapped(_Last);</span><br><span class="line"><span class="meta">#<span class="keyword">if</span> _ITERATOR_DEBUG_LEVEL == 2</span></span><br><span class="line">    <span class="type">const</span> <span class="keyword">auto</span> _Counterexample = _Is_heap_until_unchecked(_UFirst, _ULast, _Pass_fn(_Pred));</span><br><span class="line">    <span class="keyword">if</span> (_Counterexample != _ULast) &#123;</span><br><span class="line">        _STL_REPORT_ERROR(<span class="string">&quot;invalid heap in sort_heap()&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">// _ITERATOR_DEBUG_LEVEL == 2</span></span></span><br><span class="line">    _Sort_heap_unchecked(_UFirst, _ULast, _Pass_fn(_Pred));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">_RanIt</span>, <span class="keyword">class</span> <span class="title class_">_Pr</span>&gt;</span><br><span class="line">_CONSTEXPR20 <span class="type">void</span> _Sort_heap_unchecked(_RanIt _First, _RanIt _Last, _Pr _Pred) &#123;</span><br><span class="line">    <span class="comment">// 官方注释 ： order heap by repeatedly popping</span></span><br><span class="line">    <span class="comment">// 通过反复 pop 来实现 堆排序</span></span><br><span class="line">    <span class="keyword">for</span> (; _Last - _First &gt;= <span class="number">2</span>; --_Last) </span><br><span class="line">    &#123;</span><br><span class="line">        _Pop_heap_unchecked(_First, _Last, _Pred);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p><strong><code>make_heap</code></strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">_RanIt</span>&gt;</span><br><span class="line"><span class="function">_CONSTEXPR20 <span class="type">void</span> <span class="title">make_heap</span><span class="params">(_RanIt _First, _RanIt _Last)</span> </span></span><br><span class="line"><span class="function"></span>&#123; <span class="comment">// make [_First, _Last) into a heap</span></span><br><span class="line">    <span class="function">_STD <span class="title">make_heap</span><span class="params">(_First, _Last, less&lt;&gt;&#123;&#125;)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">_RanIt</span>, <span class="keyword">class</span> <span class="title class_">_Pr</span>&gt;</span><br><span class="line"><span class="function">_CONSTEXPR20 <span class="type">void</span> <span class="title">make_heap</span><span class="params">(_RanIt _First, _RanIt _Last, _Pr _Pred)</span> </span></span><br><span class="line"><span class="function"></span>&#123; <span class="comment">// make [_First, _Last) into a heap</span></span><br><span class="line">    _Adl_verify_range(_First, _Last);</span><br><span class="line">    _Make_heap_unchecked(_Get_unwrapped(_First), _Get_unwrapped(_Last), _Pass_fn(_Pred));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">_RanIt</span>, <span class="keyword">class</span> <span class="title class_">_Pr</span>&gt;</span><br><span class="line">_CONSTEXPR20 <span class="type">void</span> _Make_heap_unchecked(_RanIt _First, _RanIt _Last, _Pr _Pred) </span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// make [_First, _Last) into a heap</span></span><br><span class="line">    <span class="keyword">using</span> _Diff   = _Iter_diff_t&lt;_RanIt&gt;;</span><br><span class="line">    _Diff _Bottom = _Last - _First;</span><br><span class="line">    <span class="keyword">for</span> (_Diff _Hole = _Bottom &gt;&gt; <span class="number">1</span>; _Hole &gt; <span class="number">0</span>;) </span><br><span class="line">    &#123;<span class="comment">// shift for codegen</span></span><br><span class="line">        <span class="comment">// reheap top half, bottom to top</span></span><br><span class="line">        <span class="comment">// 官方注释 ： 从 第一个需要调整的子树(即前半节点 逆序)开始,将其头结点下沉,即POP</span></span><br><span class="line">        --_Hole;</span><br><span class="line">        _Iter_value_t&lt;_RanIt&gt; _Val = _STD <span class="built_in">move</span>(*(_First + _Hole));</span><br><span class="line">        _Pop_heap_hole_by_index(_First, _Hole, _Bottom, _STD <span class="built_in">move</span>(_Val), _Pred);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="priority-queue"><a href="#priority-queue" class="headerlink" title="priority_queue"></a>priority_queue</h1><h2 id="priority-queue-类源码"><a href="#priority-queue-类源码" class="headerlink" title="priority_queue 类源码"></a>priority_queue 类源码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 由 container = vector 有 优先队列的底层内存组织是 数组/完全二叉树/堆</span></span><br><span class="line"><span class="comment">// pr = less&lt;&gt;.. 优先队列默认按照 小的优先级高 的比较器组织, 即堆将是一个小根堆</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">_Ty</span>, <span class="keyword">class</span> <span class="title class_">_Container</span> = vector&lt;_Ty&gt;, <span class="keyword">class</span> _Pr = less&lt;<span class="keyword">typename</span> _Container::value_type&gt;&gt;</span><br><span class="line"><span class="keyword">class</span> priority_queue </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">// 型别定义</span></span><br><span class="line">    <span class="keyword">using</span> value_type      = <span class="keyword">typename</span> _Container::value_type;</span><br><span class="line">    <span class="keyword">using</span> reference       = <span class="keyword">typename</span> _Container::reference;</span><br><span class="line">    <span class="keyword">using</span> const_reference = <span class="keyword">typename</span> _Container::const_reference;</span><br><span class="line">    <span class="keyword">using</span> size_type       = <span class="keyword">typename</span> _Container::size_type;</span><br><span class="line">    <span class="keyword">using</span> container_type  = _Container;</span><br><span class="line">    <span class="keyword">using</span> value_compare   = _Pr;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line"><span class="comment">// 成员变量 包括一个 container 和 一个 比较器</span></span><br><span class="line"><span class="comment">// 这里可以看出 优先队列 是基于 容器 实现的, 是一个 适配器</span></span><br><span class="line">    _Container c&#123;&#125;;</span><br><span class="line">    _Pr comp&#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">// 各类构造函数 这里只保留了一个</span></span><br><span class="line"><span class="comment">// 可以看出 优先队列的构造 实际就是 构造堆</span></span><br><span class="line">    <span class="built_in">priority_queue</span>(<span class="type">const</span> _Pr&amp; _Pred, <span class="type">const</span> _Container&amp; _Cont) : <span class="built_in">c</span>(_Cont), <span class="built_in">comp</span>(_Pred) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function">_STD <span class="title">make_heap</span><span class="params">(c.begin(), c.end(), comp)</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 各种操作函数</span></span><br><span class="line"><span class="comment">/// empty</span></span><br><span class="line">    <span class="function">_NODISCARD <span class="type">bool</span> <span class="title">empty</span><span class="params">()</span> <span class="type">const</span> <span class="title">noexcept</span><span class="params">(<span class="keyword">noexcept</span>(c.empty()))</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> c.<span class="built_in">empty</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// size</span></span><br><span class="line">    <span class="function">_NODISCARD size_type <span class="title">size</span><span class="params">()</span> <span class="type">const</span> <span class="title">noexcept</span><span class="params">(<span class="keyword">noexcept</span>(c.size()))</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> c.<span class="built_in">size</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// top = vec.front</span></span><br><span class="line">    <span class="function">_NODISCARD const_reference <span class="title">top</span><span class="params">()</span> <span class="type">const</span> <span class="title">noexcept</span><span class="params">(<span class="keyword">noexcept</span>(c.front()))</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> c.<span class="built_in">front</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// push = vec.push_back + push_heap(vec.begin , vec.end , comp)</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">push</span><span class="params">(<span class="type">const</span> value_type&amp; _Val)</span> </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        c.<span class="built_in">push_back</span>(_Val);</span><br><span class="line">        <span class="function">_STD <span class="title">push_heap</span><span class="params">(c.begin(), c.end(), comp)</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">push</span><span class="params">(value_type&amp;&amp; _Val)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        c.<span class="built_in">push_back</span>(_STD <span class="built_in">move</span>(_Val));</span><br><span class="line">        <span class="function">_STD <span class="title">push_heap</span><span class="params">(c.begin(), c.end(), comp)</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// emplace</span></span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">class</span>... _Valty&gt;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">emplace</span><span class="params">(_Valty&amp;&amp;... _Val)</span> </span>&#123;</span><br><span class="line">        c.<span class="built_in">emplace_back</span>(_STD forward&lt;_Valty&gt;(_Val)...);</span><br><span class="line">        <span class="function">_STD <span class="title">push_heap</span><span class="params">(c.begin(), c.end(), comp)</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// pop = pop_heap + vec.pop_back</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">pop</span><span class="params">()</span> </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="function">_STD <span class="title">pop_heap</span><span class="params">(c.begin(), c.end(), comp)</span></span>;</span><br><span class="line">        c.<span class="built_in">pop_back</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// emplace</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">swap</span><span class="params">(priority_queue&amp; _Right)</span> <span class="title">noexcept</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">        _Is_nothrow_swappable&lt;_Container&gt;::value&amp;&amp; _Is_nothrow_swappable&lt;_Pr&gt;::value)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">        _Swap_adl(c, _Right.c);</span><br><span class="line">        _Swap_adl(comp, _Right.comp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><hr><h1 id="rb-tree"><a href="#rb-tree" class="headerlink" title="rb_tree"></a>rb_tree</h1><h2 id="Tree-node-树结点数据结构-源码"><a href="#Tree-node-树结点数据结构-源码" class="headerlink" title="Tree_node 树结点数据结构 源码"></a>Tree_node 树结点数据结构 源码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">_Value_type</span>, <span class="keyword">class</span> <span class="title class_">_Voidptr</span>&gt;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">_Tree_node</span> </span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">using</span> _Nodeptr   = _Rebind_pointer_t&lt;_Voidptr, _Tree_node&gt;;</span><br><span class="line">    <span class="keyword">using</span> value_type = _Value_type;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 数据成员</span></span><br><span class="line"><span class="comment">// left subtree, or smallest element if head</span></span><br><span class="line"><span class="comment">// 左兄弟结点 如果为头结点的话 最小的的元素结点-最左结点</span></span><br><span class="line">    _Nodeptr _Left; </span><br><span class="line">    <span class="comment">// parent, or root of tree if head</span></span><br><span class="line">    <span class="comment">// 父结点 如果为头结点的话 树根结点</span></span><br><span class="line">    _Nodeptr _Parent; </span><br><span class="line"><span class="comment">// right subtree, or largest element if head</span></span><br><span class="line">    <span class="comment">// 右兄弟结点 如果为头结点的话 最大的元素结点-最右结点</span></span><br><span class="line">    _Nodeptr _Right;</span><br><span class="line">    <span class="comment">// _Red or _Black, _Black if head</span></span><br><span class="line">    <span class="comment">// 结点颜色 如果为头结点的话 必为黑色</span></span><br><span class="line">    <span class="type">char</span> _Color;</span><br><span class="line">    <span class="comment">// true only if head (also nil) node; TRANSITION, should be bool</span></span><br><span class="line">    <span class="comment">// </span></span><br><span class="line">    <span class="type">char</span> _Isnil; </span><br><span class="line">    <span class="comment">// the stored value, unused if head</span></span><br><span class="line">    <span class="comment">// 存储的元素 如果为头结点的话 UNUSED</span></span><br><span class="line">    value_type _Myval;</span><br><span class="line"></span><br><span class="line"><span class="comment">// colors for link to parent</span></span><br><span class="line">    <span class="keyword">enum</span> <span class="title class_">_Redbl</span> </span><br><span class="line">    &#123; </span><br><span class="line">        _Red,</span><br><span class="line">        _Black</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 一些相关的函数</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><hr><h2 id="rb-tree-类源码"><a href="#rb-tree-类源码" class="headerlink" title="rb_tree 类源码"></a>rb_tree 类源码</h2><p><strong>成员变量</strong><br><em>不太好找…..</em></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 通过这个函数结合DEBUG时监视变量可以大概推测</span></span><br><span class="line"><span class="comment">// 成员变量包括 虚拟头结点 _Head 和 树大小 size</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">clear</span><span class="params">()</span> <span class="keyword">noexcept</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        <span class="type">const</span> <span class="keyword">auto</span> _Scary = _Get_scary();</span><br><span class="line">        _Scary-&gt;_Orphan_ptr(<span class="literal">nullptr</span>);</span><br><span class="line">        <span class="keyword">auto</span> _Head = _Scary-&gt;_Myhead;</span><br><span class="line">        _Scary-&gt;_Erase_tree(_Getal(), _Head-&gt;_Parent);</span><br><span class="line">        _Head-&gt;_Parent  = _Head;</span><br><span class="line">        _Head-&gt;_Left    = _Head;</span><br><span class="line">        _Head-&gt;_Right   = _Head;</span><br><span class="line">        _Scary-&gt;_Mysize = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>类源码</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">_Traits</span>&gt;</span><br><span class="line"><span class="comment">// 官方注释 ： ordered red-black tree for map/multimap/set/multiset</span></span><br><span class="line"><span class="comment">// 可以看出 排序的红黑树 是 map/multimap/set/multiset 的底层实现</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">_Tree</span> </span><br><span class="line">&#123; </span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line"><span class="comment">// scary_val 是 tree_val 所以上面关于TREE的数据成员的推测有一定道理</span></span><br><span class="line">    <span class="keyword">using</span> _Scary_val = _Tree_val&lt;<span class="type">conditional_t</span>&lt;_Is_simple_alloc_v&lt;_Alnode&gt;, _Tree_simple_types&lt;value_type&gt;,</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">// 从这里可以找到 迭代器定义</span></span><br><span class="line">    <span class="keyword">using</span> iterator =</span><br><span class="line">        <span class="type">conditional_t</span>&lt;is_same_v&lt;key_type, value_type&gt;, _Tree_const_iterator&lt;_Scary_val&gt;, _Tree_iterator&lt;_Scary_val&gt;&gt;;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// ...构造与析构函数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line"><span class="comment">// emplace 函数</span></span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">class</span>... _Valtys&gt;</span><br><span class="line">    pair&lt;_Nodeptr, <span class="type">bool</span>&gt; _Emplace(_Valtys&amp;&amp;... _Vals) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">using</span> _In_place_key_extractor = <span class="keyword">typename</span> _Traits::<span class="keyword">template</span> _In_place_key_extractor&lt;_Remove_cvref_t&lt;_Valtys&gt;...&gt;;</span><br><span class="line">        <span class="type">const</span> <span class="keyword">auto</span> _Scary = _Get_scary();</span><br><span class="line">        _Tree_find_result&lt;_Nodeptr&gt; _Loc;</span><br><span class="line">        _Nodeptr _Inserted;</span><br><span class="line">        <span class="function"><span class="keyword">if</span> <span class="title">constexpr</span> <span class="params">(!_Multi &amp;&amp; _In_place_key_extractor::_Extractable)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="type">const</span> <span class="keyword">auto</span>&amp; _Keyval = _In_place_key_extractor::_Extract(_Vals...);</span><br><span class="line">            <span class="comment">// 通过 find_lower_bound 来找到插入点</span></span><br><span class="line">            _Loc = _Find_lower_bound(_Keyval);</span><br><span class="line">            <span class="keyword">if</span> (_Lower_bound_duplicate(_Loc._Bound, _Keyval))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> &#123;_Loc._Bound, <span class="literal">false</span>&#125;;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            _Check_grow_by_1();</span><br><span class="line">            _Inserted = _Tree_temp_node&lt;_Alnode&gt;(_Getal(), _Scary-&gt;_Myhead, _STD forward&lt;_Valtys&gt;(_Vals)...)._Release();</span><br><span class="line">            <span class="comment">// nothrow hereafter</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            _Tree_temp_node&lt;_Alnode&gt; _Newnode(_Getal(), _Scary-&gt;_Myhead, _STD forward&lt;_Valtys&gt;(_Vals)...);</span><br><span class="line">            <span class="type">const</span> <span class="keyword">auto</span>&amp; _Keyval = _Traits::_Kfn(_Newnode._Ptr-&gt;_Myval);</span><br><span class="line">            <span class="comment">// 对 multi 属性做判断</span></span><br><span class="line">            <span class="comment">// multi -- 插入点为 _Find_upper_bound(_Keyval) -- 所以在 multi 的容器中,相同KEY值的元素按先后顺序排列</span></span><br><span class="line">            <span class="comment">// not -- _Find_lower_bound(_Keyval)</span></span><br><span class="line">            <span class="function"><span class="keyword">if</span> <span class="title">constexpr</span> <span class="params">(_Multi)</span></span></span><br><span class="line"><span class="function">            </span>&#123; <span class="comment">// duplicate check if unique</span></span><br><span class="line">                _Loc = _Find_upper_bound(_Keyval);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                _Loc = _Find_lower_bound(_Keyval);</span><br><span class="line">                <span class="keyword">if</span> (_Lower_bound_duplicate(_Loc._Bound, _Keyval)) &#123;</span><br><span class="line">                    <span class="keyword">return</span> &#123;_Loc._Bound, <span class="literal">false</span>&#125;;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            _Check_grow_by_1();</span><br><span class="line">            <span class="comment">// nothrow hereafter</span></span><br><span class="line">            _Inserted = _Newnode._Release();</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">// 最后调用 insert_node 函数插入</span></span><br><span class="line">        <span class="keyword">return</span> &#123;_Scary-&gt;_Insert_node(_Loc._Location, _Inserted), <span class="literal">true</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// begin 函数 </span></span><br><span class="line"><span class="comment">// 返回值为 head-&gt;left</span></span><br><span class="line"><span class="comment">// ? 返回查看treenode定义 当node为头结点的时候left就是最小元素的结点 也就是说 begin指向的是最小的元素</span></span><br><span class="line">    <span class="function">_NODISCARD iterator <span class="title">begin</span><span class="params">()</span> <span class="keyword">noexcept</span> </span>&#123;</span><br><span class="line">        <span class="type">const</span> <span class="keyword">auto</span> _Scary = _Get_scary();</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">iterator</span>(_Scary-&gt;_Myhead-&gt;_Left, _Scary);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// end 函数</span></span><br><span class="line"><span class="comment">// 返回值为 myhead</span></span><br><span class="line"><span class="comment">// ? end的指向是最后一个元素的后一位,参考treenode迭代器定义</span></span><br><span class="line">    <span class="function">_NODISCARD iterator <span class="title">end</span><span class="params">()</span> <span class="keyword">noexcept</span> </span>&#123;</span><br><span class="line">        <span class="type">const</span> <span class="keyword">auto</span> _Scary = _Get_scary();</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">iterator</span>(_Scary-&gt;_Myhead, _Scary);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// rbegin and rend</span></span><br><span class="line">    <span class="function">_NODISCARD reverse_iterator <span class="title">rbegin</span><span class="params">()</span> <span class="keyword">noexcept</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">reverse_iterator</span>(<span class="built_in">end</span>());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">_NODISCARD reverse_iterator <span class="title">rend</span><span class="params">()</span> <span class="keyword">noexcept</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">reverse_iterator</span>(<span class="built_in">begin</span>());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// cbegin and cend</span></span><br><span class="line">    <span class="function">_NODISCARD const_iterator <span class="title">cbegin</span><span class="params">()</span> <span class="type">const</span> <span class="keyword">noexcept</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">begin</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">_NODISCARD const_iterator <span class="title">cend</span><span class="params">()</span> <span class="type">const</span> <span class="keyword">noexcept</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">end</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// crbegin and crend</span></span><br><span class="line">    <span class="function">_NODISCARD const_reverse_iterator <span class="title">crbegin</span><span class="params">()</span> <span class="type">const</span> <span class="keyword">noexcept</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">rbegin</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">_NODISCARD const_reverse_iterator <span class="title">crend</span><span class="params">()</span> <span class="type">const</span> <span class="keyword">noexcept</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">rend</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// size 函数</span></span><br><span class="line">    <span class="function">_NODISCARD size_type <span class="title">size</span><span class="params">()</span> <span class="type">const</span> <span class="keyword">noexcept</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> _Get_scary()-&gt;_Mysize;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// empty 函数</span></span><br><span class="line">    <span class="function">_NODISCARD <span class="type">bool</span> <span class="title">empty</span><span class="params">()</span> <span class="type">const</span> <span class="keyword">noexcept</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> _Get_scary()-&gt;_Mysize == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// get_allocator 可以获取到内存分配器?</span></span><br><span class="line">    <span class="function">_NODISCARD allocator_type <span class="title">get_allocator</span><span class="params">()</span> <span class="type">const</span> <span class="keyword">noexcept</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">static_cast</span>&lt;allocator_type&gt;(_Getal());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 键值比较函数</span></span><br><span class="line">    <span class="function">_NODISCARD key_compare <span class="title">key_comp</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> _Getcomp();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">_NODISCARD value_compare <span class="title">value_comp</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">value_compare</span>(<span class="built_in">key_comp</span>());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// insert 函数</span></span><br><span class="line"><span class="comment">// 这里可以清晰的看到返回值为 pair&lt;iterator, bool&gt;</span></span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="type">bool</span> _Multi2 = _Multi, <span class="type">enable_if_t</span>&lt;!_Multi2, <span class="type">int</span>&gt; = <span class="number">0</span>&gt;</span><br><span class="line">    pair&lt;iterator, <span class="type">bool</span>&gt; <span class="built_in">insert</span>(<span class="type">const</span> value_type&amp; _Val)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">const</span> <span class="keyword">auto</span> _Result = _Emplace(_Val);</span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="built_in">iterator</span>(_Result.first, _Get_scary()), _Result.second&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="comment">// clear 函数 由此可以观察 scary 的变量</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">clear</span><span class="params">()</span> <span class="keyword">noexcept</span> </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="type">const</span> <span class="keyword">auto</span> _Scary = _Get_scary();</span><br><span class="line">        _Scary-&gt;_Orphan_ptr(<span class="literal">nullptr</span>);</span><br><span class="line">        <span class="keyword">auto</span> _Head = _Scary-&gt;_Myhead;</span><br><span class="line">        _Scary-&gt;_Erase_tree(_Getal(), _Head-&gt;_Parent);</span><br><span class="line">        _Head-&gt;_Parent  = _Head;</span><br><span class="line">        _Head-&gt;_Left    = _Head;</span><br><span class="line">        _Head-&gt;_Right   = _Head;</span><br><span class="line">        _Scary-&gt;_Mysize = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="comment">// find 函数</span></span><br><span class="line"><span class="comment">// 可以看到是通过 find_lower_bound 来找的</span></span><br><span class="line"><span class="comment">// 没找到返回 end</span></span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">_Other</span>&gt;</span><br><span class="line">    _NODISCARD _Nodeptr _Find(<span class="type">const</span> _Other&amp; _Keyval) <span class="type">const</span> </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">const</span> _Tree_find_result&lt;_Nodeptr&gt; _Loc = _Find_lower_bound(_Keyval);</span><br><span class="line">        <span class="keyword">if</span> (_Lower_bound_duplicate(_Loc._Bound, _Keyval))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> _Loc._Bound;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">// 没找到 返回 end</span></span><br><span class="line">        <span class="keyword">return</span> _Get_scary()-&gt;_Myhead;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// contains 函数</span></span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">_Other</span>, <span class="keyword">class</span> <span class="title class_">_Mycomp</span> = key_compare, <span class="keyword">class</span> = <span class="keyword">typename</span> _Mycomp::is_transparent&gt;</span><br><span class="line">    _NODISCARD <span class="type">bool</span> <span class="built_in">contains</span>(<span class="type">const</span> _Other&amp; _Keyval) <span class="type">const</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> _Lower_bound_duplicate(_Find_lower_bound(_Keyval)._Bound, _Keyval);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">// _HAS_CXX20</span></span></span><br><span class="line"></span><br><span class="line">    <span class="function">_NODISCARD size_type <span class="title">count</span><span class="params">(<span class="type">const</span> key_type&amp; _Keyval)</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">if</span> <span class="title">constexpr</span> <span class="params">(_Multi)</span> </span>&#123;</span><br><span class="line">            <span class="type">const</span> <span class="keyword">auto</span> _Ans = _Eqrange(_Keyval);</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">static_cast</span>&lt;size_type&gt;(_STD <span class="built_in">distance</span>(</span><br><span class="line">                _Unchecked_const_iterator(_Ans.first, <span class="literal">nullptr</span>), _Unchecked_const_iterator(_Ans.second, <span class="literal">nullptr</span>)));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> _Lower_bound_duplicate(_Find_lower_bound(_Keyval)._Bound, _Keyval);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">_Other</span>, <span class="keyword">class</span> <span class="title class_">_Mycomp</span> = key_compare, <span class="keyword">class</span> = <span class="keyword">typename</span> _Mycomp::is_transparent&gt;</span><br><span class="line">    _NODISCARD size_type <span class="built_in">count</span>(<span class="type">const</span> _Other&amp; _Keyval) <span class="type">const</span> &#123;</span><br><span class="line">        <span class="type">const</span> <span class="keyword">auto</span> _Ans = _Eqrange(_Keyval);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">static_cast</span>&lt;size_type&gt;(_STD <span class="built_in">distance</span>(</span><br><span class="line">            _Unchecked_const_iterator(_Ans.first, <span class="literal">nullptr</span>), _Unchecked_const_iterator(_Ans.second, <span class="literal">nullptr</span>)));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// 大量的函数做了二次封装</span></span><br><span class="line"><span class="comment">// lower_bound函数</span></span><br><span class="line">    <span class="function">_NODISCARD iterator <span class="title">lower_bound</span><span class="params">(<span class="type">const</span> key_type&amp; _Keyval)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">iterator</span>(_Find_lower_bound(_Keyval)._Bound, _Get_scary());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// upper_bound</span></span><br><span class="line">    <span class="function">_NODISCARD iterator <span class="title">upper_bound</span><span class="params">(<span class="type">const</span> key_type&amp; _Keyval)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">iterator</span>(_Find_upper_bound(_Keyval)._Bound, _Get_scary());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// equal_range</span></span><br><span class="line">    <span class="function">_NODISCARD pair&lt;iterator, iterator&gt; <span class="title">equal_range</span><span class="params">(<span class="type">const</span> key_type&amp; _Keyval)</span> </span>&#123;</span><br><span class="line">        <span class="type">const</span> <span class="keyword">auto</span> _Result = _Eqrange(_Keyval);</span><br><span class="line">        <span class="type">const</span> <span class="keyword">auto</span> _Scary  = _Get_scary();</span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="built_in">iterator</span>(_Result.first, _Scary), <span class="built_in">iterator</span>(_Result.second, _Scary)&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// swap</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">swap</span><span class="params">(_Tree&amp; _Right)</span> <span class="title">noexcept</span><span class="params">(_Is_nothrow_swappable&lt;key_compare&gt;::value)</span> <span class="comment">/* strengthened */</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span> != _STD <span class="built_in">addressof</span>(_Right)) &#123;</span><br><span class="line">            _Pocs(_Getal(), _Right._Getal());</span><br><span class="line">            _Swap_val_excluding_comp(_Right);</span><br><span class="line">            _Swap_adl(_Getcomp(), _Right._Getcomp());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">////</span></span><br><span class="line"><span class="comment">// 从这里开始 是 前面的做了二次封装的功能函数的具体实现 </span></span><br><span class="line"><span class="comment">////</span></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">_Keyty</span>&gt;</span><br><span class="line">    _Tree_find_hint_result&lt;_Nodeptr&gt; _Find_hint(<span class="type">const</span> _Nodeptr _Hint, <span class="type">const</span> _Keyty&amp; _Keyval) <span class="type">const</span> </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">const</span> <span class="keyword">auto</span>&amp; _Comp = _Getcomp();</span><br><span class="line">        <span class="type">const</span> <span class="keyword">auto</span> _Head  = _Get_scary()-&gt;_Myhead;</span><br><span class="line">        <span class="function"><span class="keyword">if</span> <span class="title">constexpr</span> <span class="params">(_Multi)</span> </span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">        <span class="comment">// 官方注释 insert even if duplicate</span></span><br><span class="line">        <span class="comment">// 可见 对于容器是否允许重复元素 RBTREE 是根据 Multi 变量来感知的</span></span><br><span class="line">            <span class="keyword">if</span> (_Hint-&gt;_Isnil) &#123;</span><br><span class="line">                <span class="comment">// insert at end if greater than or equal to last element</span></span><br><span class="line">                <span class="keyword">if</span> (_Head-&gt;_Parent-&gt;_Isnil || !_DEBUG_LT_PRED(_Comp, _Keyval, _Traits::_Kfn(_Head-&gt;_Right-&gt;_Myval))) &#123;</span><br><span class="line">                    <span class="keyword">return</span> &#123;&#123;_Head-&gt;_Right, _Tree_child::_Right&#125;, <span class="literal">false</span>&#125;;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// _Hint is end(); it must be closer to the end of equivalents</span></span><br><span class="line">                <span class="keyword">return</span> &#123;_Find_upper_bound(_Keyval)._Location, <span class="literal">false</span>&#125;;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (_Hint == _Head-&gt;_Left) &#123;</span><br><span class="line">                <span class="comment">// insert at beginning if less than or equal to first element</span></span><br><span class="line">                <span class="keyword">if</span> (!_DEBUG_LT_PRED(_Comp, _Traits::_Kfn(_Hint-&gt;_Myval), _Keyval)) &#123;</span><br><span class="line">                    <span class="keyword">return</span> &#123;&#123;_Hint, _Tree_child::_Left&#125;, <span class="literal">false</span>&#125;;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// _Hint is begin(); it must be closer to the beginning of equivalents</span></span><br><span class="line">                <span class="keyword">return</span> &#123;_Find_lower_bound(_Keyval)._Location, <span class="literal">false</span>&#125;;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (!_DEBUG_LT_PRED(_Comp, _Traits::_Kfn(_Hint-&gt;_Myval), _Keyval)) &#123;</span><br><span class="line">                <span class="comment">// _Val &lt;= *_Hint</span></span><br><span class="line">                <span class="type">const</span> <span class="keyword">auto</span> _Prev = (--(_Unchecked_const_iterator(_Hint, <span class="literal">nullptr</span>)))._Ptr;</span><br><span class="line">                <span class="keyword">if</span> (!_DEBUG_LT_PRED(_Comp, _Keyval, _Traits::_Kfn(_Prev-&gt;_Myval))) &#123;</span><br><span class="line">                    <span class="comment">// _Val &lt;= *_Hint and _Val &gt;= *prev(_Hint); insert here</span></span><br><span class="line">                    <span class="keyword">if</span> (_Prev-&gt;_Right-&gt;_Isnil) &#123;</span><br><span class="line">                        <span class="keyword">return</span> &#123;&#123;_Prev, _Tree_child::_Right&#125;, <span class="literal">false</span>&#125;;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="keyword">return</span> &#123;&#123;_Hint, _Tree_child::_Left&#125;, <span class="literal">false</span>&#125;;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// _Val goes before *_Hint; _Hint must be closer to the end of equivalents</span></span><br><span class="line">                <span class="keyword">return</span> &#123;_Find_upper_bound(_Keyval)._Location, <span class="literal">false</span>&#125;;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// _Val goes after *_Hint; _Hint must be closer to the beginning of equivalents</span></span><br><span class="line">            <span class="keyword">return</span> &#123;_Find_lower_bound(_Keyval)._Location, <span class="literal">false</span>&#125;;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123; <span class="comment">// insert only if unique</span></span><br><span class="line">            <span class="keyword">if</span> (_Hint-&gt;_Isnil) &#123; <span class="comment">// insert at end if after last element</span></span><br><span class="line">                <span class="comment">// insert at end if greater than last element</span></span><br><span class="line">                <span class="keyword">if</span> (_Head-&gt;_Parent-&gt;_Isnil || _DEBUG_LT_PRED(_Comp, _Traits::_Kfn(_Head-&gt;_Right-&gt;_Myval), _Keyval)) &#123;</span><br><span class="line">                    <span class="keyword">return</span> &#123;&#123;_Head-&gt;_Right, _Tree_child::_Right&#125;, <span class="literal">false</span>&#125;;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (_Hint == _Head-&gt;_Left) &#123;</span><br><span class="line">                <span class="comment">// insert at beginning if less than first element</span></span><br><span class="line">                <span class="keyword">if</span> (_DEBUG_LT_PRED(_Comp, _Keyval, _Traits::_Kfn(_Hint-&gt;_Myval))) &#123;</span><br><span class="line">                    <span class="keyword">return</span> &#123;&#123;_Hint, _Tree_child::_Left&#125;, <span class="literal">false</span>&#125;;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (_DEBUG_LT_PRED(_Comp, _Keyval, _Traits::_Kfn(_Hint-&gt;_Myval))) &#123;</span><br><span class="line">                <span class="comment">// _Val &lt; *_Hint</span></span><br><span class="line">                <span class="type">const</span> <span class="keyword">auto</span> _Prev = (--(_Unchecked_const_iterator(_Hint, <span class="literal">nullptr</span>)))._Ptr;</span><br><span class="line">                <span class="keyword">if</span> (_DEBUG_LT_PRED(_Comp, _Traits::_Kfn(_Prev-&gt;_Myval), _Keyval)) &#123;</span><br><span class="line">                    <span class="comment">// _Val &lt; *_Hint and _Val &gt; *prev(_Hint); insert here</span></span><br><span class="line">                    <span class="keyword">if</span> (_Prev-&gt;_Right-&gt;_Isnil) &#123;</span><br><span class="line">                        <span class="keyword">return</span> &#123;&#123;_Prev, _Tree_child::_Right&#125;, <span class="literal">false</span>&#125;;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="keyword">return</span> &#123;&#123;_Hint, _Tree_child::_Left&#125;, <span class="literal">false</span>&#125;;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (_DEBUG_LT_PRED(_Comp, _Traits::_Kfn(_Hint-&gt;_Myval), _Keyval)) &#123;</span><br><span class="line">                <span class="comment">// _Val &gt; *_Hint</span></span><br><span class="line">                <span class="type">const</span> <span class="keyword">auto</span> _Next = (++(_Unchecked_const_iterator(_Hint, <span class="literal">nullptr</span>)))._Ptr;</span><br><span class="line">                <span class="keyword">if</span> (_Next-&gt;_Isnil || _DEBUG_LT_PRED(_Comp, _Keyval, _Traits::_Kfn(_Next-&gt;_Myval))) &#123;</span><br><span class="line">                    <span class="comment">// _Val &gt; *_Hint and _Val &lt; *next(_Hint); insert here</span></span><br><span class="line">                    <span class="keyword">if</span> (_Hint-&gt;_Right-&gt;_Isnil) &#123;</span><br><span class="line">                        <span class="keyword">return</span> &#123;&#123;_Hint, _Tree_child::_Right&#125;, <span class="literal">false</span>&#125;;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">return</span> &#123;&#123;_Next, _Tree_child::_Left&#125;, <span class="literal">false</span>&#125;;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// _Val is equivalent to *_Hint; don&#x27;t insert</span></span><br><span class="line">                <span class="keyword">return</span> &#123;&#123;_Hint, _Tree_child::_Right&#125;, <span class="literal">true</span>&#125;;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="type">const</span> <span class="keyword">auto</span> _Loc = _Find_lower_bound(_Keyval);</span><br><span class="line">            <span class="keyword">if</span> (_Lower_bound_duplicate(_Loc._Bound, _Keyval)) &#123;</span><br><span class="line">                <span class="keyword">return</span> &#123;&#123;_Loc._Bound, _Tree_child::_Unused&#125;, <span class="literal">true</span>&#125;;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> &#123;_Loc._Location, <span class="literal">false</span>&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    template &lt;class _Nodeptr&gt;</span></span><br><span class="line"><span class="comment">struct _Tree_find_result </span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">    _Tree_id&lt;_Nodeptr&gt; _Location;</span></span><br><span class="line"><span class="comment">    _Nodeptr _Bound;</span></span><br><span class="line"><span class="comment">&#125;;</span></span><br><span class="line"><span class="comment">template &lt;class _Nodeptr&gt;</span></span><br><span class="line"><span class="comment">struct _Tree_id &#123;</span></span><br><span class="line"><span class="comment">    _Nodeptr _Parent; // the leaf node under which a new node should be inserted</span></span><br><span class="line"><span class="comment">    _Tree_child _Child;</span></span><br><span class="line"><span class="comment">&#125;;</span></span><br><span class="line"><span class="comment">enum class _Tree_child</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">    _Right, // perf note: compare with _Right rather than _Left where possible for comparison with zero</span></span><br><span class="line"><span class="comment">    _Left,</span></span><br><span class="line"><span class="comment">    _Unused // indicates that tree child should never be used for insertion</span></span><br><span class="line"><span class="comment">&#125;;</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"><span class="comment">// find_upper_bound 寻找上边界 即 &gt;val 的第一个节点</span></span><br><span class="line">    <span class="comment">// 由上数据结构有 返回值_Tree_find_result&lt;_Nodeptr&gt; 包括 位置(是谁的子节点以及是左/右/NULL节点) 与 边界 </span></span><br><span class="line">    <span class="comment">// 结合 红黑树 的特性 这将是一个发生在树上的 二分定界问题</span></span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">_Keyty</span>&gt;</span><br><span class="line">    _Tree_find_result&lt;_Nodeptr&gt; _Find_upper_bound(<span class="type">const</span> _Keyty&amp; _Keyval) <span class="type">const</span> </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">const</span> <span class="keyword">auto</span> _Scary = _Get_scary();</span><br><span class="line">        _Tree_find_result&lt;_Nodeptr&gt; _Result&#123;</span><br><span class="line">            &#123;_Scary-&gt;_Myhead-&gt;_Parent, _Tree_child::_Right&#125;,</span><br><span class="line">            _Scary-&gt;_Myhead&#125;;</span><br><span class="line">            _Nodeptr _Trynode = _Result._Location._Parent;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>画点图 有点难理解</p><ol><li>res.loc.parent &#x3D; myhead-&gt;parent  &#x3D; root ; res 的父节点是 root 节点</li><li>res.loc.childtype &#x3D; right; res 是 root 的右孩子节点</li><li>res.bound &#x3D; myhead; 当前边界是 myhead<pre class="mermaid">graphmyhead((myhead bound))root((root trynode))r((r res))l((l))myhead --> rootroot --> lroot -->r</pre><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br></pre></td><td class="code"><pre><span class="line">        <span class="keyword">while</span> (!_Trynode-&gt;_Isnil) </span><br><span class="line">        &#123;</span><br><span class="line">            _Result._Location._Parent = _Trynode;</span><br><span class="line">            <span class="comment">// 如果 parent.val &gt; val , 那么 bound = parent , trynode = left</span></span><br><span class="line">            <span class="keyword">if</span> (_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Trynode-&gt;_Myval)))</span><br><span class="line">            &#123;</span><br><span class="line">                _Result._Location._Child = _Tree_child::_Left;</span><br><span class="line">                _Result._Bound           = _Trynode;</span><br><span class="line">                _Trynode                 = _Trynode-&gt;_Left;</span><br><span class="line">            &#125; </span><br><span class="line">            <span class="keyword">else</span> </span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// 同理 如果 parent.val &lt;= val, 那么 bound 不变, trynode = right</span></span><br><span class="line">                _Result._Location._Child = _Tree_child::_Right;</span><br><span class="line">                _Trynode                 = _Trynode-&gt;_Right;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> _Result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">_Keyty</span>&gt;</span><br><span class="line">    <span class="type">bool</span> _Lower_bound_duplicate(<span class="type">const</span> _Nodeptr _Bound, <span class="type">const</span> _Keyty&amp; _Keyval) <span class="type">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> !_Bound-&gt;_Isnil &amp;&amp; !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound-&gt;_Myval));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// find_lower_bound 寻找下边界</span></span><br><span class="line">    <span class="comment">// 基本同 find_upper_bound , 只是在 res.bound 的改变时机上有所不同</span></span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">_Keyty</span>&gt;</span><br><span class="line">    _Tree_find_result&lt;_Nodeptr&gt; _Find_lower_bound(<span class="type">const</span> _Keyty&amp; _Keyval) <span class="type">const</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">const</span> <span class="keyword">auto</span> _Scary = _Get_scary();</span><br><span class="line">        _Tree_find_result&lt;_Nodeptr&gt; _Result&#123;</span><br><span class="line">            &#123;_Scary-&gt;_Myhead-&gt;_Parent, _Tree_child::_Right&#125;,</span><br><span class="line">            _Scary-&gt;_Myhead&#125;;</span><br><span class="line">        </span><br><span class="line">        _Nodeptr _Trynode = _Result._Location._Parent;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> (!_Trynode-&gt;_Isnil) </span><br><span class="line">        &#123;</span><br><span class="line">            _Result._Location._Parent = _Trynode;</span><br><span class="line">            <span class="keyword">if</span> (_DEBUG_LT_PRED(_Getcomp(), _Traits::_Kfn(_Trynode-&gt;_Myval), _Keyval)) </span><br><span class="line">            &#123;</span><br><span class="line">                _Result._Location._Child = _Tree_child::_Right;</span><br><span class="line">                _Trynode                 = _Trynode-&gt;_Right;</span><br><span class="line">            &#125; </span><br><span class="line">            <span class="keyword">else</span> </span><br><span class="line">            &#123;</span><br><span class="line">                _Result._Location._Child = _Tree_child::_Left;</span><br><span class="line">                _Result._Bound           = _Trynode;</span><br><span class="line">                _Trynode                 = _Trynode-&gt;_Left;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> _Result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// eqrange 函数</span></span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">_Other</span>&gt;</span><br><span class="line">    pair&lt;_Nodeptr, _Nodeptr&gt; _Eqrange(<span class="type">const</span> _Other&amp; _Keyval) <span class="function"><span class="type">const</span></span></span><br><span class="line"><span class="function">        <span class="title">noexcept</span><span class="params">(_Nothrow_compare&lt;key_compare, key_type, _Other&gt;&amp;&amp; _Nothrow_compare&lt;key_compare, _Other, key_type&gt;)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        <span class="comment">// find range of nodes equivalent to _Keyval</span></span><br><span class="line">        <span class="type">const</span> <span class="keyword">auto</span> _Scary = _Get_scary();</span><br><span class="line">        <span class="type">const</span> <span class="keyword">auto</span>&amp; _Comp = _Getcomp();</span><br><span class="line">        _Nodeptr _Pnode   = _Scary-&gt;_Myhead-&gt;_Parent;</span><br><span class="line">        _Nodeptr _Lonode  = _Scary-&gt;_Myhead; <span class="comment">// end() if search fails</span></span><br><span class="line">        _Nodeptr _Hinode  = _Scary-&gt;_Myhead; <span class="comment">// end() if search fails</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (!_Pnode-&gt;_Isnil)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">const</span> <span class="keyword">auto</span>&amp; _Nodekey = _Traits::_Kfn(_Pnode-&gt;_Myval);</span><br><span class="line">            <span class="keyword">if</span> (_DEBUG_LT_PRED(_Comp, _Nodekey, _Keyval))</span><br><span class="line">            &#123;</span><br><span class="line">                _Pnode = _Pnode-&gt;_Right; <span class="comment">// descend right subtree</span></span><br><span class="line">            &#125; </span><br><span class="line">            <span class="keyword">else</span> </span><br><span class="line">            &#123; <span class="comment">// _Pnode not less than _Keyval, remember it</span></span><br><span class="line">                <span class="keyword">if</span> (_Hinode-&gt;_Isnil &amp;&amp; _DEBUG_LT_PRED(_Comp, _Keyval, _Nodekey))</span><br><span class="line">                &#123;</span><br><span class="line">                    _Hinode = _Pnode; <span class="comment">// _Pnode greater, remember it</span></span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                _Lonode = _Pnode;</span><br><span class="line">                _Pnode  = _Pnode-&gt;_Left; <span class="comment">// descend left subtree</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        _Pnode = _Hinode-&gt;_Isnil ? _Scary-&gt;_Myhead-&gt;_Parent : _Hinode-&gt;_Left; <span class="comment">// continue scan for upper bound</span></span><br><span class="line">        <span class="keyword">while</span> (!_Pnode-&gt;_Isnil) </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Pnode-&gt;_Myval))) </span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// _Pnode greater than _Keyval, remember it</span></span><br><span class="line">                _Hinode = _Pnode;</span><br><span class="line">                _Pnode  = _Pnode-&gt;_Left; <span class="comment">// descend left subtree</span></span><br><span class="line">            &#125; </span><br><span class="line">            <span class="keyword">else</span> </span><br><span class="line">            &#123;</span><br><span class="line">                _Pnode = _Pnode-&gt;_Right; <span class="comment">// descend right subtree</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> &#123;_Lonode, _Hinode&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="comment">// insert 函数</span></span><br><span class="line">    <span class="function"><span class="keyword">auto</span> <span class="title">insert</span><span class="params">(node_type&amp;&amp; _Handle)</span> </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (_Handle.<span class="built_in">empty</span>()) </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="function"><span class="keyword">if</span> <span class="title">constexpr</span> <span class="params">(_Multi)</span> </span></span><br><span class="line"><span class="function">            </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">end</span>();</span><br><span class="line">            &#125; </span><br><span class="line">            <span class="keyword">else</span> </span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> _Insert_return_type&lt;iterator, node_type&gt;&#123;<span class="built_in">end</span>(), <span class="literal">false</span>, &#123;&#125;&#125;;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        _Check_node_allocator(_Handle);</span><br><span class="line">        <span class="type">const</span> <span class="keyword">auto</span> _Scary        = _Get_scary();</span><br><span class="line">        <span class="type">const</span> <span class="keyword">auto</span> _Attempt_node = _Handle._Getptr();</span><br><span class="line">        <span class="type">const</span> <span class="keyword">auto</span>&amp; _Keyval      = _Traits::_Kfn(_Attempt_node-&gt;_Myval);</span><br><span class="line">        _Tree_find_result&lt;_Nodeptr&gt; _Loc;</span><br><span class="line">        <span class="function"><span class="keyword">if</span> <span class="title">constexpr</span> <span class="params">(_Multi)</span> </span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            _Loc = _Find_upper_bound(_Keyval);</span><br><span class="line">        &#125; <span class="keyword">else</span> </span><br><span class="line">        &#123;</span><br><span class="line">            _Loc = _Find_lower_bound(_Keyval);</span><br><span class="line">            <span class="keyword">if</span> (_Lower_bound_duplicate(_Loc._Bound, _Keyval)) </span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> _Insert_return_type&lt;iterator, node_type&gt;&#123;</span><br><span class="line">                    <span class="built_in">iterator</span>(_Loc._Bound, _Scary), <span class="literal">false</span>, _STD <span class="built_in">move</span>(_Handle)&#125;;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        _Check_grow_by_1();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// nothrow hereafter</span></span><br><span class="line"></span><br><span class="line">        _Attempt_node-&gt;_Left = _Scary-&gt;_Myhead;</span><br><span class="line">        <span class="comment">// _Attempt_node-&gt;_Parent handled in _Insert_node</span></span><br><span class="line">        _Attempt_node-&gt;_Right = _Scary-&gt;_Myhead;</span><br><span class="line">        _Attempt_node-&gt;_Color = _Red;</span><br><span class="line"></span><br><span class="line">        <span class="type">const</span> <span class="keyword">auto</span> _Inserted = _Scary-&gt;_Insert_node(_Loc._Location, _Handle._Release());</span><br><span class="line">        <span class="function"><span class="keyword">if</span> <span class="title">constexpr</span> <span class="params">(_Multi)</span> </span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">iterator</span>(_Inserted, _Scary);</span><br><span class="line">        &#125; <span class="keyword">else</span> </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> _Insert_return_type&lt;iterator, node_type&gt;&#123;<span class="built_in">iterator</span>(_Inserted, _Scary), <span class="literal">true</span>, _STD <span class="built_in">move</span>(_Handle)&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">iterator <span class="title">insert</span><span class="params">(<span class="type">const</span> const_iterator _Hint, node_type&amp;&amp; _Handle)</span> </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="type">const</span> <span class="keyword">auto</span> _Scary = _Get_scary();</span><br><span class="line"><span class="meta">#<span class="keyword">if</span> _ITERATOR_DEBUG_LEVEL == 2</span></span><br><span class="line">        _STL_VERIFY(_Hint._Getcont() == _Scary, <span class="string">&quot;map/set insert iterator outside range&quot;</span>);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">// _ITERATOR_DEBUG_LEVEL == 2</span></span></span><br><span class="line">        <span class="keyword">if</span> (_Handle.<span class="built_in">empty</span>()) </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">end</span>();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        _Check_node_allocator(_Handle);</span><br><span class="line">        <span class="type">const</span> <span class="keyword">auto</span> _Attempt_node = _Handle._Getptr();</span><br><span class="line">        <span class="type">const</span> <span class="keyword">auto</span>&amp; _Keyval      = _Traits::_Kfn(_Attempt_node-&gt;_Myval);</span><br><span class="line">        <span class="type">const</span> <span class="keyword">auto</span> _Loc          = _Find_hint(_Hint._Ptr, _Keyval);</span><br><span class="line">        <span class="keyword">if</span> (_Loc._Duplicate) </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">iterator</span>(_Loc._Location._Parent, _Scary);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        _Check_grow_by_1();</span><br><span class="line"></span><br><span class="line">        _Attempt_node-&gt;_Left = _Scary-&gt;_Myhead;</span><br><span class="line">        <span class="comment">// _Attempt_node-&gt;_Parent handled in _Insert_node</span></span><br><span class="line">        _Attempt_node-&gt;_Right = _Scary-&gt;_Myhead;</span><br><span class="line">        _Attempt_node-&gt;_Color = _Red;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">iterator</span>(_Scary-&gt;_Insert_node(_Loc._Location, _Handle._Release()), _Scary);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol><hr><h1 id="set"><a href="#set" class="headerlink" title="set"></a>set</h1><h2 id="set-类源码"><a href="#set-类源码" class="headerlink" title="set 类源码"></a>set 类源码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// pr = less 默认为从小到大排序</span></span><br><span class="line"><span class="comment">// : public _tree 基于 红黑树实现 </span></span><br><span class="line"><span class="comment">// Tset_traits&lt;_Kty, _Pr, _Alloc, false&gt; ==&gt; _Mfl = flase =&gt; 不允许重复元素</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">tset_traits : </span></span><br><span class="line"><span class="comment">template &lt;class _Kty, // key/value type</span></span><br><span class="line"><span class="comment">    class _Pr, // comparator predicate type</span></span><br><span class="line"><span class="comment">    class _Alloc, // actual allocator type (should be value allocator)</span></span><br><span class="line"><span class="comment">    bool _Mfl&gt; // true if multiple equivalent keys are permitted</span></span><br><span class="line"><span class="comment">class _Tset_traits</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">_Kty</span>, <span class="keyword">class</span> <span class="title class_">_Pr</span> = less&lt;_Kty&gt;, <span class="keyword">class</span> _Alloc = allocator&lt;_Kty&gt;&gt;</span><br><span class="line"><span class="comment">// 官方注释 ordered red-black tree of key values, unique keys</span></span><br><span class="line"><span class="comment">// set 是 排序的红黑树 且只有 key 值</span></span><br><span class="line"><span class="keyword">class</span> set : <span class="keyword">public</span> _Tree&lt;_Tset_traits&lt;_Kty, _Pr, _Alloc, <span class="literal">false</span>&gt;&gt;</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span> :</span><br><span class="line"><span class="comment">// ... 一些型别定义</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 可以看到 set 的构造就是利用了 基类rb_tree 的 insert 的函数</span></span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">class</span> _Iter&gt;</span><br><span class="line">    <span class="built_in">set</span>(_Iter _First, _Iter _Last) : _Mybase(<span class="built_in">key_compare</span>()) &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;<span class="built_in">insert</span>(_First, _Last);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">using</span> _Mybase::_Unchecked_begin;</span><br><span class="line">    <span class="keyword">using</span> _Mybase::_Unchecked_end;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这里有个奇怪的发现？ set : rb_tree 是继承的 stack/queue : deque 是成员变量的 priority_queue : heap 是成员函数的</span><br></pre></td></tr></table></figure><hr><h1 id="multiset"><a href="#multiset" class="headerlink" title="multiset"></a>multiset</h1><p>和 <code>set</code> 没啥区别，就只是 </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">multiset</span> : <span class="keyword">public</span> _Tree&lt;_Tset_traits&lt;_Kty, _Pr, _Alloc, <span class="literal">true</span>&gt;&gt;</span><br><span class="line"><span class="comment">// ml1 = true;</span></span><br><span class="line"><span class="comment">// 即允许元素重复</span></span><br></pre></td></tr></table></figure><hr><h1 id="algorithm-算法"><a href="#algorithm-算法" class="headerlink" title="algorithm 算法"></a>algorithm 算法</h1><h2 id="ergodic-遍历类"><a href="#ergodic-遍历类" class="headerlink" title="ergodic 遍历类"></a>ergodic 遍历类</h2><h3 id="for-each"><a href="#for-each" class="headerlink" title="for_each"></a>for_each</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">_InIt</span>, <span class="keyword">class</span> <span class="title class_">_Fn</span>&gt;</span><br><span class="line"><span class="function">_CONSTEXPR20 _Fn <span class="title">for_each</span><span class="params">(_InIt _First, _InIt _Last, _Fn _Func)</span> </span></span><br><span class="line"><span class="function"></span>&#123; <span class="comment">// perform function for each element [_First, _Last)</span></span><br><span class="line">    _Adl_verify_range(_First, _Last);</span><br><span class="line">    <span class="keyword">auto</span> _UFirst      = _Get_unwrapped(_First);</span><br><span class="line">    <span class="type">const</span> <span class="keyword">auto</span> _ULast = _Get_unwrapped(_Last);</span><br><span class="line">    <span class="comment">// 核心代码 本质就是使用 beg 到 end 的元素作为参数调用 func</span></span><br><span class="line">    <span class="keyword">for</span> (; _UFirst != _ULast; ++_UFirst) </span><br><span class="line">    &#123;</span><br><span class="line">        _Func(*_UFirst);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// 返回值是 func</span></span><br><span class="line"><span class="comment">// for_each(vec.begin(), vec.end(), func)(114514); ???? ????</span></span><br><span class="line">    <span class="keyword">return</span> _Func;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="transform"><a href="#transform" class="headerlink" title="transform"></a>transform</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">_InIt</span>, <span class="keyword">class</span> <span class="title class_">_OutIt</span>, <span class="keyword">class</span> <span class="title class_">_Fn</span>&gt;</span><br><span class="line"><span class="function">_CONSTEXPR20 _OutIt <span class="title">transform</span><span class="params">(<span class="type">const</span> _InIt _First, <span class="type">const</span> _InIt _Last, _OutIt _Dest, _Fn _Func)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// transform [_First, _Last) with _Func</span></span><br><span class="line">    _Adl_verify_range(_First, _Last);</span><br><span class="line">    <span class="keyword">auto</span> _UFirst      = _Get_unwrapped(_First);</span><br><span class="line">    <span class="type">const</span> <span class="keyword">auto</span> _ULast = _Get_unwrapped(_Last);</span><br><span class="line">    <span class="keyword">auto</span> _UDest       = _Get_unwrapped_n(_Dest, _Idl_distance&lt;_InIt&gt;(_UFirst, _ULast));</span><br><span class="line">    <span class="comment">// 核心代码 *dest = func(*first)</span></span><br><span class="line">    <span class="keyword">for</span> (; _UFirst != _ULast; ++_UFirst, (<span class="type">void</span>) ++_UDest) </span><br><span class="line">    &#123;</span><br><span class="line">        *_UDest = _Func(*_UFirst);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// return dest</span></span><br><span class="line">    _Seek_wrapped(_Dest, _UDest);</span><br><span class="line">    <span class="keyword">return</span> _Dest;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="find-查找类"><a href="#find-查找类" class="headerlink" title="find 查找类"></a>find 查找类</h2><h3 id="find"><a href="#find" class="headerlink" title="find"></a>find</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">_InputIter</span>, <span class="keyword">class</span> <span class="title class_">_Tp</span>&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> _InputIter <span class="title">find</span><span class="params">(_InputIter __first, _InputIter __last,<span class="type">const</span> _Tp&amp; __val,input_iterator_tag)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//若尚未到达区间的尾端，且未找到匹配的值，则继续查找</span></span><br><span class="line">  <span class="keyword">while</span> (__first != __last &amp;&amp; !(*__first == __val))</span><br><span class="line">    ++__first;</span><br><span class="line">  <span class="comment">//若找到匹配的值，则返回该位置</span></span><br><span class="line">  <span class="comment">//若找不到，即到达区间尾端，此时first=last，则返回first</span></span><br><span class="line">  <span class="keyword">return</span> __first;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="find-if"><a href="#find-if" class="headerlink" title="find_if"></a>find_if</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">_InIt</span>, <span class="keyword">class</span> <span class="title class_">_Pr</span>&gt;</span><br><span class="line"><span class="function">_NODISCARD _CONSTEXPR20 _InIt <span class="title">find_if</span><span class="params">(_InIt _First, <span class="type">const</span> _InIt _Last, _Pr _Pred)</span> </span></span><br><span class="line"><span class="function"></span>&#123; <span class="comment">// find first satisfying _Pred</span></span><br><span class="line">    _Adl_verify_range(_First, _Last);</span><br><span class="line">    <span class="keyword">auto</span> _UFirst      = _Get_unwrapped(_First);</span><br><span class="line">    <span class="type">const</span> <span class="keyword">auto</span> _ULast = _Get_unwrapped(_Last);</span><br><span class="line">    <span class="comment">// 可以看到 判定是否找到的条件可以自己设定了</span></span><br><span class="line">    <span class="keyword">for</span> (; _UFirst != _ULast; ++_UFirst) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (_Pred(*_UFirst)) <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    _Seek_wrapped(_First, _UFirst);</span><br><span class="line">    <span class="keyword">return</span> _First;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="adjacent-find"><a href="#adjacent-find" class="headerlink" title="adjacent_find"></a>adjacent_find</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">_FwdIt</span>, <span class="keyword">class</span> <span class="title class_">_Pr</span>&gt;</span><br><span class="line"><span class="function">_NODISCARD _CONSTEXPR20 _FwdIt <span class="title">adjacent_find</span><span class="params">(<span class="type">const</span> _FwdIt _First, _FwdIt _Last, _Pr _Pred)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// find first satisfying _Pred with successor</span></span><br><span class="line">    _Adl_verify_range(_First, _Last);</span><br><span class="line">    <span class="keyword">auto</span> _UFirst = _Get_unwrapped(_First);</span><br><span class="line">    <span class="keyword">auto</span> _ULast  = _Get_unwrapped(_Last);</span><br><span class="line">    <span class="keyword">if</span> (_UFirst != _ULast) </span><br><span class="line">    &#123;</span><br><span class="line">    <span class="comment">// 核心代码 如果满足 func(cur,next) 就返回</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> _UNext = _UFirst; ++_UNext != _ULast; _UFirst = _UNext) &#123;</span><br><span class="line">            <span class="keyword">if</span> (_Pred(*_UFirst, *_UNext)) </span><br><span class="line">            &#123;</span><br><span class="line">                _ULast = _UFirst;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    _Seek_wrapped(_Last, _ULast);</span><br><span class="line">    <span class="keyword">return</span> _Last;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="sort-排序类"><a href="#sort-排序类" class="headerlink" title="sort 排序类"></a>sort 排序类</h2><h3 id="merge"><a href="#merge" class="headerlink" title="merge"></a>merge</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">_InIt1</span>, <span class="keyword">class</span> <span class="title class_">_InIt2</span>, <span class="keyword">class</span> <span class="title class_">_OutIt</span>, <span class="keyword">class</span> <span class="title class_">_Pr</span>&gt;</span><br><span class="line"><span class="function">_CONSTEXPR20 _OutIt <span class="title">merge</span><span class="params">(_InIt1 _First1, _InIt1 _Last1, _InIt2 _First2, _InIt2 _Last2, _OutIt _Dest, _Pr _Pred)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// copy merging ranges</span></span><br><span class="line">    _Adl_verify_range(_First1, _Last1);</span><br><span class="line">    _Adl_verify_range(_First2, _Last2);</span><br><span class="line">    <span class="keyword">auto</span> _UFirst1      = _Get_unwrapped(_First1);</span><br><span class="line">    <span class="type">const</span> <span class="keyword">auto</span> _ULast1 = _Get_unwrapped(_Last1);</span><br><span class="line">    <span class="keyword">auto</span> _UFirst2      = _Get_unwrapped(_First2);</span><br><span class="line">    <span class="type">const</span> <span class="keyword">auto</span> _ULast2 = _Get_unwrapped(_Last2);</span><br><span class="line">    _DEBUG_ORDER_SET_UNWRAPPED(_InIt2, _UFirst1, _ULast1, _Pred);</span><br><span class="line">    _DEBUG_ORDER_SET_UNWRAPPED(_InIt1, _UFirst2, _ULast2, _Pred);</span><br><span class="line">    <span class="type">const</span> <span class="keyword">auto</span> _Count1 = _Idl_distance&lt;_InIt1&gt;(_UFirst1, _ULast1);</span><br><span class="line">    <span class="type">const</span> <span class="keyword">auto</span> _Count2 = _Idl_distance&lt;_InIt2&gt;(_UFirst2, _ULast2);</span><br><span class="line">    <span class="keyword">auto</span> _UDest        = _Get_unwrapped_n(_Dest, _Idl_dist_add(_Count1, _Count2));</span><br><span class="line">    <span class="comment">// 核心循环</span></span><br><span class="line">    <span class="keyword">if</span> (_UFirst1 != _ULast1 &amp;&amp; _UFirst2 != _ULast2) &#123;</span><br><span class="line">        <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">        <span class="comment">// 按序COPY</span></span><br><span class="line">            <span class="keyword">if</span> (_DEBUG_LT_PRED(_Pred, *_UFirst2, *_UFirst1)) &#123;</span><br><span class="line">                *_UDest = *_UFirst2;</span><br><span class="line">                ++_UDest;</span><br><span class="line">                ++_UFirst2;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (_UFirst2 == _ULast2) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                *_UDest = *_UFirst1;</span><br><span class="line">                ++_UDest;</span><br><span class="line">                ++_UFirst1;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (_UFirst1 == _ULast1) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// 补上没有COPY的尾巴</span></span><br><span class="line">    _UDest = _Copy_unchecked(_UFirst1, _ULast1, _UDest); <span class="comment">// copy any tail</span></span><br><span class="line">    _Seek_wrapped(_Dest, _Copy_unchecked(_UFirst2, _ULast2, _UDest));</span><br><span class="line">    <span class="keyword">return</span> _Dest;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="sort"><a href="#sort" class="headerlink" title="sort"></a>sort</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">_RanIt</span>, <span class="keyword">class</span> <span class="title class_">_Pr</span>&gt;</span><br><span class="line">_CONSTEXPR20 <span class="type">void</span> _Sort_unchecked(_RanIt _First, _RanIt _Last, _Iter_diff_t&lt;_RanIt&gt; _Ideal, _Pr _Pred)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// order [_First, _Last)</span></span><br><span class="line">    <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">        <span class="keyword">if</span> (_Last - _First &lt;= _ISORT_MAX) </span><br><span class="line">        &#123;   <span class="comment">// small - 当分区足够小 采用插入排序</span></span><br><span class="line">            _Insertion_sort_unchecked(_First, _Last, _Pred);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (_Ideal &lt;= <span class="number">0</span>) </span><br><span class="line">        &#123;   <span class="comment">// heap sort if too many divisions</span></span><br><span class="line">            <span class="comment">// 如果过多分区 采用堆排序</span></span><br><span class="line">            _Make_heap_unchecked(_First, _Last, _Pred);</span><br><span class="line">            _Sort_heap_unchecked(_First, _Last, _Pred);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// divide and conquer by quicksort</span></span><br><span class="line">        <span class="comment">// 快速排序分而治之</span></span><br><span class="line">        <span class="keyword">auto</span> _Mid = _Partition_by_median_guess_unchecked(_First, _Last, _Pred);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// allow 1.5 log2(N) divisions</span></span><br><span class="line">        _Ideal = (_Ideal &gt;&gt; <span class="number">1</span>) + (_Ideal &gt;&gt; <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (_Mid.first - _First &lt; _Last - _Mid.second) </span><br><span class="line">        &#123; <span class="comment">// loop on second half</span></span><br><span class="line">            _Sort_unchecked(_First, _Mid.first, _Ideal, _Pred);</span><br><span class="line">            _First = _Mid.second;</span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">else</span> </span><br><span class="line">        &#123; <span class="comment">// loop on first half</span></span><br><span class="line">            _Sort_unchecked(_Mid.second, _Last, _Ideal, _Pred);</span><br><span class="line">            _Last = _Mid.first;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="quick-sort"><a href="#quick-sort" class="headerlink" title="quick_sort"></a>quick_sort</h2><p><strong>快速排序 采用了三数中值法 - Tukey’s ninther法</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">_RanIt</span>, <span class="keyword">class</span> <span class="title class_">_Pr</span>&gt;</span><br><span class="line">_CONSTEXPR20 pair&lt;_RanIt, _RanIt&gt; _Partition_by_median_guess_unchecked(_RanIt _First, _RanIt _Last, _Pr _Pred) </span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// partition [_First, _Last)</span></span><br><span class="line">    _RanIt _Mid = _First + ((_Last - _First) &gt;&gt; <span class="number">1</span>); <span class="comment">// shift for codegen</span></span><br><span class="line">    _Guess_median_unchecked(_First, _Mid, _Prev_iter(_Last), _Pred);</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 补充 _Guess_median_unchecked</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">_RanIt</span>, <span class="keyword">class</span> <span class="title class_">_Pr</span>&gt;</span><br><span class="line">_CONSTEXPR20 <span class="type">void</span> _Guess_median_unchecked(_RanIt _First, _RanIt _Mid, _RanIt _Last, _Pr _Pred) </span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// sort median element to middle</span></span><br><span class="line">    <span class="comment">// 将中位数放置在 mid</span></span><br><span class="line">    <span class="keyword">using</span> _Diff        = _Iter_diff_t&lt;_RanIt&gt;;</span><br><span class="line">    <span class="type">const</span> _Diff _Count = _Last - _First;</span><br><span class="line">    <span class="keyword">if</span> (<span class="number">40</span> &lt; _Count) </span><br><span class="line">    &#123;   <span class="comment">// Tukey&#x27;s ninther</span></span><br><span class="line">        <span class="comment">// +1 can&#x27;t overflow because range was made inclusive in caller</span></span><br><span class="line">        <span class="type">const</span> _Diff _Step     = (_Count + <span class="number">1</span>) &gt;&gt; <span class="number">3</span>;</span><br><span class="line">        <span class="comment">// note: intentionally discards low-order bit</span></span><br><span class="line">        <span class="type">const</span> _Diff _Two_step = _Step &lt;&lt; <span class="number">1</span>; </span><br><span class="line">        _Med3_unchecked(_First, _First + _Step, _First + _Two_step, _Pred);</span><br><span class="line">        _Med3_unchecked(_Mid - _Step, _Mid, _Mid + _Step, _Pred);</span><br><span class="line">        _Med3_unchecked(_Last - _Two_step, _Last - _Step, _Last, _Pred);</span><br><span class="line">        _Med3_unchecked(_First + _Step, _Mid, _Last - _Step, _Pred);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        _Med3_unchecked(_First, _Mid, _Last, _Pred);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">    _RanIt _Pfirst = _Mid;</span><br><span class="line">    _RanIt _Plast  = _Next_iter(_Pfirst);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (_First &lt; _Pfirst &amp;&amp; !_DEBUG_LT_PRED(_Pred, *_Prev_iter(_Pfirst), *_Pfirst)</span><br><span class="line">           &amp;&amp; !_Pred(*_Pfirst, *_Prev_iter(_Pfirst))) &#123;</span><br><span class="line">        --_Pfirst;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (_Plast &lt; _Last &amp;&amp; !_DEBUG_LT_PRED(_Pred, *_Plast, *_Pfirst) &amp;&amp; !_Pred(*_Pfirst, *_Plast)) &#123;</span><br><span class="line">        ++_Plast;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    _RanIt _Gfirst = _Plast;</span><br><span class="line">    _RanIt _Glast  = _Pfirst;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (;;) &#123; <span class="comment">// partition</span></span><br><span class="line">        <span class="keyword">for</span> (; _Gfirst &lt; _Last; ++_Gfirst) &#123;</span><br><span class="line">            <span class="keyword">if</span> (_DEBUG_LT_PRED(_Pred, *_Pfirst, *_Gfirst)) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (_Pred(*_Gfirst, *_Pfirst)) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (_Plast != _Gfirst) &#123;</span><br><span class="line">                _STD <span class="built_in">iter_swap</span>(_Plast, _Gfirst);</span><br><span class="line">                ++_Plast;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                ++_Plast;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (; _First &lt; _Glast; --_Glast) &#123;</span><br><span class="line">            <span class="keyword">if</span> (_DEBUG_LT_PRED(_Pred, *_Prev_iter(_Glast), *_Pfirst)) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (_Pred(*_Pfirst, *_Prev_iter(_Glast))) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (--_Pfirst != _Prev_iter(_Glast)) &#123;</span><br><span class="line">                _STD <span class="built_in">iter_swap</span>(_Pfirst, _Prev_iter(_Glast));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (_Glast == _First &amp;&amp; _Gfirst == _Last) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">pair</span>&lt;_RanIt, _RanIt&gt;(_Pfirst, _Plast);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (_Glast == _First) &#123; <span class="comment">// no room at bottom, rotate pivot upward</span></span><br><span class="line">            <span class="keyword">if</span> (_Plast != _Gfirst) &#123;</span><br><span class="line">                <span class="function">_STD <span class="title">iter_swap</span><span class="params">(_Pfirst, _Plast)</span></span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            ++_Plast;</span><br><span class="line">            <span class="function">_STD <span class="title">iter_swap</span><span class="params">(_Pfirst, _Gfirst)</span></span>;</span><br><span class="line">            ++_Pfirst;</span><br><span class="line">            ++_Gfirst;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (_Gfirst == _Last) &#123; <span class="comment">// no room at top, rotate pivot downward</span></span><br><span class="line">            <span class="keyword">if</span> (--_Glast != --_Pfirst) &#123;</span><br><span class="line">                _STD <span class="built_in">iter_swap</span>(_Glast, _Pfirst);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function">_STD <span class="title">iter_swap</span><span class="params">(_Pfirst, --_Plast)</span></span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            _STD <span class="built_in">iter_swap</span>(_Gfirst, --_Glast);</span><br><span class="line">            ++_Gfirst;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="random-shuffle"><a href="#random-shuffle" class="headerlink" title="random_shuffle"></a>random_shuffle</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">_RanIt</span>, <span class="keyword">class</span> <span class="title class_">_RngFn</span>&gt;</span><br><span class="line"><span class="type">void</span> _Random_shuffle1(_RanIt _First, _RanIt _Last, _RngFn&amp; _RngFunc) </span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// shuffle [_First, _Last) using random function _RngFunc</span></span><br><span class="line">    _Adl_verify_range(_First, _Last);</span><br><span class="line">    <span class="keyword">auto</span> _UFirst      = _Get_unwrapped(_First);</span><br><span class="line">    <span class="type">const</span> <span class="keyword">auto</span> _ULast = _Get_unwrapped(_Last);</span><br><span class="line">    <span class="keyword">if</span> (_UFirst == _ULast) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">using</span> _Diff         = _Iter_diff_t&lt;_RanIt&gt;;</span><br><span class="line">    <span class="keyword">auto</span> _UTarget       = _UFirst;</span><br><span class="line">    _Diff _Target_index = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (; ++_UTarget != _ULast; ++_Target_index) </span><br><span class="line">    &#123;   <span class="comment">// randomly place an element from [_First, _Target] at _Target</span></span><br><span class="line">        <span class="comment">// 从前向后扫描 每次从[first,target]中选择一个元素和 target 换位</span></span><br><span class="line">        _Diff _Off = _RngFunc(<span class="built_in">static_cast</span>&lt;_Diff&gt;(_Target_index + <span class="number">1</span>));</span><br><span class="line">        _STL_ASSERT(<span class="number">0</span> &lt;= _Off &amp;&amp; _Off &lt;= _Target_index, <span class="string">&quot;random value out of range&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (_Off != _Target_index) &#123; <span class="comment">// avoid self-move-assignment</span></span><br><span class="line">            <span class="function">_STD <span class="title">iter_swap</span><span class="params">(_UTarget, _UFirst + _Off)</span></span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="set集合类"><a href="#set集合类" class="headerlink" title="set集合类"></a>set集合类</h1><h2 id="set-union"><a href="#set-union" class="headerlink" title="set_union"></a>set_union</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 可以看到整个过程都是类似 merge 的</span></span><br><span class="line"><span class="comment">// 所以需要 set 有序</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">_InIt1</span>, <span class="keyword">class</span> <span class="title class_">_InIt2</span>, <span class="keyword">class</span> <span class="title class_">_OutIt</span>, <span class="keyword">class</span> <span class="title class_">_Pr</span>&gt;</span><br><span class="line"><span class="function">_CONSTEXPR20 _OutIt <span class="title">set_union</span><span class="params">(_InIt1 _First1, _InIt1 _Last1, _InIt2 _First2, _InIt2 _Last2, _OutIt _Dest, _Pr _Pred)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// OR sets [_First1, _Last1) and [_First2, _Last2)</span></span><br><span class="line">    _Adl_verify_range(_First1, _Last1);</span><br><span class="line">    _Adl_verify_range(_First2, _Last2);</span><br><span class="line">    <span class="keyword">auto</span> _UFirst1      = _Get_unwrapped(_First1);</span><br><span class="line">    <span class="type">const</span> <span class="keyword">auto</span> _ULast1 = _Get_unwrapped(_Last1);</span><br><span class="line">    <span class="keyword">auto</span> _UFirst2      = _Get_unwrapped(_First2);</span><br><span class="line">    <span class="type">const</span> <span class="keyword">auto</span> _ULast2 = _Get_unwrapped(_Last2);</span><br><span class="line">    _DEBUG_ORDER_SET_UNWRAPPED(_InIt2, _UFirst1, _ULast1, _Pred);</span><br><span class="line">    _DEBUG_ORDER_SET_UNWRAPPED(_InIt1, _UFirst2, _ULast2, _Pred);</span><br><span class="line">    <span class="keyword">auto</span> _UDest = _Get_unwrapped_unverified(_Dest);</span><br><span class="line">    <span class="keyword">for</span> (; _UFirst1 != _ULast1 &amp;&amp; _UFirst2 != _ULast2; ++_UDest) &#123;</span><br><span class="line">        <span class="keyword">if</span> (_DEBUG_LT_PRED(_Pred, *_UFirst1, *_UFirst2)) &#123; <span class="comment">// copy first</span></span><br><span class="line">            *_UDest = *_UFirst1;</span><br><span class="line">            ++_UFirst1;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (_Pred(*_UFirst2, *_UFirst1)) &#123; <span class="comment">// copy second</span></span><br><span class="line">            *_UDest = *_UFirst2;</span><br><span class="line">            ++_UFirst2;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123; <span class="comment">// advance both</span></span><br><span class="line">            *_UDest = *_UFirst1;</span><br><span class="line">            ++_UFirst1;</span><br><span class="line">            ++_UFirst2;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    _UDest = _Copy_unchecked(_UFirst1, _ULast1, _UDest);</span><br><span class="line">    _Seek_wrapped(_Dest, _Copy_unchecked(_UFirst2, _ULast2, _UDest));</span><br><span class="line">    <span class="keyword">return</span> _Dest;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 面试 </tag>
            
            <tag> C++ </tag>
            
            <tag> STL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++STL</title>
      <link href="/2022/07/05/C-STL/"/>
      <url>/2022/07/05/C-STL/</url>
      
        <content type="html"><![CDATA[<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">学习代码随想录 - 知识星球内容</span><br><span class="line">B站视频配合食用 - https://www.bilibili.com/video/BV1i741147h1</span><br></pre></td></tr></table></figure><h1 id="STL基本原理与实现"><a href="#STL基本原理与实现" class="headerlink" title="STL基本原理与实现"></a>STL基本原理与实现</h1><ol><li>STL 即 standard template libary 标准模板库</li><li>STL 由 六大组件 构成 分别是 容器container 、 算法 algorithm 、 迭代器 iterator 、仿函数、 适配器adaptor 与 空间配置器</li></ol><h2 id="容器"><a href="#容器" class="headerlink" title="容器"></a>容器</h2><ul><li>各种用于存储数据的数据结构，由 模板类 实现</li><li>例如 vector \ list \ dequeue \ set \ map</li></ul><h2 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h2><ul><li>各种针对于容器数据结构的常用算法，由 模板函数 实现</li><li>例如 sort \ find \ copy \ for_each</li></ul><h2 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h2><ul><li>容器与算法的胶合剂，一种将 * 、 -&gt; 、++ 、 – 等指针相关操作符重载了的 模板类，共有五种类型</li><li>每种容器都附带有自己专属的迭代器，这意味着只能使用相应的迭代器才能访问容器</li><li>原生指针也可视为一种迭代器</li></ul><h2 id="仿函数"><a href="#仿函数" class="headerlink" title="仿函数"></a>仿函数</h2><ul><li>类似于函数的一种 类或者模板类</li><li>通过重载 <code>operator()</code> 来实现<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">comp</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> a;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// 显式构造函数</span></span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">comp</span><span class="params">(<span class="type">int</span> t)</span>:a(t)&#123;</span>&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 重载()操作符以模拟函数</span></span><br><span class="line">    <span class="comment">// 常函数 - 实质是 const class comp this; 即该函数不可以修改类实例,只能访问</span></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="type">int</span> num)</span> <span class="type">const</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> num&gt;a;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul><h2 id="适配器"><a href="#适配器" class="headerlink" title="适配器"></a>适配器</h2><ul><li>一种用于修饰容器、仿函数、迭代器接口的机制</li><li>例如 STL::stack \ STL::queue 这两个容器可以被认为是一种 适配器，它们的底层是由 deque来实现的</li></ul><h2 id="空间配置器"><a href="#空间配置器" class="headerlink" title="空间配置器"></a>空间配置器</h2><ul><li>负责空间的分配与管理，从实现角度，是一个实现了动态空间配置、管理与释放的模板类</li></ul><hr><h2 id="六大组件的关系"><a href="#六大组件的关系" class="headerlink" title="六大组件的关系"></a>六大组件的关系</h2><ul><li>容器 通过 空间配置器 取得数据存储空间</li><li>算法 通过 迭代器 访问与管理 容器</li><li>仿函数 协助 算法 完成不同的策略变化</li><li><ul><li>如 find(容器，仿函数)，仿函数定义策略为 &gt;5,那么就是找容器中大于5的数</li></ul></li><li>适配器 可以修饰 仿函数</li></ul><hr><h2 id="STL常见容器"><a href="#STL常见容器" class="headerlink" title="STL常见容器"></a>STL常见容器</h2><p><strong>分类</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">序列式容器</span><br><span class="line">array, vector, heap, priority_queue, list, deque(分段连续空间), stack, queue</span><br><span class="line"></span><br><span class="line">开放式容器</span><br><span class="line">set, map, multiset, multimap</span><br></pre></td></tr></table></figure><p><strong>特性 与 使用时机</strong></p><table><thead><tr><th></th><th>中文名</th><th>内存组织</th><th>迭代器</th><th>访问速度</th></tr></thead><tbody><tr><td>vector</td><td>动态数组</td><td>连续内存</td><td>原生指针 、支持随机访问 、 操作后可能失效 <br /> <em>失效与否指除当前操作元素以外的其他元素的迭代器</em></td><td>插入ON 删除ON 查找 ON</td></tr><tr><td>list</td><td>双端链表</td><td>双向链表</td><td>不支持随机访问 、 操作后不会失效</td><td>插入ON 删除ON 查找ON</td></tr><tr><td>deque</td><td>双端数组</td><td>中控器 + 多段内存</td><td>支持随机访问、 操作后不会失效</td><td>插入ON(头插O1)<br />删除ON(头删O1)<br />查找ON</td></tr><tr><td>stack</td><td>栈</td><td>deque</td><td>没有迭代器、只能访问栈顶元素</td><td></td></tr><tr><td>queue</td><td>队列</td><td>deque</td><td>没有迭代器、只能访问队列头，尾元素</td><td></td></tr><tr><td>prority_queue</td><td>优先队列</td><td>heap(vector)</td><td>没有迭代器、只能插入元素，访问&#x2F;弹出堆顶元素</td><td></td></tr><tr><td>set</td><td>集合</td><td>rb_tree</td><td>不支持随机访问</td><td>查找 Ologn</td></tr><tr><td>map</td><td>集合</td><td>rb_tree</td><td>不支持随机访问</td><td>查找 Ologn</td></tr></tbody></table><h2 id="STL优点"><a href="#STL优点" class="headerlink" title="STL优点"></a>STL优点</h2><ol><li>内置于C++</li><li>高重用性 使用模板技术</li><li>高性能 map采用红黑树变体实现快速查找，sort采用快排、归并、选择结合的方式实现快速排序</li><li>高移植性 因为是“标准”模板库</li><li>数据与操作分离</li></ol><hr><h1 id="STL容器与迭代器原理与使用"><a href="#STL容器与迭代器原理与使用" class="headerlink" title="STL容器与迭代器原理与使用"></a>STL容器与迭代器原理与使用</h1><h2 id="pair-键值对"><a href="#pair-键值对" class="headerlink" title="pair 键值对"></a>pair 键值对</h2><ul><li>保存两个数据成员，用于生成特定类型的模板</li><li><strong>使用</strong><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义 数据成员属性为 public , 两个成员分别为 first 和 second</span></span><br><span class="line">pair&lt;T1, T2&gt; p;</span><br><span class="line"><span class="built_in">makr_pair</span>&lt;T1,T2&gt;(first,second);</span><br></pre></td></tr></table></figure></li><li>map 中的元素即是 pair 类型的，<code> pair&lt;const key_type, mapped_type&gt;</code></li><li>可以使用 pair 遍历 map<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">map&lt;string,<span class="type">int</span>&gt; m;</span><br><span class="line"><span class="keyword">auto</span> p = m.<span class="built_in">cbegin</span>();</span><br><span class="line"><span class="keyword">while</span>(p != m.<span class="built_in">cend</span>())</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; p.first &lt;&lt; p.secont &lt;&lt; endl;</span><br><span class="line">p++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>可以使用 pair 向 map 中插入元素<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">pair&lt;string,<span class="type">int</span>&gt; <span class="title">p</span><span class="params">(<span class="string">&quot;123&quot;</span>,<span class="number">123</span>)</span></span>;</span><br><span class="line">m.<span class="built_in">insert</span>(p);</span><br><span class="line"></span><br><span class="line">m.<span class="built_in">insert</span>(<span class="built_in">make_pair</span>&lt;string,<span class="type">int</span>&gt;(<span class="string">&quot;123&quot;</span>,<span class="number">123</span>));</span><br></pre></td></tr></table></figure></li><li>对于不含重复关键词的容器，如map，insert的返回值类型是 pair&lt;指向新插入元素的迭代器，插入是否成功BOOL&gt;</li></ul><hr><h2 id="vector-动态数组"><a href="#vector-动态数组" class="headerlink" title="vector 动态数组"></a>vector 动态数组</h2><h3 id="基础操作"><a href="#基础操作" class="headerlink" title="基础操作"></a>基础操作</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">1. 构造、赋值</span><br><span class="line">2. 交换 swap(v1,v2)</span><br><span class="line">3. size 容器大小resize() 重设大小,变大填充默认值,变小丢弃尾部 empty()容器是否为空</span><br><span class="line">4. capacity 容器容量 reserve() 重设容量,但不初始化,不可访问</span><br><span class="line">5. at, [] 访问元素  at越界抛出异常 []越界程序终止</span><br><span class="line">6. front() back() 首个/最后一个元素</span><br><span class="line">7. insert(迭代器,插入个数(可省略),插入元素)</span><br><span class="line">8. earse(迭代器) 可以提供两个迭代器以删除一个区间</span><br><span class="line">9. clear() = earse(v.begin,v.end)</span><br><span class="line">10. begin(), end() 是 vector&lt;T&gt;::iterator 迭代器,begin指向第一个元素,end指向最后一个元素的后一位</span><br><span class="line">11. rbegin(),rend() 是 vector&lt;T&gt;::reverse_iterator 逆序迭代器,rbegin指向最后一个元素,end指向第一个元素前一个元素, 对于逆序迭代器的加减法也是逆序的</span><br></pre></td></tr></table></figure><h3 id="底层实现"><a href="#底层实现" class="headerlink" title="底层实现"></a>底层实现</h3><ol><li>内存 ： vector 在 堆 中分配了一段连续的内存空间来存放元素</li><li>三个内存迭代器 ：</li></ol><ul><li>first - vector对象 起始字节位置</li><li>last - vector最后一个元素的末尾字节位置</li><li>end - vector容器所占内存控件的末尾字节位置</li><li>显然 first-last 当前使用空间、last-end 当前空闲空间、first-end 当前容器容量</li></ul><ol start="3"><li>扩容过程</li></ol><ul><li>若当前容器已经装满，新增数据时，重新请求一块更大的内存，将原始数据复制到新内存空间，然后释放掉原来的内存空间</li><li>扩容策略有两种 一是每次扩大固定大小、二是每次扩大一倍大小，二者各有利弊，实际实现较为复杂</li><li>size() 对应当前含有元素数量，resize()改变当前元素数量，如果有必要，扩大容量</li><li>capacity() 对应当前容器容量，reserve()改变当前容器容量，只能扩大</li></ul><ol start="4"><li>由于采用 连续内存&#x2F;不够时扩容 的方式，在插入元素后有可能导致迭代器失效</li></ol><h3 id="源码阅读"><a href="#源码阅读" class="headerlink" title="源码阅读"></a>源码阅读</h3><p><a href="https://moyihp.github.io/2022/07/05/STL%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/#vector">https://moyihp.github.io/2022/07/05/STL%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/#vector</a></p><h3 id="使用技巧"><a href="#使用技巧" class="headerlink" title="使用技巧"></a>使用技巧</h3><ol><li>利用swap收缩内存</li></ol><ul><li>vector在使用过程中容量是只大不小的，resever也只能扩大</li><li>v1.swap(v2) 的本质是二者交换了他们的迭代器，即指针指向交换了</li><li>vector的拷贝构造函数v1(v2)中 v1只复制v2中的元素，容量不复制</li><li>匿名的对象在当前代码行使用后将会被系统回收<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 利用上述原理完成了对v1实现内存容量收缩的功能</span></span><br><span class="line"><span class="comment">// v1.size = 5 , v1.capacity = 100000</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(v1).<span class="built_in">swap</span>(v1);</span><br></pre></td></tr></table></figure></li></ul><ol start="2"><li>利用resever提前预留空间以减少空间开辟与复制内存的时间</li></ol><ul><li>当向vector中加入数据时，若容量不足，那么开辟新内存，新容量 &#x3D; 2 * 原容量，然后将原有数据复制到新内存，销毁久内存，这是一个比较复杂耗时的操作</li><li>当有大量数据插入vector时，很容易导致频繁的内存不足需要扩容</li><li>这时可以通过reserver提前预留空间以减少扩容带来的不必要的操作</li></ul><ol start="3"><li>利用逆序迭代器逆序遍历 vector<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(vector&lt;<span class="type">int</span>&gt;::reverse_iterator ritr = vec.<span class="built_in">rend</span>(); ritr != vec.<span class="built_in">rbegin</span>(); ritr++)<span class="comment">// 逆序迭代器的加减法也是逆序的</span></span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; *ritr &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><hr><h2 id="list-双端链表"><a href="#list-双端链表" class="headerlink" title="list 双端链表"></a>list 双端链表</h2><h3 id="基础操作-1"><a href="#基础操作-1" class="headerlink" title="基础操作"></a>基础操作</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">1. 构造 析构</span><br><span class="line">2. 头插push_front 尾插push_back 头删pop_front 尾删pop_back</span><br><span class="line">3. 插入元素 insert</span><br><span class="line">4. 删除元素 erase ; clear = erase(l.begin(),l.end());</span><br><span class="line">5. 移除元素 remove(elem) 移除所有等于 elem 的元素</span><br><span class="line">--</span><br><span class="line">6. size() 元素个数 empty()是否为空 resize() 改变大小,变长补充默认值,变短抛弃尾部</span><br><span class="line">7. assign 赋值 swap 互换 </span><br><span class="line">8. front , back 取得第一、最后一个元素  </span><br><span class="line">--</span><br><span class="line">9. reverse() 反转</span><br><span class="line">10. sort() 排序,作为成员函数实现,因为 algorithm 中的 sort 要求容器能够实现 随机访问</span><br></pre></td></tr></table></figure><h3 id="底层实现-1"><a href="#底层实现-1" class="headerlink" title="底层实现"></a>底层实现</h3><ol><li>内存空间是<strong>不连续</strong>的，是一个<strong>链表</strong>的形式，所以添加与删除元素的性能好，因为不需要移动内存 和 构造&#x2F;析构 元素</li><li>list 是<strong>双向的 循环的</strong> 链表，其 <strong>结点与其本身是分开设计的</strong></li><li>list 的迭代器是泛化的指针，重载了<code> -&gt; / -- / ++ / * / ()</code> 等运算符</li><li>list 的组织形式确保了 list 的迭代器 在数据插入&#x2F;删除&#x2F;更改时都只会影响到当前元素的迭代器，其他元素的迭代器依旧有效</li></ol><h3 id="对比-list-与-vector"><a href="#对比-list-与-vector" class="headerlink" title="对比 list 与 vector"></a>对比 list 与 vector</h3><ul><li>底层内存组织 ： vector 是连续内存上的数组 ; list 是不连续内存的双向链表</li><li>访问形式 ： vector 支持随机访问 ； list 不支持</li><li>插入数据 ： vector 会需要移动元素和内容拷贝，迭代器有可能失效； list 不需要 移动与内容拷贝，并且迭代器不会失效</li><li>内存分配 ： vector 一次分配足够的内存，可能有富余，不足时再次分配； list 每个结点单独分配内存</li><li>性能 ： vectot 随机访问性能好 ； list 插入删除性能好</li></ul><h3 id="源码阅读-1"><a href="#源码阅读-1" class="headerlink" title="源码阅读"></a>源码阅读</h3><p><a href="https://moyihp.github.io/2022/07/05/STL%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/#list">https://moyihp.github.io/2022/07/05/STL%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/#list</a></p><hr><h2 id="deque-双端数组"><a href="#deque-双端数组" class="headerlink" title="deque 双端数组"></a>deque 双端数组</h2><ul><li>vector 由于使用连续内存空间的原因，只支持尾部操作，即单端开口。虽然 vector 也可以通过 insert(v.begin()) 的方式实现头插，但是它需要将整个数组后移移位，这将是一个ON的操作，非常繁琐</li><li>deque 是一个双端开口的多个分段的连续空间组成的，它实现了双端操作，同时头插头删可以在 O1 内完成。但是这也导致了它的随机访问性能的下降。</li></ul><h3 id="基础操作-2"><a href="#基础操作-2" class="headerlink" title="基础操作"></a>基础操作</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">0. deque 的可用操作与 vector 非常相似，这里只记录它特殊的</span><br><span class="line">1. 双端插入删除 push_back,push_front,pop_front,pop_back</span><br><span class="line">2. deque不提供容量操作：capacity()和reverse()</span><br></pre></td></tr></table></figure><h3 id="底层实现-2"><a href="#底层实现-2" class="headerlink" title="底层实现"></a>底层实现</h3><ol><li>deque 使用分段的定长的连续内存存储数据，并通过 中控器 对这些内存段进行管理</li><li>控制中心Map是一个记录着当前所有buffer位置的数组</li><li>deque 数据成员包括 控制中心指针Map、控制中心大小  Mapsize、首个节点数据与首个block初始位置的距离Myoff、当前容器数据数量Mysize</li><li>当控制中心需要扩充时，原来的数据被复制到新数组的中间位置，便于deque数据两头扩充，新的控制中心大小为 1 或者 2^N 大小</li><li>deque 迭代器数据成员包括 当前指向元素与deque首个block起始处的距离Myoff、指向deque的指针Mycont</li></ol><h3 id="对比-deque-和-vector"><a href="#对比-deque-和-vector" class="headerlink" title="对比 deque 和 vector"></a>对比 deque 和 vector</h3><ol><li>内存组织 : deque 是 多段定长内存； vector 是 一段连续内存</li><li>访问效率 : deque 仅在对于 头部 插入与删除 的效率高于 vector</li></ol><h3 id="源码阅读-2"><a href="#源码阅读-2" class="headerlink" title="源码阅读"></a>源码阅读</h3><p><a href="https://moyihp.github.io/2022/07/05/STL%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/#deque">https://moyihp.github.io/2022/07/05/STL%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/#deque</a></p><hr><h2 id="stack-栈-与-queue-队列"><a href="#stack-栈-与-queue-队列" class="headerlink" title="stack 栈 与 queue 队列"></a>stack 栈 与 queue 队列</h2><ul><li>stack 和 queue 严格意义上是 deque 的适配器，其底层是以 deque 进行具体操作的</li><li>stack 只能访问栈顶元素，因而没有迭代器，不可以遍历</li><li>queue 从队首弹出元素，从队尾添加元素，只能访问队首队尾元素，没有迭代器，不可以遍历</li></ul><h3 id="基础操作-3"><a href="#基础操作-3" class="headerlink" title="基础操作"></a>基础操作</h3><p><strong>stack</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. 构造 析构 拷贝 赋值</span><br><span class="line">2. push添加元素 pop移除元素 top取得栈顶元素</span><br><span class="line">3. empty判断空 size返回大小</span><br></pre></td></tr></table></figure><p><strong>queue</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. 构造 析构 拷贝</span><br><span class="line">2. push添加元素 pop移除元素 front返回队首元素 back返回队尾元素</span><br><span class="line">3. empty判断空 size返回大小</span><br></pre></td></tr></table></figure><h3 id="底层实现-3"><a href="#底层实现-3" class="headerlink" title="底层实现"></a>底层实现</h3><ul><li>基于 deque</li></ul><h3 id="源码阅读-3"><a href="#源码阅读-3" class="headerlink" title="源码阅读"></a>源码阅读</h3><p><a href="https://moyihp.github.io/2022/07/05/STL%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/#stack">https://moyihp.github.io/2022/07/05/STL%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/#stack</a></p><p><a href="https://moyihp.github.io/2022/07/05/STL%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/#queue">https://moyihp.github.io/2022/07/05/STL%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/#queue</a></p><h3 id="使用技巧-1"><a href="#使用技巧-1" class="headerlink" title="使用技巧"></a>使用技巧</h3><ol><li><code>emplace</code> 函数的使用</li></ol><ul><li>当栈&#x2F;队列中存储的数据元素类型为类的时候，如果使用 push 添加元素，则需要首先构建一个类实例，而后在 push 函数执行时又会有多个临时的类实例由拷贝构造产生，这是不必要的操作</li><li>使用 emplace 函数，可以通过直接传递类构造函数所需参数的方式，由栈&#x2F;队列自行直接在内存中实例化该类，从而减少开销</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;deque&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="type">int</span> num;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="built_in">MyClass</span>() : <span class="built_in">num</span>(<span class="number">0</span>) &#123;&#125;;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">MyClass</span>(<span class="type">int</span> num)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;num = num;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;发生默认构造&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">MyClass</span>(<span class="type">const</span> MyClass&amp; right)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;num = right.num;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;发生拷贝构造&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;;</span><br><span class="line">~<span class="built_in">MyClass</span>()&#123;&#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">stack&lt;MyClass&gt; st;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;push : &quot;</span> &lt;&lt; endl;</span><br><span class="line">st.<span class="built_in">push</span>(*<span class="keyword">new</span> <span class="built_in">MyClass</span>(<span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;emplace : &quot;</span> &lt;&lt; endl;</span><br><span class="line">st.<span class="built_in">emplace</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 运行结果 , 可以看到使用 emplace 没有发生拷贝构造</span></span><br><span class="line">push :</span><br><span class="line">发生默认构造</span><br><span class="line">发生拷贝构造</span><br><span class="line">emplace :</span><br><span class="line">发生默认构造</span><br></pre></td></tr></table></figure><p>2.<code>_Get_container()</code> 函数的使用</p><ul><li>众所周知，栈&#x2F;队列是没有遍历功能的，但是它的底层 deque 是有遍历功能的</li><li><code>_Get_container()</code> 函数可以返回 栈&#x2F;队列 的 deque ，但是是 const 类型 的，只能访问，不能修改，不过这样就有方法遍历 栈&#x2F;队列 了</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">q.<span class="built_in">push</span>(<span class="number">1</span>);</span><br><span class="line">q.<span class="built_in">push</span>(<span class="number">2</span>);</span><br><span class="line">q.<span class="built_in">push</span>(<span class="number">3</span>);</span><br><span class="line">q.<span class="built_in">push</span>(<span class="number">4</span>);</span><br><span class="line">q.<span class="built_in">push</span>(<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// for (int i : q)cout &lt;&lt; i &lt;&lt; &quot; &quot;; </span></span><br><span class="line"><span class="comment">// error 找不到 q.begin </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i : q._Get_container())cout &lt;&lt; i &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="heap-堆-与-priority-queue-优先队列"><a href="#heap-堆-与-priority-queue-优先队列" class="headerlink" title="heap 堆 与 priority_queue 优先队列"></a>heap 堆 与 priority_queue 优先队列</h2><p><strong>heap</strong></p><ul><li>heap 并非是 作为 STL容器而存在的， 它更多的是作为 priority_queue 优先队列 的底层实现而存在的，heap 甚至于没有对应的类，它的体现是在 <code>&lt;algorithm&gt;</code> 中的堆算法中</li><li>优先队列的特征在于</li><li><ul><li><ol><li>任意次序加入元素</li></ol></li></ul></li><li><ul><li><ol start="2"><li>每次总是取出优先级最高的元素</li></ol></li></ul></li><li>而堆正好能满足这一特性，所以使用堆来作为优先队列的底层实现</li><li>还有另外一种数据结构，二叉搜索树也能满足优先队列的要求，但是其实现过于复杂，同时包含了不必要的信息（优先队列只需要当前优先级最高的元素，而不需要所有元素都按优先级高低排序），所以 堆 是最适合作为优先队列的底层实现的<br><strong>priority_queue</strong></li><li>priority_queue 严格意义上属于 适配器 ， 它的底层使用的是 堆heap 结构，而 堆 的底层内存是 动态数组 vector , 所以也可以认为 优先队列 的底层是 vector</li><li>优先队列也不能算是队列，因为它并不满足队列 FIFO 的定义</li><li>优先队列 在 构造时可以指定 比较器，来使得优先队列以特定的方式来组织</li></ul><h3 id="基础操作-4"><a href="#基础操作-4" class="headerlink" title="基础操作"></a>基础操作</h3><p><strong>heap</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1. make_heap(first,last,comp) 建堆 [first,last) On</span><br><span class="line">2. push_heap(first,last) 插入堆 [first,last-2]已经是堆,插入的元素在last-1 Ologn</span><br><span class="line">3. pop_heap(first,last) 堆弹出 [first,last-1]已经是堆,将first和last-1互换,将[first,last-2]调整为堆 Ologm</span><br><span class="line">4. sort_heap(first,last) 堆排序 要求已经是堆 Onlogn</span><br><span class="line">5. is_heap(first,last) 是否为堆 Onlogn</span><br><span class="line">6. is_heap_until(first,last) 返回第一个不满足heap的元素位置 Onlogn</span><br></pre></td></tr></table></figure><p><strong>priotity_queue</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. 构造 析构 可以通过指定比较器来自定义优先级关系</span><br><span class="line">2. empty 判断空 size 返回元素个数</span><br><span class="line">3. push\emplace 添加元素 pop删除队列头 top取得队列头</span><br></pre></td></tr></table></figure><h3 id="底层实现-4"><a href="#底层实现-4" class="headerlink" title="底层实现"></a>底层实现</h3><p><strong>heap</strong></p><ul><li>堆 等于 <strong>数据内存</strong> + <strong>堆算法</strong>，其实质是 满足根节点优先级大于子树节点优先级 的 一颗完全二叉树 </li><li>数据内存， 完全二叉树的独特结构使得可以用一个简单的数据结构 - 数组 vector 来表示它<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;T&gt; heap;</span><br><span class="line">heap[0] 是根节点</span><br><span class="line">heap[i] 的父节点是 heap[i/2]; 子节点是 heap[2i] heap[2i+1]</span><br></pre></td></tr></table></figure></li><li>堆算法 包括 <code>push_heap 加入元素</code> 、<code>pop_heap 取出堆顶元素</code>、<code>make_heap 构建堆</code>、<code>heap_sort 堆排序算法</code></li></ul><p><code>push_heap</code>  ：</p><ul><li>分为两步，第一，先将新元素加入到 vec.end 处；第二，启动<code>percolate up（上溯）</code>程序，以移动新元素到合适的位置</li><li><ul><li><code>percolate up（上溯）</code> ：</li></ul></li><li>将 元素 与 父节点 比较，如果其键值比父节点大， 就父子对换位置。如此一直上溯，直到不需要对换或直到根节点为止。</li></ul><p><code>pop_heap</code>  ： </p><ul><li>分为三步，第一，将堆顶元素 vec.begin 与 堆尾元素互换 vec.back，堆大小减一 ；第二，启动<code>percolate down（下溯）</code>程序，以将新堆顶移动到合适位置；第三，返回数组最后一个元素</li><li><ul><li><code>percolate down（下溯）</code>： 将 元素 与其 子节点 比较，若 存在比元素大的子节点 ， 将最大的子节点与 元素 互换，继续这一步骤，直到不需要兑换。</li></ul></li></ul><p><code>make_heap</code>  ：</p><ul><li><ul><li>显然，只有一个节点的树必定是堆，那么在一个有 N 个节点的完全二叉树中，后面 N &#x2F; 2 个元素是叶子节点，直接就是堆，那么，就只需要 对前 N &#x2F;2 个元素 按 index 从大到小依次做 下溯 即可构建堆。</li></ul></li><li><ul><li>同样，从 vec[0] 开始，一个个做 push_heap 也是可以构建堆的。</li></ul></li></ul><p><code>heap_sort</code></p><ul><li>由 pop_heap 每次都可以返回堆中优先级最高的元素，并且在实现中可以直接放到 vec 尾部（这时堆不在访问它），所以可通过不断 pop 的方法来实现 数组排序。</li><li>堆排序算法的 时间复杂度为 Onlogn ;  空间复杂度为 O1; 堆排序是不稳定的排序</li></ul><p><strong>priority_queue</strong></p><ul><li>优先队列的底层是 堆， 但是因为 堆 &#x3D; 堆结构 + 堆算法， 堆结构 &#x3D; 完全二叉树 &#x3D; 数组，所以优先队列 的类中的成员变量 实际是一个 vector</li></ul><h3 id="使用技巧-2"><a href="#使用技巧-2" class="headerlink" title="使用技巧"></a>使用技巧</h3><ol><li>heap_sort 是一个 很快速很省内存的算法，时间 Onlogn, 空间 O1， 但是其是不稳定的</li><li>当优先队列中存储的元素数据类型是类时，使用 emplace 函数替代 PUSH 插入数据 可以减少一次拷贝构造，同 栈&#x2F;队列</li></ol><h3 id="源码阅读-4"><a href="#源码阅读-4" class="headerlink" title="源码阅读"></a>源码阅读</h3><p><a href="https://moyihp.github.io/2022/07/05/STL%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/#heap">https://moyihp.github.io/2022/07/05/STL%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/#heap</a><br><a href="https://moyihp.github.io/2022/07/05/STL%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/#priority_queue">https://moyihp.github.io/2022/07/05/STL%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/#priority_queue</a></p><hr><h2 id="set-x2F-multiset-集合-与-map-x2F-multimap-图"><a href="#set-x2F-multiset-集合-与-map-x2F-multimap-图" class="headerlink" title="set&#x2F;multiset 集合 与 map&#x2F;multimap 图"></a>set&#x2F;multiset 集合 与 map&#x2F;multimap 图</h2><ul><li>set 集合，所有的元素都会按照键值被自动排序，所有的元素都只有键值，而且元素键的键值不能重复</li><li>set 集合的迭代器 是 const 类型 的，即只能够访问 集合内的元素 而不能修改</li><li>插入&#x2F;删除 元素不会使得 操作目标 以外的元素的迭代器失效</li><li>multiset 与 set 的区别在于 multiset 允许有 键值 重复的元素存在</li></ul><h3 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">1. 构造 析构 - 注意如果使用 set 存储结构体类型数据时,该结构体必须重载 &lt; 运算法</span><br><span class="line">2. begin \ end \ rbegin \ rend 迭代器</span><br><span class="line">3. empty \ size \ clear \ max_size(返回最大存储)</span><br><span class="line">4. insert(val) 插入元素 返回值为 pair&lt;set::iterator,bool&gt;</span><br><span class="line">4.1 first = 插入元素在 set 中的迭代器, second = 是否插入成功</span><br><span class="line">5. find(val) 查找某个元素的迭代器,没有返回 end</span><br><span class="line">6. count(val) 判断某个元素是否存在</span><br><span class="line">7. erase(it) 删除元素</span><br><span class="line">8. lower_bound 返回&gt;=指定键值元素的迭代器 , uper_bound 返回&gt;=指定键值元素的迭代器 没有就返回 end</span><br><span class="line">9. equal_range  返回lower, uper的结果 以pair的形式</span><br></pre></td></tr></table></figure><h3 id="底层实现-5"><a href="#底层实现-5" class="headerlink" title="底层实现"></a>底层实现</h3><ol><li>set&#x2F;multiset 的底层通过 <code>红黑树</code> 来实现，而且是有虚拟头结点的</li><li>set &#x3D; rb_tree &#x3D; MyHead（虚拟头结点） + MySize</li><li>红黑树结点 &#x3D; Parent + Left + Right + Color + isNil + MyVal</li><li>红黑树 &#x3D;一种特殊的 自平衡 排序 二叉树</li></ol><h3 id="补充-红黑树数据结构理论部分"><a href="#补充-红黑树数据结构理论部分" class="headerlink" title="补充 红黑树数据结构理论部分"></a>补充 红黑树数据结构理论部分</h3><p><a href="https://blog.csdn.net/www_dong/article/details/114050053">https://blog.csdn.net/www_dong/article/details/114050053</a> </p><ul><li>红黑树是一种特殊的自平衡排序二叉树，它不是严格的平衡二叉树，所以它的平衡性较差，查找性能略弱于平衡二叉树（AVL_tree），但是它在插入和删除的时候发生树形结构调整的次数较少;</li><li>基于此，在 查找多修改少 的情况下，使用平衡二叉树；在 查找少修改多 的情况下，使用红黑树<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">平衡二叉树 ：</span><br><span class="line">1. | 左子树深度 - 右子树深度 | &lt;= 1</span><br><span class="line">2. 左、右子树也是平衡二叉树</span><br><span class="line">排序二叉树 ： </span><br><span class="line">1. 左子树所有结点 key &lt; 根结点 key &lt; 右子树所有结点 key</span><br><span class="line">2. 左、右子树也是排序二叉树</span><br><span class="line">红黑树 : </span><br><span class="line">+ 为每个结点标记一个颜色(R/B)</span><br><span class="line">+ 根结点为黑色BLACK</span><br><span class="line">+ [红属性] 红色RED结点 的子结点 必为 黑色结点BLACK</span><br><span class="line">+ [黑属性] 以任一结点到树根的所有路径中, 每条路径所含的黑色结点数目相同,NULL 视为是 黑色的</span><br><span class="line">+ 高度H &lt;= 2 * log(n+1) ; n为结点总数</span><br><span class="line">+ 黑高度BH ： 从树根到叶子节点(null)路径上所经过的黑色结点数</span><br><span class="line">+ 对于非空的树,新添加的结点必定为红色,且要求其父结点为黑色, 当不满足条件时需要调整树的结构  </span><br></pre></td></tr></table></figure></li></ul><h3 id="细节"><a href="#细节" class="headerlink" title="细节"></a>细节</h3><ul><li>红黑树的查找时间复杂度为 Ologn</li></ul><ol><li>为什么采用成倍的扩容而不是每次增加固定值，或更大倍数的扩容呢</li></ol><ul><li>成倍扩容可以保证 O1 时间复杂度，每次增加固定值只能达到 On</li><li>过大倍数的扩容会导致堆空间的浪费</li></ul><h3 id="源码阅读-5"><a href="#源码阅读-5" class="headerlink" title="源码阅读"></a>源码阅读</h3><p><a href="https://moyihp.github.io/2022/07/05/STL%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/#rb-tree">https://moyihp.github.io/2022/07/05/STL%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/#rb-tree</a><br><a href="https://moyihp.github.io/2022/07/05/STL%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/#set">https://moyihp.github.io/2022/07/05/STL%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/#set</a></p><hr><h2 id="unordered-set-x2F-hash-set-x2F-unordered-multiset-与-unordered-map-x2F-hash-map-x2F-unoedered-multimap"><a href="#unordered-set-x2F-hash-set-x2F-unordered-multiset-与-unordered-map-x2F-hash-map-x2F-unoedered-multimap" class="headerlink" title="unordered_set &#x2F; hash_set &#x2F; unordered_multiset 与 unordered_map &#x2F; hash_map &#x2F; unoedered_multimap"></a>unordered_set &#x2F; hash_set &#x2F; unordered_multiset 与 unordered_map &#x2F; hash_map &#x2F; unoedered_multimap</h2><ul><li>底层实现采用的是 hashtable + buket</li><li>hashtable 采用链地址法来处理冲突</li><li>hash&#x2F;unordered 其实是 本质 相同的，在源码上实现也是相近的</li><li>有关 multi 的实现和前文类似 ，也是通过 萃取器trait 传递了一个 multi 的 BOOL 变量来使得底层的 hashtable 能够感知</li></ul><hr><h2 id="trait-萃取器"><a href="#trait-萃取器" class="headerlink" title="trait 萃取器"></a>trait 萃取器</h2><h3 id="原理与作用"><a href="#原理与作用" class="headerlink" title="原理与作用"></a>原理与作用</h3><ul><li>已知 算法 通过 迭代器 访问和管理 容器内的数据；那么 算法是如果通过 迭代器 知道其所指向的元素的数据类型的呢？</li><li>萃取器 的作用即在于 提供迭代器（包括指针与常量指针）其所指向的元素的数据类型</li><li><ul><li>补充，对于迭代器，由于其是依赖于模板类实现了，所以是有可能直接在迭代器自身中存储其指向的数据类型的，如下所示；但是对于原生指针，其仅仅是一个32bit的数据，无法在其中存储数据类型的信息<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在迭代器中存储其所指向的数据类型</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Iter</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">typedef</span> T value_type;</span><br><span class="line">    T* ptr;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">I</span>&gt;</span><br><span class="line"><span class="function"><span class="keyword">typename</span> I::value_type <span class="title">func</span><span class="params">(I ite)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> *ite;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul></li><li>萃取器 实际推导的内容不仅包括 数据类型， 还包括pointer数据指针类型、reference数据引用类型、differenct_type两个迭代器之间的距离&#x2F;数据大小、iterator_category迭代器类型</li><li><ul><li>其中 iterator_category迭代器类型 的作用在于 分别不同类型的迭代器 以 方便算法能采用 更适合更高效的方法来实现<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">五个种类的迭代器</span><br><span class="line">  1. input iterator 这种迭代器只能读，只能一个一个向前进</span><br><span class="line">  2. output iterator 只能写，也只能一个一个前进</span><br><span class="line">  3. forward iterator 可以读可以写，只能前进</span><br><span class="line">  4. bidirectional iterator 可以读可以写，可以双向移动，不过一次还是只能移动一个单位</span><br><span class="line">  5. random access iterator 可以读可以写，而且可以进行算数能力，例如+n，-n，&lt;,&gt;等操作</span><br><span class="line"> </span><br><span class="line">常见迭代器属于</span><br><span class="line">vector&lt;T&gt;::iterator - random access iterator - 可读可写,随机访问</span><br><span class="line">list&lt;T&gt;::iterator - bidirectional iterator - 可读可写,双向移动</span><br><span class="line">list&lt;t&gt;::const_reverse_iterator - input iterator - 只读</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="源码阅读-6"><a href="#源码阅读-6" class="headerlink" title="源码阅读"></a>源码阅读</h3><p><a href="https://moyihp.github.io/2022/07/05/STL%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/#trait">https://moyihp.github.io/2022/07/05/STL%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/#trait</a></p><hr><h1 id="函数对象-x2F-仿函数"><a href="#函数对象-x2F-仿函数" class="headerlink" title="函数对象 &#x2F; 仿函数"></a>函数对象 &#x2F; 仿函数</h1><ul><li><code>函数对象 / 仿函数</code>指的是重载了调用操作符<code>()</code>的类的对象，它们是行为类似函数的类的对象，可以被以类似函数调用的方式来“调用”</li><li><code>仿函数</code> 本质来说仍旧是一个 类，因而其超出了 普通函数的概念，可以拥有<code>属性</code>(通过成员变量的形式来体现)， 当其重载调用操作符函数需要一个参数时，称之为<code>一元仿函数</code>，同理有<code>二元仿函数</code></li><li>当 函数对象 配合 模板技术 后，其可以实现很多高级功能</li><li>仿函数的作用在于 为 <code>STL 算法</code>提供不同的策略变化，STL算法<br>常常提供多个版本，其中一些适用于常见的某种运算策略，另外的则可以运行用户通过 template 参数的方式来选择 仿函数，从而实现不同的运算策略</li><li><code>谓词</code>  返回值为BOOL类型的普通函数或者仿函数，同样，有<code>一/二元谓词</code></li></ul><p>为什么 有了函数指针 还要有 函数对象？</p><ul><li>函数对象 能够配合 模板技术 实现抽象的数据处理</li><li>函数对象 能够与 STL 其他组件配合 产生更为灵活的变化</li></ul><p>系统内建函数对象</p><ul><li>头文件 <code>&lt;functional&gt;</code></li><li><ol><li>算术类<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt; T plus&lt;T&gt;<span class="comment">//  加法</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt; T minus&lt;T&gt;<span class="comment">//  减法</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt; T multiplies&lt;T&gt;<span class="comment">//  乘法</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt; T divides&lt;T&gt;<span class="comment">//  除法</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt; T modulus&lt;T&gt;<span class="comment">//  取模</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt; T negate&lt;T&gt;<span class="comment">//  取反</span></span><br></pre></td></tr></table></figure></li></ol></li><li><ol start="2"><li>运算类<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt; <span class="type">bool</span> equal_to&lt;T&gt;<span class="comment">//  等于</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt; <span class="type">bool</span> not_equal_to&lt;T&gt;<span class="comment">// 不 等于</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt; <span class="type">bool</span> greater&lt;T&gt;<span class="comment">//  大于</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt; <span class="type">bool</span> greater_equal&lt;T&gt;<span class="comment">//大于等于</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt; <span class="type">bool</span> less&lt;T&gt;<span class="comment">//  小于</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt; <span class="type">bool</span> less_equal&lt;T&gt;<span class="comment">//  小于等于</span></span><br></pre></td></tr></table></figure></li></ol></li><li><ol start="3"><li>逻辑类<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt; <span class="type">bool</span> logical_and&lt;T&gt;<span class="comment">//  逻辑与</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt; <span class="type">bool</span> logical_or&lt;T&gt;<span class="comment">//  逻辑或</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt; <span class="type">bool</span> logical_not&lt;T&gt;<span class="comment">//  逻辑非</span></span><br></pre></td></tr></table></figure></li></ol></li></ul><hr><h1 id="适配器-1"><a href="#适配器-1" class="headerlink" title="适配器"></a>适配器</h1><p>  <code>适配器 Adapter</code> 这个概念，其实是一种设计模式(design pattern，即将一个 class 的接口转换为另一个 class 的接口，使得原本因接口不兼容而不能合作的 classes，可以一起运作。适配器可以对容器、迭代器和仿函数进行适配，进而产生了多种适配器 - 容器适配器、仿函数适配器、迭代器适配器。</p><h2 id="容器适配器"><a href="#容器适配器" class="headerlink" title="容器适配器"></a>容器适配器</h2><p>  这个在容器中已经提到过，<code>stack \ queue</code>实际上属于是<code>deque</code>的适配器。</p><h2 id="迭代器适配器"><a href="#迭代器适配器" class="headerlink" title="迭代器适配器"></a>迭代器适配器</h2><p>  <code>reverse_iterator</code> 实际上就是 <code>iterator</code>的适配器</p><h2 id="仿函数适配器"><a href="#仿函数适配器" class="headerlink" title="仿函数适配器"></a>仿函数适配器</h2><p>  狭义上的适配器大部分情况是用来修饰仿函数的，包括三种 <code>bind2nd</code> \ <code>not1</code> \ <code>bind</code> 仿函数适配器</p><h3 id="仿函数的可适配化"><a href="#仿函数的可适配化" class="headerlink" title="仿函数的可适配化"></a>仿函数的可适配化</h3><p>  STL 仿函数应该有能力被函数配接器配接，为了拥有配接能力，每一个仿函数必须定义自己的相应型别，就像迭代器如果要融入整个 STL 大家庭，也必须依照规定定义自己的5个型别一样，这些相应型别是为了让配接器能够通过萃取器取出，获得仿函数的某些信息（仿函数能够保存信息，函数指针则不能）。相应型别都只是一些typedef，所以必要操作都在编译期就全部完成了，对程序的执行效率没有任何影响。<br>  仿函数采用类继承的方式来选定自己的型别，同时这要求仿函数的重载()函数需要为const类型的常函数，因为其需要继承的类中定义了该函数常函数。</p><ol><li><code>unary_function&lt;T_Arg,T2_Return&gt;</code><br> <code>unary_funcion</code>用于呈现一元函数的参数型别与返回值型别</li><li><code>binary_function&lt;T_Arg1,T_Arg2,T_Return&gt;</code><br> <code>binary_function</code>用于呈现二元函数的参数型别与返回值型别<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 从源码也可以看到 这些类其实也就只是包含了一些型别定义</span></span><br><span class="line"><span class="comment">// stuff from &lt;functional&gt;</span></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> _HAS_AUTO_PTR_ETC</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">_Arg</span>, <span class="keyword">class</span> <span class="title class_">_Result</span>&gt;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">unary_function</span> &#123; <span class="comment">// base class for unary functions</span></span><br><span class="line">    <span class="keyword">using</span> argument_type = _Arg;</span><br><span class="line">    <span class="keyword">using</span> result_type   = _Result;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">_Arg1</span>, <span class="keyword">class</span> <span class="title class_">_Arg2</span>, <span class="keyword">class</span> <span class="title class_">_Result</span>&gt;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">binary_function</span> &#123; <span class="comment">// base class for binary functions</span></span><br><span class="line">    <span class="keyword">using</span> first_argument_type  = _Arg1;</span><br><span class="line">    <span class="keyword">using</span> second_argument_type = _Arg2;</span><br><span class="line">    <span class="keyword">using</span> result_type          = _Result;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">// _HAS_AUTO_PTR_ETC</span></span></span><br></pre></td></tr></table></figure></li></ol><h3 id="函数适配器的使用"><a href="#函数适配器的使用" class="headerlink" title="函数适配器的使用"></a>函数适配器的使用</h3><ol><li>函数对象适配器的使用 参数的绑定 <code>bind</code>\ <code>bind1st</code> \ <code>bind2nd</code> \ <code>not1</code><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">bind2nd</span>(仿函数,额外参数)<span class="comment">// 将额外参数绑定到仿函数的第二个参数上</span></span><br><span class="line"><span class="built_in">bind1st</span>(仿函数,额外参数)<span class="comment">// 将额外参数绑定到仿函数的第一参数上</span></span><br><span class="line"><span class="built_in">not1</span>(仿函数)   <span class="comment">// 将仿函数的输出值取反</span></span><br></pre></td></tr></table></figure><code>源码不多 所以就放在这里了...</code><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 从源码可以很容易看到 bind2nd 与 bind1st 的区别 </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">_Fn</span>, <span class="keyword">class</span> <span class="title class_">_Ty</span>&gt;</span><br><span class="line"><span class="function">_NODISCARD binder1st&lt;_Fn&gt; <span class="title">bind1st</span><span class="params">(<span class="type">const</span> _Fn&amp; _Func, <span class="type">const</span> _Ty&amp; _Left)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">typename</span> _Fn::first_argument_type _Val(_Left);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">binder1st</span>&lt;_Fn&gt;(_Func, _Val);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">_Fn</span>, <span class="keyword">class</span> <span class="title class_">_Ty</span>&gt;</span><br><span class="line"><span class="function">_NODISCARD binder2nd&lt;_Fn&gt; <span class="title">bind2nd</span><span class="params">(<span class="type">const</span> _Fn&amp; _Func, <span class="type">const</span> _Ty&amp; _Right)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">typename</span> _Fn::second_argument_type _Val(_Right);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">binder2nd</span>&lt;_Fn&gt;(_Func, _Val);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// binder2nd</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">_Fn</span>&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">binder2nd</span> : <span class="keyword">public</span> unary_function&lt;<span class="keyword">typename</span> _Fn::first_argument_type,</span><br><span class="line">                      <span class="keyword">typename</span> _Fn::result_type&gt; &#123; <span class="comment">// functor adapter _Func(left, stored)</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">using</span> _Base         = unary_function&lt;<span class="keyword">typename</span> _Fn::first_argument_type, <span class="keyword">typename</span> _Fn::result_type&gt;;</span><br><span class="line">    <span class="keyword">using</span> argument_type = <span class="keyword">typename</span> _Base::argument_type;</span><br><span class="line">    <span class="keyword">using</span> result_type   = <span class="keyword">typename</span> _Base::result_type;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">binder2nd</span>(<span class="type">const</span> _Fn&amp; _Func, <span class="type">const</span> <span class="keyword">typename</span> _Fn::second_argument_type&amp; _Right) : <span class="built_in">op</span>(_Func), <span class="built_in">value</span>(_Right) &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 可以看到 适配器实质是把参数提取出来以后调用执行了目标函数 然后返回返回值</span></span><br><span class="line"><span class="comment">// 另外 这里重载的 () 函数是 const 的 所以继承适配器以后 重载()函数也要是 const 的</span></span><br><span class="line">    <span class="function">result_type <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="type">const</span> argument_type&amp; _Left)</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">op</span>(_Left, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">result_type <span class="title">operator</span><span class="params">()</span><span class="params">(argument_type&amp; _Left)</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">op</span>(_Left, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    _Fn op;  <span class="comment">// 函数指针</span></span><br><span class="line">    <span class="keyword">typename</span> _Fn::second_argument_type value; <span class="comment">// the right operand</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">使用仿函数适配器的步骤</span><br><span class="line">1. 仿函数类继承合适的型别类</span><br><span class="line">2. 将重载()函数设置为const类型 - 因为继承后这是overload了父类函数</span><br><span class="line">3. 在函数调用时使用合适的函数适配器绑定参数</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 示例 利用适配器binary_function拓展仿函数MyPrint,配合算法for_each完成了对 vec 内容加 start 输出</span></span><br><span class="line"><span class="comment">// for_each函数原本是 func(*it) 的执行逻辑 </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyPrint</span> : <span class="keyword">public</span> binary_function&lt;<span class="type">int</span>,<span class="type">int</span>,<span class="type">void</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="type">int</span> val, <span class="type">int</span> start)</span> <span class="type">const</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; val + start &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; vec = &#123; <span class="number">1</span>,<span class="number">3</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">5</span>,<span class="number">2</span> &#125;;</span><br><span class="line"><span class="type">int</span> start = <span class="number">1</span>;</span><br><span class="line">for_each(vec.<span class="built_in">begin</span>(), vec.<span class="built_in">end</span>(), <span class="built_in">bind2nd</span>(<span class="built_in">MyPrint</span>(), start));</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li>普通回调函数的适配</li></ol><ul><li>算法函数 不光只能接收函数对象 其也能接收普通函数</li><li>为了让普通函数也能够被仿函数适配器适配，可以使用 <code>ptr_fun</code>适配器将其改造为仿函数<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">void myprint(int val, int start)&#123;...&#125;</span><br><span class="line"></span><br><span class="line">for_each(vec.begin(),vec.end(),bind2nd(ptr_fun(myprint), start));</span><br></pre></td></tr></table></figure></li></ul><ol start="3"><li>普通类的成员函数的适配</li></ol><ul><li><code>mem_prt_ref</code><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span> :</span><br><span class="line"><span class="built_in">ShowPerson</span>()&#123;...&#125;;</span><br><span class="line">&#125;</span><br><span class="line">vector&lt;Person&gt; vec;</span><br><span class="line">for_each(vec.<span class="built_in">begin</span>(),vec.<span class="built_in">end</span>(),<span class="built_in">mem_ptr_ref</span>(&amp;Person::ShowPerson));</span><br></pre></td></tr></table></figure></li></ul><hr><h1 id="常用算法"><a href="#常用算法" class="headerlink" title="常用算法"></a>常用算法</h1><p>头文件<code>&lt;algorithm&gt;``&lt;numeric&gt;``&lt;functional&gt;</code></p><h2 id="遍历算法"><a href="#遍历算法" class="headerlink" title="遍历算法"></a>遍历算法</h2><h3 id="1-for-each"><a href="#1-for-each" class="headerlink" title="1. for_each"></a>1. for_each</h3><p><code>for_each(beg1,beg2,callback)</code><br>从 begin 到 end 遍历目标与元素，并以元素值为参数调用函数 callback<br><strong>源码</strong><br><a href="https://moyihp.github.io/2022/07/05/STL%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/#for-each">https://moyihp.github.io/2022/07/05/STL%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/#for-each</a></p><h3 id="2-transform"><a href="#2-transform" class="headerlink" title="2.transform"></a>2.transform</h3><p><code>transform(beg1,end1,beg2,callback)</code><br>将 [beg1,end1) 经过 callback 处理后 搬运到 [beg2,… 中</p><ul><li><ol><li>callback 函数的 返回值类型要和容器元素类型一致</li></ol></li><li><ol start="2"><li>提前要对容器2做好容量开辟工作<br><strong>示例</strong><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">func</span><span class="params">(<span class="type">int</span> val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> val;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">(<span class="type">int</span> val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; val &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; vec = &#123; <span class="number">1</span>,<span class="number">3</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">5</span>,<span class="number">2</span> &#125;;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; v2;</span><br><span class="line"><span class="comment">// 提前准备空间 不然会发生越界访问问题</span></span><br><span class="line">v2.<span class="built_in">resize</span>(vec.<span class="built_in">size</span>());</span><br><span class="line"><span class="comment">// transform</span></span><br><span class="line"><span class="built_in">transform</span>(vec.<span class="built_in">begin</span>(), vec.<span class="built_in">end</span>(), v2.<span class="built_in">begin</span>(), func);</span><br><span class="line"><span class="comment">// for_each</span></span><br><span class="line">for_each(v2.<span class="built_in">begin</span>(), v2.<span class="built_in">end</span>(), print);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><strong>源码</strong><br><a href="https://moyihp.github.io/2022/07/05/STL%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/#transform">https://moyihp.github.io/2022/07/05/STL%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/#transform</a></li></ol></li></ul><hr><h2 id="查找算法"><a href="#查找算法" class="headerlink" title="查找算法"></a>查找算法</h2><h3 id="1-find-and-find-if"><a href="#1-find-and-find-if" class="headerlink" title="1. find and find_if"></a>1. find and find_if</h3><p><code>find(beg,end,val)</code>返回[beg,end)第一个等于val的值的迭代器，如果未找到，返回end<br><code>find_if(beg,end,callback)</code> 查找满足callback函数的元素</p><ul><li>使用 find 函数查找自定义数据类型时，需要重载 <code>==</code> 运算符</li><li>使用 find_if 函数时，callback函数的返回值要求为 BOOL 类型</li></ul><p><strong>示例 使用find_if查找自定义类型</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Person 类定义</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">string name;</span><br><span class="line"><span class="type">int</span> age;</span><br><span class="line"><span class="built_in">Person</span>(string _name, <span class="type">int</span> _age) : <span class="built_in">name</span>(_name), <span class="built_in">age</span>(_age) &#123;&#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 回调函数定义</span></span><br><span class="line"><span class="comment">// 注意 返回值为BOOL型 参数有两个</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">callback</span><span class="params">(Person* p1,Person* p2)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> p1-&gt;name == p2-&gt;name &amp;&amp; p1-&gt;age == p2-&gt;age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">vector&lt;Person*&gt; vp;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">vp.<span class="built_in">push_back</span>(<span class="keyword">new</span> <span class="built_in">Person</span>(<span class="built_in">to_string</span>(i), i));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Person* p = <span class="keyword">new</span> <span class="built_in">Person</span>(<span class="string">&quot;2&quot;</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这里注意 因为参数有两个 所以要做适配器 bind2nd; </span></span><br><span class="line"><span class="comment">// 又因为callback只是一个普通函数, 所以使用 ptr_fun 将其转化为函数对象</span></span><br><span class="line">vector&lt;Person*&gt;::iterator it = <span class="built_in">find_if</span>(vp.<span class="built_in">begin</span>(), vp.<span class="built_in">end</span>(), <span class="built_in">bind2nd</span>(<span class="built_in">ptr_fun</span>(callback),p));</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (it != vp.<span class="built_in">end</span>())</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; (*it)-&gt;name &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; (*it)-&gt;age &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>源码</strong><br><a href="https://moyihp.github.io/2022/07/05/STL%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/#find">https://moyihp.github.io/2022/07/05/STL%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/#find</a><br><a href="https://moyihp.github.io/2022/07/05/STL%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/#find-if">https://moyihp.github.io/2022/07/05/STL%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/#find-if</a></p><h3 id="2-adjacent-find"><a href="#2-adjacent-find" class="headerlink" title="2. adjacent_find"></a>2. adjacent_find</h3><p><code>adjancent_find(beg,end,callback)</code> 查找第一个相邻的满足callback的元素，如果缺省callback 则默认为相等<br><strong>源码</strong><br><a href="https://moyihp.github.io/2022/07/05/STL%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/#adjacent-find">https://moyihp.github.io/2022/07/05/STL%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/#adjacent-find</a></p><h3 id="3-binary-search"><a href="#3-binary-search" class="headerlink" title="3. binary_search"></a>3. binary_search</h3><p><code>binary_search(beg,end,val)</code> 使用二分查找法查找val，返回值为BOOL，是否存在<br>注意只能在有序容器中使用</p><h3 id="4-count-x2F-count-if"><a href="#4-count-x2F-count-if" class="headerlink" title="4. count &#x2F; count_if"></a>4. count &#x2F; count_if</h3><p><code>count(beg,end,val)</code> 统计元素出现的次数<br><code>count_if(beg,end,callback</code> 统计满足条件的元素出现的次数</p><hr><h2 id="排序算法"><a href="#排序算法" class="headerlink" title="排序算法"></a>排序算法</h2><h3 id="1-merge"><a href="#1-merge" class="headerlink" title="1. merge"></a>1. merge</h3><p><code>merge(beg1,end1,beg2,end2,dst)</code> 将容器1、2的元素归并到dst所指空间中</p><ul><li>容器1 2 需要有序</li><li>dst需要提前做空间拓展<br><strong>源码</strong><br><a href="https://moyihp.github.io/2022/07/05/STL%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/#merge">https://moyihp.github.io/2022/07/05/STL%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/#merge</a></li></ul><h3 id="2-sort"><a href="#2-sort" class="headerlink" title="2. sort"></a>2. sort</h3><p><code>sort(beg,end,callback)</code> 排序<br><strong>重点 ~ SORT的实现逻辑</strong></p><ul><li><ol><li>首先区分需要排序的数据类型</li></ol></li><li><ul><li>对于用户自定义数据类型，需要保持排序稳定性，因而采用归并排序</li></ul></li><li><ul><li>对于系统内属性数据类型，如INT,CHAR，不需要保持排序稳定性，因而采用快速排序</li></ul></li><li><p>不论是归并排序还是快速排序，它们都采用了递归分块的思想，当需要排序的块大小较小的时候，采用 选择排序</p></li><li><p>以上的原理是</p></li><li><ul><li>归并排序 稳定 时间复杂度Onlogn 空间复杂度On</li></ul></li><li><ul><li>快速排序 不稳定 时间复杂度Onlogn 空间复杂度O1</li></ul></li><li><ul><li>选择排序 稳定 时间复杂度On^2 空间复杂度O1</li></ul></li><li><ul><li>在数据量较大时 归并排序、快速排序较为优势；当数据量较小时，选择排序较为优势</li></ul></li></ul><p><strong>快速排序 piv 的选择</strong></p><ul><li><p>快速排序是在待排序数组中找到一个枢纽元 即piv ，将数组分为大于枢纽元与小于枢纽元两部分来处理，运用分治法的思想进行递归。算法的平均运行时间是Onlogn，最坏的情形(枢纽元每次都选到了当前处理部分的最大&#x2F;最小元素)，性能为On^2，此时快排相当于退化成为了选择排序。<br>采用了三数中值法来对枢纽元进行选取，可以有效规避最坏的情形。</p></li><li><p>三数中值法<br> 取待排序数组的首位数，中位数与末尾数优先进行简单排序，然后将排序后的值分别按大小顺序插入到原数组首部，中部及尾部并取三数的中的中值作为枢纽元 piv。这种处理方法适用于对数据量较大的数据进行排序，而对于数据量较小的数据则表现一般。</p></li><li><p>Tukey’s ninther法<br>三数中值法需要获取整个数组的中位数，这要求对整个数组进行存储和大量的比较操作。Tukey’s ninthe是一个堆数组中位数的简单预测求法，分为以下步骤</p><ol><li>按照一定的间隔在数组中取出共计 9 个数 - Y1 Y2 Y3 Y4 Y5 Y6 Y7 Y8 Y9</li><li>使用三次  medianof3 来求得 Y1\2\3 的中位数 X1，Y4\5\6的中位数 X2，Y7\8\9的中位数 X3</li><li>再次使用 medianof3 来求得 X1\2\3 的中位数，并以此作为整个数组的中位数的预测值</li></ol></li></ul><p><strong>源码阅读</strong><br><a href="https://moyihp.github.io/2022/07/05/STL%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/#sort">https://moyihp.github.io/2022/07/05/STL%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/#sort</a><br><a href="https://moyihp.github.io/2022/07/05/STL%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/#quict-sort">https://moyihp.github.io/2022/07/05/STL%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/#quict-sort</a></p><h3 id="3-random-shuffle"><a href="#3-random-shuffle" class="headerlink" title="3. random_shuffle"></a>3. random_shuffle</h3><p><code>random_shuffle(beg,end)</code> 对范围内的元素做随机次序调整<br><strong>洗牌算法</strong><br><a href="https://blog.csdn.net/qq_26399665/article/details/79831490">https://blog.csdn.net/qq_26399665/article/details/79831490</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">洗牌算法是一种随机打乱元素次序的算法，它有着很多的变种</span><br><span class="line"> 1. Fisher-Yates Shuffle 每次从原始数组中随机取一个之前没取过的数字到新的数组中 时间复杂度 On^2 空间复杂度 On</span><br><span class="line"> 2. Knuth-Durstenfeld Shuffle 每次从未处理的数据中随机取出一个数字，然后把该数字放在数组的尾部，即数组尾部存放的是已经处理过的数字 时间复杂度 On 空间复杂度 O1</span><br><span class="line"> 3. Inside-Out Algorithm 从前向后扫描数据，把位置i的数据随机插入到前i个（包括第i个）位置中（假设为k），这个操作是在新数组中进行，然后把原始数据中位置k的数字替换新数组位置i的数字。其实效果相当于新数组中位置k和位置i的数字进行交互 时间复杂度 On 空间复杂度 O1 </span><br></pre></td></tr></table></figure><p>STL 中 random_shuffle 采用的处理类似于 3. Inside-Out Algorithm</p><p><strong>源码阅读</strong><br><a href="https://moyihp.github.io/2022/07/05/STL%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/#random-shuffle">https://moyihp.github.io/2022/07/05/STL%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/#random-shuffle</a></p><h3 id="4-reverse"><a href="#4-reverse" class="headerlink" title="4.reverse"></a>4.reverse</h3><p>略</p><hr><h2 id="拷贝-x2F-替换算法"><a href="#拷贝-x2F-替换算法" class="headerlink" title="拷贝&#x2F;替换算法"></a>拷贝&#x2F;替换算法</h2><h3 id="copy"><a href="#copy" class="headerlink" title="copy"></a>copy</h3><p><code>copy(beg,end,dst)</code> 将[beg,end)的内容拷贝到[dst,…) </p><ul><li>同样注意提前申请空间</li></ul><h3 id="replace-x2F-replace-if"><a href="#replace-x2F-replace-if" class="headerlink" title="replace &#x2F; replace_if"></a>replace &#x2F; replace_if</h3><p><code>replace(beg,end,oldval,newval)</code> 将[beg,end)中值为oldval的元素值替换为newval<br><code>replace_if(beg,end,callback,newval)</code> 将[beg,end)中元素值满足callback的元素的值替换为 newval</p><h3 id="swap"><a href="#swap" class="headerlink" title="swap"></a>swap</h3><p><code>swap(container c1, c2)</code> 交换容器c1 c2 的内容</p><hr><h2 id="算术生成算法"><a href="#算术生成算法" class="headerlink" title="算术生成算法"></a>算术生成算法</h2><p><strong>头文件 <code>&lt;numeric&gt;</code></strong></p><h3 id="accumulate"><a href="#accumulate" class="headerlink" title="accumulate"></a>accumulate</h3><p><code>accumulate(beg,end,val)</code> 计算[beg,end)的元素值的累加和 + val(累加的起始值)</p><h3 id="fill"><a href="#fill" class="headerlink" title="fill"></a>fill</h3><p><code>fill(beg,end,val)</code> 使用val填充[beg,end)</p><hr><h2 id="集合算法"><a href="#集合算法" class="headerlink" title="集合算法"></a>集合算法</h2><p><strong>适用容器须为两个有序的序列</strong><br><strong>注意 dst 的空间开辟</strong></p><h3 id="set-union"><a href="#set-union" class="headerlink" title="set_union"></a>set_union</h3><p><code>set_union(s1.begin(), s1.end(), s2.begin(), s2.end(), s);</code> 求s1 s2的并集并将其放置在s，返回值为 结果部分在s中的最后一个元素的迭代器 itEnd</p><h3 id="set-intersection"><a href="#set-intersection" class="headerlink" title="set_intersection"></a>set_intersection</h3><p><code>set_intersection(s1.begin(), s1.end(), s2.begin(), s2.end(), s);</code> 求s1 s2的交集并将其放置在s，结果部分在s中的最后一个元素的迭代器 itEnd</p><h3 id="set-difference"><a href="#set-difference" class="headerlink" title="set_difference"></a>set_difference</h3><p><code>set_difference(s1.begin(), s1.end(), s2.begin(), s2.end(), s);</code> 求s1 s2的差集并将其放置在s，结果部分在s中的最后一个元素的迭代器 itEnd</p>]]></content>
      
      
      
        <tags>
            
            <tag> 面试 </tag>
            
            <tag> C++ </tag>
            
            <tag> STL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++之C11新特性</title>
      <link href="/2022/07/04/C-%E4%B9%8BC11%E6%96%B0%E7%89%B9%E6%80%A7/"/>
      <url>/2022/07/04/C-%E4%B9%8BC11%E6%96%B0%E7%89%B9%E6%80%A7/</url>
      
        <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/weixin_51025559/article/details/123721245">https://blog.csdn.net/weixin_51025559/article/details/123721245</a></p><h1 id="智能指针"><a href="#智能指针" class="headerlink" title="智能指针"></a>智能指针</h1><ul><li>智能指针是为了解决new&#x2F;free自由分配内存不当（申请了没释放）而导致的内存泄漏问题而出现的</li><li>智能指针是一个类，这个类的构造函数中传入一个普通指针，析构函数中释放传入的指针。智能指针的类都是栈上的对象，所以当函数（或程序）结束时会自动被释放</li><li>智能指针可以自动释放不再使用的内存，能够有效的防止内存泄漏。</li><li>智能指针是一个对象，普通指针是一个变量。</li><li>智能指针是对普通指针的封装，其安全性要高于直接使用普通指针。</li></ul><h2 id="智能指针分类"><a href="#智能指针分类" class="headerlink" title="智能指针分类"></a>智能指针分类</h2><p><strong>共享的智能指针shared_ptr</strong></p><ul><li><ul><li>shared_ptr多个指针指向相同的对象</li></ul></li><li><ul><li><ul><li><em>一般情况下，多个普通指针指向同一块内存区域会导致 “指针悬垂”，即该内存区域已经被某个指针释放了，但是其他指针无法感知这一信息，从而导致它们指向了已经被释放的内存区域，成为野指针</em></li></ul></li></ul></li><li><ul><li>每一个shared_ptr的拷贝都指向相同的内存</li></ul></li><li><ul><li>shared_ptr使用引用计数，不再被引用时，自动删除所指向的堆内存</li></ul></li><li><ul><li>shared_ptr维护了一个指向control block的指针对象，来记录引用个数(shared_ptr计数的原理）</li></ul></li><li><ul><li><ul><li>控制块control block，由第一个被创建的shared_ptr创建，当最后一个 shared_ptr 被销毁时释放<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">shared_ptr1 -&gt; control block ptr and ptr</span><br><span class="line">shared_ptr2 -&gt; control block ptr and ptr</span><br><span class="line">control block(ptr,refs[])ptr -&gt; 内存区域 refs 记录了所有的引用</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul><p><strong>独占的智能指针unique_ptr</strong></p><ul><li><ul><li>同一时刻只能有一个unique_ptr指向给定对象，所以不支持拷贝与赋值</li></ul></li><li><ul><li>离开作用域时，若其指向对象，则将其所指对象销毁</li></ul></li></ul><p><strong>弱引用的智能指针weak_ptr</strong></p><ul><li><ul><li>weak_ptr可以从一个shared_ptr或者另一个weak_ptr对象构造，获得资源的观测权，但不能操作shared_ptr指向的内容</li></ul></li><li><ul><li>使用weak_ptr的成员函数use_count()可以观测资源的引用计数</li></ul></li><li><ul><li>weak_ptr可以使用成员函数lock()从被观测的shared_ptr获得一个可用的shared_ptr对象， 从而操作资源</li></ul></li><li><ul><li>expired()：检查被引用的对象是否已删除</li></ul></li></ul><h2 id="常见题目"><a href="#常见题目" class="headerlink" title="常见题目"></a>常见题目</h2><ol><li><p>智能指针的定义与原理<br>智能指针是一个类，这个类的构造函数中传入一个普通指针，析构函数中释放传入的指针。智能指针的类都是栈上的对象，所以当函数（或程序）结束时会自动被释放</p></li><li><p>shared_ptr计数的原理<br>shared_ptr维护了一个指向control block的指针对象，来记录引用个数，这个引用个数存储在 use_count 成员变量中</p></li><li><p>shared_ptr存在的问题及解决方法<br>1）问题 ： 循环引用问题 , 这会导致内存释放时二者互相牵制从而无法释放内存，导致内存泄漏</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">block1 [...shared_ptr1...]p1 -&gt; block2</span><br><span class="line">block2 [..shared_ptr2....]  p2 -&gt; block1</span><br></pre></td></tr></table></figure><p>2）解决方法，使用 弱引用的智能指针 weak_ptr</p></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> 面试 </tag>
            
            <tag> CPP </tag>
            
            <tag> C11 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法练习之数组</title>
      <link href="/2022/07/03/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0%E4%B9%8B%E6%95%B0%E7%BB%84/"/>
      <url>/2022/07/03/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0%E4%B9%8B%E6%95%B0%E7%BB%84/</url>
      
        <content type="html"><![CDATA[<p><em>题目均来自力扣网</em></p><h1 id="二分法"><a href="#二分法" class="headerlink" title="二分法"></a>二分法</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">一点小理解：</span><br><span class="line">1.二分法的核心在于对于区间的定义，其决定了循环不变量与区间变化的模式，采用不同区间定义时注意循环条件与l,r变化的规律</span><br><span class="line"></span><br><span class="line">2.二分法可用于解决两类问题 即 二分查找问题 与 二分定界问题</span><br><span class="line">对于二分查找问题:重视mid的作用,l与r之间的元素是有意义的,即[l,r]的元素是存在target的是有意义的</span><br><span class="line">对于二分定界问题:重视l与r的作用,即l]...[r的两侧元素是有意义的,是满足边界条件的</span><br><span class="line"></span><br><span class="line">对于二分查找与二分定界选择合适的区间定义是很有必要的,不然会导致代码需要处理的特殊情况很多很多</span><br><span class="line">3.二分查找采用 [l,r]更加的有意义，因为需要保证区间内的元素是有意义的</span><br><span class="line"></span><br><span class="line">4.二分定界采用 (l,r)更加的有意义，因为需要保证区间两侧的元素是有意义的</span><br><span class="line"></span><br><span class="line">5.对于 mid 的计算方法，应采用 `mid = left + (right - left) / 2`，而非`mid = (left + right) / 2`以防止溢出问题</span><br></pre></td></tr></table></figure><hr><h2 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h2><h3 id="理论"><a href="#理论" class="headerlink" title="理论"></a>理论</h3><ul><li>二分查找用于对顺序查找的优化 其时间复杂度为 logN</li><li>使用前提是 <strong>数组是有序的</strong> 且 <strong>不存在重复元素</strong></li><li>这里采用**[l,r]**区间定义</li><li><ul><li>初始 &#96;left &#x3D; 0; right &#x3D; size - 1;</li></ul></li><li><ul><li>循环条件 <code>left &lt; right</code></li></ul></li><li><ul><li>变化时 <code>left = mid + 1 or right = mid - 1</code></li></ul></li></ul><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><ol><li><a href="https://leetcode.cn/problems/binary-search/">https://leetcode.cn/problems/binary-search/</a><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">search</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> target)</span> </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="type">int</span> left = <span class="number">0</span>, right = nums.<span class="built_in">size</span>() - <span class="number">1</span> , mid = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(left &lt;= right)</span><br><span class="line">        &#123;</span><br><span class="line">            mid = left + (right - left) / <span class="number">2</span> ;</span><br><span class="line">            <span class="keyword">if</span>(nums[mid] &gt; target)</span><br><span class="line">            &#123;</span><br><span class="line">                right = mid - <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(nums[mid] &lt; target)</span><br><span class="line">            &#123;</span><br><span class="line">                left = mid + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> mid;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol><hr><ol start="2"><li><a href="https://leetcode.cn/problems/search-insert-position/">https://leetcode.cn/problems/search-insert-position/</a><br>给定一个排序数组和一个目标值，在数组中找到目标值，并返回其索引。如果目标值不存在于数组中，返回它将会被按顺序插入的位置。</li></ol><ul><li>这是对于二分查找停止情况的共性的考察</li><li>题目中的情况与二分查找后的停止情况如下<table><thead><tr><th></th><th></th><th></th><th></th><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><td>数组元素(括号内为待查找)</td><td>(0)</td><td>1</td><td>(2)</td><td>3</td><td>(3)</td><td>5</td><td>(6)</td></tr><tr><td>停止时指针的位置</td><td>r</td><td>l</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td></td><td></td><td>r</td><td></td><td>l</td><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td><td>r</td><td></td><td>l</td><td></td></tr><tr><td></td><td></td><td></td><td></td><td></td><td></td><td>r</td><td>l</td></tr></tbody></table></li><li>可以发现，若没有目标元素，停止查找时 r + 1 就是该元素应该的位置<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">searchInsert</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> target)</span> </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line"><span class="type">int</span> left = <span class="number">0</span>, right = nums.<span class="built_in">size</span>() - <span class="number">1</span> , mid = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(left &lt;= right)</span><br><span class="line">        &#123;</span><br><span class="line">            mid = left + (right - left) / <span class="number">2</span> ;</span><br><span class="line">            <span class="keyword">if</span>(nums[mid] &gt; target)</span><br><span class="line">            &#123;</span><br><span class="line">                right = mid - <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(nums[mid] &lt; target)</span><br><span class="line">            &#123;</span><br><span class="line">                left = mid + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> mid;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> right + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul><hr><ol start="3"><li><a href="https://leetcode.cn/problems/valid-perfect-square/">https://leetcode.cn/problems/valid-perfect-square/</a><br>给定一个 正整数 num ，编写一个函数，如果 num 是一个完全平方数，则返回 true ，否则返回 false 。进阶：不要 使用任何内置的库函数，如  sqrt 。</li></ol><ul><li>明确的二分查找问题，查找满足 x * x &#x3D; num的元素是否存在<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isPerfectSquare</span><span class="params">(<span class="type">int</span> num)</span> </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> left = <span class="number">0</span>, right = num, mid = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (left &lt;= right)</span><br><span class="line">        &#123;</span><br><span class="line">            mid = left + (right - left) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (mid * mid &gt; num)</span><br><span class="line">            &#123;</span><br><span class="line">                right = mid - <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(mid * mid &lt; num)</span><br><span class="line">            &#123;</span><br><span class="line">                left = mid + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul><hr><h2 id="二分定界问题"><a href="#二分定界问题" class="headerlink" title="二分定界问题"></a>二分定界问题</h2><h3 id="理论-1"><a href="#理论-1" class="headerlink" title="理论"></a>理论</h3><ul><li>采用<code>(l,r)</code>的区间以保证<code>l]...[r</code>的有意义区间</li><li><ul><li>初始 <code>left = -1, right = size</code></li></ul></li><li><ul><li>循环条件 <code>left + 1 != right</code> <em>用 left &lt;  right 会导致死循环</em></li></ul></li><li><ul><li>变化规律 <code>left = mid or right = mid</code></li></ul></li></ul><h3 id="红蓝区域理解二分定界"><a href="#红蓝区域理解二分定界" class="headerlink" title="红蓝区域理解二分定界"></a>红蓝区域理解二分定界</h3><p><a href="https://www.bilibili.com/video/BV1d54y1q7k7">https://www.bilibili.com/video/BV1d54y1q7k7</a></p><hr><h3 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h3><ol><li><a href="https://leetcode.cn/problems/find-first-and-last-position-of-element-in-sorted-array/">https://leetcode.cn/problems/find-first-and-last-position-of-element-in-sorted-array/</a><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">给你一个按照非递减顺序排列的整数数组 nums，和一个目标值 target。请你找出给定目标值在数组中的开始位置和结束位置。</span><br><span class="line">如果数组中不存在目标值 target，返回 [-1, -1]。</span><br><span class="line">你必须设计并实现时间复杂度为 O(log n) 的算法解决此问题。</span><br></pre></td></tr></table></figure></li></ol><ul><li>显然这应当是一个<strong>二分定界</strong>问题</li><li>需要找的是<code>第一个&gt;=target的元素 - 左边界</code>和<code>最后一个&lt;=target的元素</code><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">searchRange</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> target)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> index = <span class="built_in">getIndex</span>(nums, target);</span><br><span class="line"><span class="type">int</span> rb = <span class="built_in">getRb</span>(nums, target);</span><br><span class="line"><span class="type">int</span> lb = <span class="built_in">getLb</span>(nums, target);</span><br><span class="line"><span class="keyword">if</span> (index == <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> vector&lt;<span class="type">int</span>&gt;&#123;<span class="number">-1</span>, <span class="number">-1</span>&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> vector&lt;<span class="type">int</span>&gt;&#123;lb, rb&#125;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取位置</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">getIndex</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> target)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> left = <span class="number">0</span>, right = nums.<span class="built_in">size</span>() - <span class="number">1</span>, mid = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (left &lt;= right)</span><br><span class="line">&#123;</span><br><span class="line">mid = left + (right - left) / <span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span> (nums[mid] &gt; target)</span><br><span class="line">&#123;</span><br><span class="line">right = mid - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] &lt; target)</span><br><span class="line">&#123;</span><br><span class="line">left = mid + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> mid;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取右边界 即最后一个小于等于target的元素</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">getRb</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> target)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> left = <span class="number">-1</span>, right = nums.<span class="built_in">size</span>(), mid = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (left + <span class="number">1</span> != right)</span><br><span class="line">&#123;</span><br><span class="line">mid = left + (right - left) / <span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span> (nums[mid] &gt; target)</span><br><span class="line">&#123;</span><br><span class="line">right = mid;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">left = mid;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> left;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 获取左边界 即第一个&gt;=target的元素</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">getLb</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> target)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> left = <span class="number">-1</span>, right = nums.<span class="built_in">size</span>(), mid = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (left + <span class="number">1</span> != right)</span><br><span class="line">&#123;</span><br><span class="line">mid = left + (right - left) / <span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span> (nums[mid] &gt;= target)</span><br><span class="line">&#123;</span><br><span class="line">right = mid;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">left = mid;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> right;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul><hr><ol start="2"><li><a href="https://leetcode.cn/problems/sqrtx/">https://leetcode.cn/problems/sqrtx/</a><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">给你一个非负整数 x ，计算并返回 x 的 算术平方根 。</span><br><span class="line">由于返回类型是整数，结果只保留 整数部分 ，小数部分将被 舍去 </span><br></pre></td></tr></table></figure></li></ol><ul><li>显然，求的是[0,1,2,3,….,x-1]的最后一个满足 num * num &lt;&#x3D; x 的数，这是一个二分定界问题<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">mySqrt</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// 二分定界问题 求最后一个满足 y * y &lt;= x 的元素</span></span><br><span class="line">        <span class="comment">// 采用 (l,r)区间</span></span><br><span class="line">        <span class="comment">// 数组 0,1,...,x</span></span><br><span class="line">        <span class="type">long</span> <span class="type">long</span>  left = <span class="number">-1</span>, right = (<span class="type">long</span> <span class="type">long</span>)x + <span class="number">1</span>, mid = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (left + <span class="number">1</span> != right)</span><br><span class="line">        &#123;</span><br><span class="line">            mid = left + (right - left) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (mid * mid &lt; x)</span><br><span class="line">            &#123;</span><br><span class="line">                left = mid;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (mid * mid == x)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> mid;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                right = mid;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> left;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul><hr><h1 id="移除元素-双指针法"><a href="#移除元素-双指针法" class="headerlink" title="移除元素 - 双指针法"></a>移除元素 - 双指针法</h1><h2 id="理论-2"><a href="#理论-2" class="headerlink" title="理论"></a>理论</h2><ul><li>由于数组是一片连续空间，所以移除其中一个元素的实际意义是，将其后的所有元素前移一格，这将是一个时间复杂度为ON的操作</li><li>vector.earse() 是一个例子</li><li>使用双指针（快慢指针）的核心在于其表达的含义，在这里，快指针代表的是当前扫描的元素，慢指针代表的是当前符合条件(无需删除)的元素</li><li>可以将 nums[slow] &#x3D; nums[fast] 理解为在两个数组上的操作，将原数组中的元素挑选出来加入新数组，不过这里由于不会出现影响，所以可以直接在原数组上操作</li></ul><h2 id="题目-2"><a href="#题目-2" class="headerlink" title="题目"></a>题目</h2><ol><li><a href="https://leetcode.cn/problems/remove-element/">https://leetcode.cn/problems/remove-element/</a><br>给你一个数组 nums 和一个值 val，你需要 原地 移除所有数值等于 val 的元素，并返回移除后数组的新长度。<br>不要使用额外的数组空间，你必须仅使用 O(1) 额外空间并 原地 修改输入数组。<br>元素的顺序可以改变。你不需要考虑数组中超出新长度后面的元素。<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">removeElement</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> val)</span> </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (nums.<span class="built_in">size</span>() == <span class="number">0</span>)    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> slow = <span class="number">0</span>, fast = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (fast = <span class="number">0</span>; fast &lt;= nums.<span class="built_in">size</span>() - <span class="number">1</span>; fast++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[fast] != val)</span><br><span class="line">            &#123;</span><br><span class="line">                nums[slow] = nums[fast];</span><br><span class="line">                slow++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> slow;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol><hr><ol start="2"><li><a href="https://leetcode.cn/problems/remove-duplicates-from-sorted-array/">https://leetcode.cn/problems/remove-duplicates-from-sorted-array/</a><br>给你一个 升序排列 的数组 nums ，请你 原地 删除重复出现的元素，使每个元素 只出现一次 ，返回删除后数组的新长度。元素的 相对顺序 应该保持 一致 。<br>由于在某些语言中不能改变数组的长度，所以必须将结果放在数组nums的第一部分。更规范地说，如果在删除重复项之后有 k 个元素，那么 nums 的前 k 个元素应该保存最终结果。<br>将最终结果插入 nums 的前 k 个位置后返回 k 。<br>不要使用额外的空间，你必须在 原地 修改输入数组 并在使用 O(1) 额外空间的条件下完成。</li></ol><ul><li>采用双指针，快指针为当前扫描元素位置，慢指针为当前待添加元素位置</li><li>由于数组是 升序 排列的，所以当前元素 &gt;&#x3D; 上一个添加的元素，所以记录上一个添加的元素即可<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">removeDuplicates</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (nums.<span class="built_in">size</span>() == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> slow = <span class="number">0</span>, fast = <span class="number">0</span>, last = INT_MIN;</span><br><span class="line">        <span class="keyword">for</span> (fast = <span class="number">0</span>; fast &lt;= nums.<span class="built_in">size</span>() - <span class="number">1</span>; fast++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[fast] &gt; last)</span><br><span class="line">            &#123;</span><br><span class="line">                nums[slow] = nums[fast];</span><br><span class="line">                last = nums[slow];</span><br><span class="line">                slow++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> slow;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul><hr><ol start="3"><li><a href="https://leetcode.cn/problems/move-zeroes/">https://leetcode.cn/problems/move-zeroes/</a><br>给定一个数组 nums，编写一个函数将所有 0 移动到数组的末尾，同时保持非零元素的相对顺序。<br>请注意 ，必须在不复制数组的情况下原地对数组进行操作</li></ol><ul><li>这道题直接的思考方式是</li><li><ul><li>[0,slow)为非零值，fast为当前扫描</li></ul></li><li><ul><li>最后把末尾元素补成零</li></ul></li><li>进一步的思考</li><li><ul><li>[0,slow) 为非零值，[slow,fast)为零值，fast为当前扫描元素，[fast …] 为待扫描元素</li></ul></li><li><ul><li>这样在 “赋值” 时，不能丢掉 nums[slow]这个零值，而是应该把它保留到 fast中</li></ul></li></ul><hr><ol start="4"><li><a href="https://leetcode.cn/problems/backspace-string-compare/">https://leetcode.cn/problems/backspace-string-compare/</a><br>给定 s 和 t 两个字符串，当它们分别被输入到空白的文本编辑器后，如果两者相等，返回 true 。# 代表退格字符。注意：如果对空文本输入退格字符，文本继续为空。</li></ol><ul><li>这个题目最重要的是 要逆向比较</li><li>“ab#c”与“ad#c”，应该从c &#x3D; c 开始做比较</li><li>剩下就是一些细节的处理，比如终止条件、一方取值结束后另外一方应该怎样处理等<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">backspaceCompare</span><span class="params">(string s, string t)</span> </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="type">int</span> loc_s = s.<span class="built_in">length</span>() - <span class="number">1</span>, <span class="type">loc_t</span> = t.<span class="built_in">length</span>() - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (loc_s &gt;= <span class="number">0</span> || <span class="type">loc_t</span> &gt;= <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">get</span>(s, loc_s) != <span class="built_in">get</span>(t, <span class="type">loc_t</span>))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 从 [0,loc] 中获取最后一个有效字符，如果没有，返回&#x27;\0&#x27;</span></span><br><span class="line">    <span class="function"><span class="type">char</span> <span class="title">get</span><span class="params">(string str, <span class="type">int</span> &amp;loc)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="type">int</span> count = <span class="number">0</span>;  <span class="comment">// 当前读取到的 # 个数</span></span><br><span class="line">        <span class="keyword">while</span> (loc &gt;= <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">char</span> ch = str[loc];</span><br><span class="line">            <span class="keyword">if</span> (ch == <span class="string">&#x27;#&#x27;</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                count++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (count == <span class="number">0</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    loc--;</span><br><span class="line">                    <span class="keyword">return</span> ch;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    count--;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            loc--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul><hr><ol start="5"><li><a href="https://leetcode.cn/problems/squares-of-a-sorted-array/">https://leetcode.cn/problems/squares-of-a-sorted-array/</a><br>给你一个按 非递减顺序 排序的整数数组 nums，返回 每个数字的平方 组成的新数组，要求也按 非递减顺序 排序。进阶：时间复杂度ON<br><em>方法一</em></li></ol><ul><li>直接先对数组里的数组做平方(ON)，再做排序(ONLOGN)</li></ul><p><em>方法二</em></p><ul><li>考虑到一个现象 ： 平方后数组情况为 25 16 9 | 4 9 16 25 ，显然是有序的</li><li>那么对平方后的数组先做 二分定界，再使用 left左移，right右移 归并排序</li></ul><p><em>方法三</em></p><ul><li>对方法二进阶，是否真的需要知道 边界？</li><li>很明显 最大的肯定是 左右两侧的数据，那么只要使用 left 从0开始左移，right从 n-1开始右移，做从大到小的逆序装入归并即可</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">sortedSquares</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (nums.<span class="built_in">size</span>() == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> nums;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> left = <span class="number">0</span>, right = nums.<span class="built_in">size</span>() - <span class="number">1</span>, cur = nums.<span class="built_in">size</span>() <span class="number">-1</span> ;      <span class="comment">// 左右指针</span></span><br><span class="line">        </span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">ans</span><span class="params">(nums.size(), <span class="number">0</span>)</span></span>;            <span class="comment">// 答案数组</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> ( cur &gt;= <span class="number">0</span> )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[left] * nums[left] &gt; nums[right] * nums[right])</span><br><span class="line">            &#123;</span><br><span class="line">                ans[cur] = nums[left] * nums[left];</span><br><span class="line">                left++;</span><br><span class="line">                cur--;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                ans[cur] = nums[right] * nums[right];</span><br><span class="line">                right--;</span><br><span class="line">                cur--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><hr><h1 id="滑动窗口法"><a href="#滑动窗口法" class="headerlink" title="滑动窗口法"></a>滑动窗口法</h1><h2 id="理论-3"><a href="#理论-3" class="headerlink" title="理论"></a>理论</h2><ul><li>滑动窗口法适用于 寻找特定子序列 的问题</li><li>使用两个指针 [left, right] 来确定了一个区间，即窗口</li><li><ul><li>left 指向的是下一个可以删除以用来优化的元素 right 指向的是下一个可以添加以用来靠近要求的元素</li></ul></li><li>滑动窗口法的核心思想是 先求可行解，再在此之上求最优解</li><li>基础代码框架为(可以优化)<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 最大无重复子串</span></span><br><span class="line"><span class="keyword">while</span> (right &lt; s.<span class="built_in">length</span>())</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 构造 ， 最大的不含重复</span></span><br><span class="line"><span class="keyword">while</span>(right &lt;= len <span class="number">-1</span> &amp;&amp; 条件不满足)</span><br><span class="line">&#123;</span><br><span class="line">add [right];</span><br><span class="line">right++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 缩小 ， 找最优</span></span><br><span class="line"><span class="keyword">while</span>(left &lt; right &amp;&amp; 条件满足)</span><br><span class="line">&#123;</span><br><span class="line">记录当前解，和最优解比较保留更优质的</span><br><span class="line">dec [left];</span><br><span class="line">left++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="题目-3"><a href="#题目-3" class="headerlink" title="题目"></a>题目</h2><ol><li><a href="https://leetcode.cn/problems/minimum-size-subarray-sum/">https://leetcode.cn/problems/minimum-size-subarray-sum/</a><br>给定一个含有 n 个正整数的数组和一个正整数 target 。找出该数组中满足其和 ≥ target 的长度最小的 连续子数组 [numsl, numsl+1, …, numsr-1, numsr] ，并返回其长度。如果不存在符合条件的子数组，返回 0 。<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">minSubArrayLen</span><span class="params">(<span class="type">int</span> target, vector&lt;<span class="type">int</span>&gt;&amp; nums)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> left = <span class="number">0</span>, right = <span class="number">0</span>, sum = <span class="number">0</span>, ans = INT_MAX;</span><br><span class="line"><span class="keyword">while</span> (right &lt;= nums.<span class="built_in">size</span>() - <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span>(right &lt;= nums.<span class="built_in">size</span>() - <span class="number">1</span> &amp;&amp; sum &lt; target)</span><br><span class="line">&#123;</span><br><span class="line">sum += nums[right];</span><br><span class="line">right++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(left &lt; right &amp;&amp; sum &gt;= target)</span><br><span class="line">&#123;</span><br><span class="line">ans = <span class="built_in">min</span>(ans, right - left);</span><br><span class="line"></span><br><span class="line">sum -= nums[left];</span><br><span class="line">left++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ans == INT_MAX ? <span class="number">0</span> : ans;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol><hr><ol start="2"><li><a href="https://leetcode.cn/problems/fruit-into-baskets/">https://leetcode.cn/problems/fruit-into-baskets/</a><br>你正在探访一家农场，农场从左到右种植了一排果树。这些树用一个整数数组 fruits 表示，其中 fruits[i] 是第 i 棵树上的水果 种类 。你想要尽可能多地收集水果。然而，农场的主人设定了一些严格的规矩，你必须按照要求采摘水果：</li></ol><ul><li>你只有 两个 篮子，并且每个篮子只能装 单一类型 的水果。每个篮子能够装的水果总量没有限制。</li><li>你可以选择任意一棵树开始采摘，你必须从 每棵 树（包括开始采摘的树）上 恰好摘一个水果 。采摘的水果应当符合篮子中的水果类型。每采摘一次，你将会向右移动到下一棵树，并继续采摘。</li><li>一旦你走到某棵树前，但水果不符合篮子的水果类型，那么就必须停止采摘。<br>给你一个整数数组 fruits ，返回你可以收集的水果的 最大 数目。<br>1 &lt;&#x3D; fruits.length &lt;&#x3D; 105<br>0 &lt;&#x3D; fruits[i] &lt; fruits.length</li></ul><p><strong>分析</strong></p><ul><li>这个题目的含义是 求满足 只含有两种不同的元素  的子串的长度 </li><li>那么需要一个数据结构来维持 当前只有两个元素被选择 与 这两个元素被选择的次数</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">totalFruit</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; fruits)</span> </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="type">int</span> left = <span class="number">0</span>, right = <span class="number">0</span>, sum = <span class="number">0</span>, ans = <span class="number">0</span>;</span><br><span class="line">        map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; basket;</span><br><span class="line">        <span class="keyword">while</span> (right &lt;= fruits.<span class="built_in">size</span>() - <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 这里 right 指针是 寻找最优 和 尝试破坏条件 -- 篮子数小于二 或者 当前水果在篮子中 的一方了</span></span><br><span class="line">            <span class="keyword">while</span> (right &lt;= fruits.<span class="built_in">size</span>() <span class="number">-1</span> &amp;&amp; (basket.<span class="built_in">size</span>() &lt; <span class="number">2</span> || (basket.<span class="built_in">size</span>() == <span class="number">2</span> &amp;&amp; basket.<span class="built_in">find</span>(fruits[right]) != basket.<span class="built_in">end</span>())))</span><br><span class="line">            &#123;</span><br><span class="line">                basket[fruits[right]]++;</span><br><span class="line">                sum++;</span><br><span class="line">                right++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 当上方循环结束时 即找到了一个局部最优</span></span><br><span class="line">            ans = <span class="built_in">max</span>(ans, sum);</span><br><span class="line">            <span class="comment">// left 尝试修复条件 - 修复到 篮子数小于2</span></span><br><span class="line">            <span class="keyword">while</span> (left &lt; right &amp;&amp; basket.<span class="built_in">size</span>() == <span class="number">2</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                basket[fruits[left]]--;</span><br><span class="line">                <span class="keyword">if</span> (basket[fruits[left] ]== <span class="number">0</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    basket.<span class="built_in">erase</span>(fruits[left]);</span><br><span class="line">                &#125;</span><br><span class="line">                sum--;</span><br><span class="line">                left++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><hr><ol start="3"><li><a href="https://leetcode.cn/problems/minimum-window-substring/">https://leetcode.cn/problems/minimum-window-substring/</a><br>给你一个字符串 s 、一个字符串 t 。返回 s 中涵盖 t 所有字符的最小子串。如果 s 中不存在涵盖 t 所有字符的子串，则返回空字符串 “” 。<br>注意：<br>对于 t 中重复字符，我们寻找的子字符串中该字符数量必须不少于 t 中该字符数量。<br>如果 s 中存在这样的子串，我们保证它是唯一的答案。</li></ol><p><strong>分析</strong></p><ul><li>由 条件 “对于 t 中重复字符，我们寻找的子字符串中该字符数量必须不少于 t 中该字符数量”，很明显，结合上题，需要使用 map 来记录 t 中所有的字符已经其出现的次数</li><li>子串需满足的条件就是 子串的 maps 覆盖了 t 的 mapt</li><li><ul><li>即 for_each mapt[i] , maps[i] &gt;&#x3D; mapt[i]</li></ul></li><li>再进一步，可以使用一个map先记录 t 中的字符出现情况，扫描 s 中字符时，S中出现的字符减少对应的次数，此时子串的条件变为 for_each map[i] &lt;&#x3D; 0</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">minWindow</span><span class="params">(string s, string t)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// 首先记录 t 中字符及出现次数</span></span><br><span class="line">        map&lt;<span class="type">char</span>, <span class="type">int</span>&gt; m;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= t.<span class="built_in">length</span>() - <span class="number">1</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            m[t[i]]++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> left = <span class="number">0</span>, right = <span class="number">0</span>,  ansLength = INT_MAX;</span><br><span class="line">        string ansStr;</span><br><span class="line">        <span class="keyword">while</span> (right &lt;= s.<span class="built_in">length</span>() - <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 首先 right 扩大以满足条件</span></span><br><span class="line">            <span class="keyword">while</span> (right &lt;= s.<span class="built_in">length</span>() &amp;&amp; !<span class="built_in">isok</span>(m))</span><br><span class="line">            &#123;</span><br><span class="line">                m[s[right]]--;</span><br><span class="line">                right++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 然后 left 缩小以找最优解</span></span><br><span class="line">            <span class="keyword">while</span> (left &lt; right &amp;&amp; <span class="built_in">isok</span>(m))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// 先记录当前解</span></span><br><span class="line">                <span class="keyword">if</span> (right - left &lt; ansLength)</span><br><span class="line">                &#123;</span><br><span class="line">                    ansLength = right - left;</span><br><span class="line">                    ansStr = s.<span class="built_in">substr</span>(left,right-left);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 然后操作</span></span><br><span class="line">                m[s[left]]++;</span><br><span class="line">                left++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ansStr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isok</span><span class="params">(map&lt;<span class="type">char</span>, <span class="type">int</span>&gt;&amp; m)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> ch_times : m)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 存在 字符出现次数大于 0 即不满足条件</span></span><br><span class="line">            <span class="keyword">if</span> (ch_times.second &gt; <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="行为模拟"><a href="#行为模拟" class="headerlink" title="行为模拟"></a>行为模拟</h1><ul><li>对于二维数组常有一类行为模拟的题目，它们不直接涉及到某种算法，而是考察对于代码的掌控能力，对题目描述事物的模拟能力</li><li><ol><li>要把握住每一轮操作的范围，即循环不变量，尽量保证每次的操作区间都是相同类型的(左右开闭)</li></ol></li><li><ol start="2"><li>要尝试逆向思考，很多时候逆向的思维会大大简化程序</li></ol></li></ul><h2 id="题目-4"><a href="#题目-4" class="headerlink" title="题目"></a>题目</h2><ol><li><a href="https://leetcode.cn/problems/spiral-matrix-ii/">https://leetcode.cn/problems/spiral-matrix-ii/</a><br>给你一个正整数 n ，生成一个包含 1 到 n平方 所有元素，且元素按顺时针顺序螺旋排列的 n x n 正方形矩阵 matrix 。</li></ol><p><strong>分析</strong></p><ul><li>明确每轮操作的范围，首先将整个二维表的填写划分为每一圈正方形的填写</li><li>再将每一圈正方形的填写转换为四条边的填写，此时明确，每条边都只处理起始位置的边角，即使用左闭右开区间</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1      2  3  four</span><br><span class="line">twelve 13 14 five</span><br><span class="line">eleven 16 15 six</span><br><span class="line">ten    9  8  7</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">generateMatrix</span>(<span class="type">int</span> n) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 先把 n * n 矩阵构造出来</span></span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; matrix;</span><br><span class="line">        matrix.<span class="built_in">resize</span>(n);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= n - <span class="number">1</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            matrix[i].<span class="built_in">resize</span>(n);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> circle = n / <span class="number">2</span>;         <span class="comment">// 按圈赋值一共有的圈数，如果n为奇数，对中心数字特殊处理</span></span><br><span class="line">        <span class="type">int</span> num = <span class="number">1</span>;                <span class="comment">// 用于赋值的数</span></span><br><span class="line">        <span class="type">int</span> len = n - <span class="number">1</span>;            <span class="comment">// 边长,即每一条边的赋值的数据个数，每转一圈减小1</span></span><br><span class="line">        <span class="type">int</span> startx = <span class="number">0</span>, starty = <span class="number">0</span>; <span class="comment">// 圈的起始位置</span></span><br><span class="line">        <span class="keyword">while</span> (circle--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 填写当前圈，每边填写 len 个数据</span></span><br><span class="line">            <span class="type">int</span> i = startx, j = starty;</span><br><span class="line">            <span class="comment">/// -&gt;</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> count = <span class="number">1</span>; count &lt;= len; count++, j++)</span><br><span class="line">            &#123;</span><br><span class="line">                matrix[i][j] = num;</span><br><span class="line">                num++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">/// down</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> count = <span class="number">1</span>; count &lt;= len; count++, i++)</span><br><span class="line">            &#123;</span><br><span class="line">                matrix[i][j] = num;</span><br><span class="line">                num++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">/// &lt;-</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> count = <span class="number">1</span>; count &lt;= len; count++, j--)</span><br><span class="line">            &#123;</span><br><span class="line">                matrix[i][j] = num;</span><br><span class="line">                num++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">/// up</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> count = <span class="number">1</span>; count &lt;= len; count++, i--)</span><br><span class="line">            &#123;</span><br><span class="line">                matrix[i][j] = num;</span><br><span class="line">                num++;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 为下一圈准备</span></span><br><span class="line">            len = len - <span class="number">2</span> &gt; <span class="number">0</span> ? len - <span class="number">2</span> : <span class="number">0</span>;</span><br><span class="line">            startx++; starty++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (n % <span class="number">2</span> == <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            matrix[n / <span class="number">2</span>][n / <span class="number">2</span>] = n * n;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> matrix;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><hr><ol start="2"><li><a href="https://leetcode.cn/problems/spiral-matrix/">https://leetcode.cn/problems/spiral-matrix/</a><br>给你一个 m 行 n 列的矩阵 matrix ，请按照 顺时针螺旋顺序 ，返回矩阵中的所有元素。</li></ol><ul><li>确定当前操作的上下 左右边界，当它们任一重叠时，说明遍历完成了。<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">spiralOrder</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; matrix)</span> </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; ans;</span><br><span class="line">        <span class="keyword">if</span> (matrix.<span class="built_in">size</span>() == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> ans;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> up = <span class="number">0</span>, down = matrix.<span class="built_in">size</span>() - <span class="number">1</span>, left = <span class="number">0</span>, right = matrix[<span class="number">0</span>].<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// right</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = up, j = left; j &lt;= right; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                ans.<span class="built_in">push_back</span>(matrix[i][j]);</span><br><span class="line">            &#125;</span><br><span class="line">            up++;</span><br><span class="line">            <span class="keyword">if</span> (up &gt; down) <span class="keyword">break</span>;</span><br><span class="line">            <span class="comment">// down</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = up, j = right; i &lt;= down; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                ans.<span class="built_in">push_back</span>(matrix[i][j]);</span><br><span class="line">            &#125;</span><br><span class="line">            right--;</span><br><span class="line">            <span class="keyword">if</span> (right &lt; left) <span class="keyword">break</span>;</span><br><span class="line">            <span class="comment">// left</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = down, j = right; j &gt;= left; j--)</span><br><span class="line">            &#123;</span><br><span class="line">                ans.<span class="built_in">push_back</span>(matrix[i][j]);</span><br><span class="line">            &#125;</span><br><span class="line">            down--;</span><br><span class="line">            <span class="keyword">if</span> (up &gt; down) <span class="keyword">break</span>;</span><br><span class="line">            <span class="comment">// up</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = down, j = left; i &gt;= up; i--)</span><br><span class="line">            &#123;</span><br><span class="line">                ans.<span class="built_in">push_back</span>(matrix[i][j]);</span><br><span class="line">            &#125;</span><br><span class="line">            left++;</span><br><span class="line">            <span class="keyword">if</span> (right &lt; left) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 面试 </tag>
            
            <tag> C++ </tag>
            
            <tag> 算法 </tag>
            
            <tag> 数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++基础</title>
      <link href="/2022/06/30/C++%E5%9F%BA%E7%A1%80/"/>
      <url>/2022/06/30/C++%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h1 id="基础C程序结构"><a href="#基础C程序结构" class="headerlink" title="基础C程序结构"></a>基础C程序结构</h1><h2 id="段结构"><a href="#段结构" class="headerlink" title="段结构"></a>段结构</h2><p><strong>段结构</strong><br> | – 程序段 ： 程序代码<br> | – BSS段 :  尚未初始化的全局数据<br> | – 数据段 ： 已初始化全局数据<br> | – 堆栈段 ： | –  堆区 ： 手动申请与释放<br>                         | –  栈区 ： 局部变量、函数参数与返回值 自动申请与释放<br>显然 BSS段、数据段属于静态内存分配区域，堆栈区属于动态内存分配区域<br><strong>变量作用域</strong><br>变量存在的位置与“时间” 包括 全局作用域（全局变量，常量）、局部作用域（局部变量）与形式参数<br>系统只针对全局变量做初始化<br>在当前作用域内的变量 屏蔽 更大作用域的同名变量</p><p><strong>左值与右值</strong><br>左值：指表达式结束后依然存在的持久对象，对左值可以取地址，具名变量或对象<br>右值：表达式结束后就不再存在的临时对象，对右值不可以取地址，没有名字</p><p><strong>基础内存操作 - 字符串操作</strong></p><ul><li>strcpy , strlen, strcat, strcmp 的代码实现<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">char</span>* <span class="title">strcpy</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* strDest, <span class="type">const</span> <span class="type">char</span>* strSrc)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">assert</span>(strDest != <span class="literal">NULL</span> &amp;&amp; strSrc != <span class="literal">NULL</span>);</span><br><span class="line"><span class="type">char</span> *str = strDest;</span><br><span class="line"><span class="keyword">while</span>(*strSrc != <span class="string">&#x27;\0&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line">strDest = strSrc;</span><br><span class="line">strDest++;</span><br><span class="line">strSrc++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 若存在内存重叠的情况   高地址 [   A ( ] B   ) 低地址  B 赋值给 A</span></span><br><span class="line"><span class="comment">// 显然,应该从高地址侧开始赋值</span></span><br></pre></td></tr></table></figure></li></ul><p><strong>内存泄漏</strong></p><ul><li>内存泄漏是指程序未能释放不再使用内存的情况，只是说这段内存失去了控制</li><li>内存泄漏过多会导致内存溢出，即内存已经不再够程序使用</li><li></li><li>内存泄漏分为 堆内存泄漏、系统资源泄漏、未定义析构函数为虚函数</li><li><ul><li>堆内存泄漏 ： 使用 malloc \ realloc \ new 等从堆中申请内存后，没有使用 free \ delete 释放</li></ul></li><li><ul><li>系统资源泄漏 ： 使用系统资源如 bitmap \ handle \ socket 后没有释放</li></ul></li><li><ul><li>未定义析构函数为虚函数 ： 子类析构函数无法调用父类析构函数以释放其占用的内存</li></ul></li><li></li><li>会导致内存泄漏的操作 ： 指针指向改变 与 未释放动态分配的内存</li><li></li><li>防止内存泄漏的方法 ：将内存的分配封装在内存中，于构造函数分配内存，析构函数释放内存 - 智能指针</li></ul><hr><h1 id="C与C"><a href="#C与C" class="headerlink" title="C与C++"></a>C与C++</h1><p>C++是基于C添加了面向对象思想的语言，与C的不同主要就是在面向对象思想加入后的类的封装、继承和多态。</p><h2 id="1-指针与引用"><a href="#1-指针与引用" class="headerlink" title="1. 指针与引用"></a>1. 指针与引用</h2><p><strong>指针</strong> 指向对象的地址，定义时初始化，可先后指向不同的对象<br><strong>引用</strong> 相当于变量的别名，不要初始化，不能改变指代的对象</p><h2 id="2-new-delete-与-malloc-free-的区别"><a href="#2-new-delete-与-malloc-free-的区别" class="headerlink" title="2. new delete 与 malloc free 的区别"></a>2. new delete 与 malloc free 的区别</h2><p><strong>使用格式</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ClassA* Aptr = <span class="keyword">new</span> ClassA;</span><br><span class="line"><span class="keyword">delete</span> A ; </span><br><span class="line"></span><br><span class="line">ValueType* ptr = (ValueType*) <span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(ValueType));</span><br><span class="line">free ptr ;</span><br></pre></td></tr></table></figure><p><strong>性质类型</strong><br>new 和 delete 属于运算符，使用时变量为数据类型，返回指定数据类型的指针，<strong>执行时若数据类型为类，则还会同步执行其构造和析构函数</strong>，内存分配失败抛出异常</p><p>malloc 和 free 属于C语言的库函数，使用时参数为字节大小，返回值为（void*）指针，一般需要进行类型转换，内存分配失败返回NULL空指针</p><h2 id="3-调用约定-为啥C-可以实现函数的重载"><a href="#3-调用约定-为啥C-可以实现函数的重载" class="headerlink" title="3. 调用约定 - 为啥C++可以实现函数的重载"></a>3. 调用约定 - 为啥C++可以实现函数的重载</h2><p><strong>调用约定</strong><br>调用约定是对函数调用的一个约束和规定(规范)，描述了函数参数是怎么传递和由谁清除堆栈的。它决定以下内容：<br>(1)函数参数的压栈顺序<br>(2)由调用者还是被调用者把参数弹出栈<br>(3)产生函数修饰名的方法<br><strong>典型调用约定</strong></p><p>cdecl(C declaration，即C声明)</p><ul><li>是源起C语言的一种调用约定，也是C语言的事实上的标准</li><li>函数实参在线程栈上按照从右至左的顺序依次压栈</li><li>函数结果保存在寄存器EAX&#x2F;AX&#x2F;AL中</li><li>编译后的函数名前缀以一个下划线字符</li><li>调用者负责从线程栈中弹出实参（即清栈）</li></ul><p>pascal</p><ul><li>基于Pascal语言的调用约定</li><li>参数从左至右入栈(与cdecl相反)</li><li>被调用者负责在返回前清理堆栈</li></ul><p>stdcall</p><ul><li>是Windows API的标准调用约定</li><li>被调用者负责清理线程栈，参数从右往左入栈。其他各方面基本与cdecl相同</li><li>编译后的函数名后缀以符号”@”，后跟传递的函数参数所占的栈空间的字节长度</li></ul><p>thiscall</p><ul><li>是C++类成员函数缺省的调用约定，但它没有显示的声明形式</li><li>参数入栈：参数从右向左入栈</li><li>this指针入栈：如果参数个数确定，this指针通过ecx传递给被调用者；如果参数个数不确定，this指针在所有参数压栈后被压入栈 - 所以通常认为  this 指针是非静态非内联类成员函数的第一个隐式的参数。</li><li>栈恢复：对参数个数不定的，调用者清理栈，否则函数自己清理栈。<br><strong>C与C++采用的调用约定</strong><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// C语言</span></span><br><span class="line"><span class="comment">// 采用 cdel 方式</span></span><br><span class="line">_FuncName</span><br><span class="line"><span class="comment">// 采用 stdcall 方式</span></span><br><span class="line">_FuncName@sizeofParams</span><br><span class="line"><span class="comment">// 由此可以看到,c语言在函数描述名中加入了参数的内存大小信息</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// c++ 语言</span></span><br><span class="line"><span class="comment">// 不管__cdecl，__fastcall还是__stdcall调用方式</span></span><br><span class="line"><span class="comment">// 是以一个“?”开始</span></span><br><span class="line"><span class="comment">// 后面紧跟函数的名字</span></span><br><span class="line"><span class="comment">// 再后面是参数表的开始标识和按照参数类型代号拼出的参数表</span></span><br><span class="line"><span class="comment">/// 对于__stdcall方式，参数表的开始标识是“@@YG”，对于__cdecl方式是“@@YA”</span></span><br><span class="line"><span class="comment">/// 函数参数表的第一项实际上是表示函数的返回值类型</span></span><br><span class="line"><span class="comment">/// 参数表后以“@Z”标识整个名字的结束，如果该函数无参数，则以“Z”标识结束</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 参数表的对应关系</span></span><br><span class="line">X--<span class="type">void</span>    </span><br><span class="line">D--<span class="type">char</span>    </span><br><span class="line">E--<span class="type">unsigned</span> <span class="type">char</span>    </span><br><span class="line">F--<span class="type">short</span>    </span><br><span class="line">H--<span class="type">int</span>    </span><br><span class="line">I--<span class="type">unsigned</span> <span class="type">int</span>    </span><br><span class="line">J--<span class="type">long</span>    </span><br><span class="line">K--<span class="type">unsigned</span> <span class="type">long</span>（DWORD） </span><br><span class="line">M--<span class="type">float</span>    </span><br><span class="line">N--<span class="type">double</span>    </span><br><span class="line">_N--<span class="type">bool</span></span><br><span class="line">U--<span class="keyword">struct</span> 其后跟结构体名 并以@@作为结构体名的结束</span><br><span class="line">PA--指针相同指针类型连续出现，以<span class="number">0</span>代替 后面跟指针类型</span><br><span class="line">PB--<span class="type">const</span>类型的指针由此可知函数如何判断一个参数指针是否为 <span class="type">const</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 例子</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Function1</span> <span class="params">(<span class="type">char</span> *var1,<span class="type">unsigned</span> <span class="type">long</span>)</span></span>;</span><br><span class="line">其函数修饰名为“?Function1@@YGHPADK@Z”</span><br></pre></td></tr></table></figure>所以，C++是通过其独特的函数标识名来记录了函数的参数表，进而分辨了同一作用域内同名但不同参数表的函数，实现了函数重载</li></ul><p><em>附加 C如何实现可变参数</em></p><ul><li>通过三个宏（va_start、va_end、va_arg）和一个类型（va_list）实现的<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">va_start</span> <span class="params">( va_list ap, paramN )</span></span>;</span><br><span class="line"><span class="comment">// ap: 可变参数列表地址 </span></span><br><span class="line"><span class="comment">// paramN: 确定的参数</span></span><br><span class="line"><span class="comment">// 功能：初始化可变参数列表（把函数在 paramN 之后的参数地址放到 ap 中）。</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">va_end</span> <span class="params">( va_list ap )</span></span>;</span><br><span class="line"><span class="comment">// 功能：关闭初始化列表（将 ap 置空）。</span></span><br><span class="line"></span><br><span class="line"><span class="function">type <span class="title">va_arg</span> <span class="params">( va_list ap, type )</span></span>;</span><br><span class="line"><span class="comment">// 功能：返回下一个参数的值。</span></span><br><span class="line"></span><br><span class="line">va_list ：存储参数的类型信息。</span><br></pre></td></tr></table></figure></li><li>用 va_start 获取参数列表（的地址）存储到 ap 中，用 va_arg 逐个获取值，最后用 va_arg 将 ap 置空。</li></ul><hr><h1 id="C-基础"><a href="#C-基础" class="headerlink" title="C++ 基础"></a>C++ 基础</h1><p>C++是一种<strong>静态类型</strong>、<strong>编译式</strong>、通用的、大小写敏感的、不规则的编程语言，支持过程化编程、面向对象编程和泛型编程<br><strong>静态类型</strong> 在编译时执行类型检查 | <strong>动态类型</strong> 在运行时执行类型检查<br><strong>面向对象</strong> 封装，继承，抽象，多态<br>C++ &#x3D; 核心语言 + 标准库（std） + 标准模板库(stl) | STD ： 数据类型与其物理存放方式的定义</p><h2 id="数据类型-x2F-关键字"><a href="#数据类型-x2F-关键字" class="headerlink" title="数据类型 &#x2F; 关键字"></a>数据类型 &#x2F; 关键字</h2><h3 id="volatile-动态的"><a href="#volatile-动态的" class="headerlink" title="volatile  动态的"></a><strong>volatile</strong>  动态的</h3><p>指定CPU每次读取变量式从内存，而非寄存器中读取<br>在一段程序中，一般如果两次读取同一个变量直接其值未发生改变，那么编译器会优化-将它的值放在寄存器中以加快读写，但是有些情况（比如并行程序）该变量值可能由于其他原因发生了改变，此时若编译器做了优化，后一次读取的值即为错误的。</p><h3 id="restrict"><a href="#restrict" class="headerlink" title="restrict"></a><strong>restrict</strong></h3><p>只能用于修饰指针变量<br>定义该指针所指向的内存区域仅可以由该指针来做修改，防止越界操作<br>如memcpy(void *restrict dest, const *restrict src, size_t n)</p><h3 id="define"><a href="#define" class="headerlink" title="define"></a><strong>define</strong></h3><p>简单的宏替换，不会做类型检查</p><h3 id="inline"><a href="#inline" class="headerlink" title="inline"></a><strong>inline</strong></h3><p>声明内联函数，当函数体体量较小时，将函数体整体复制到调用处，而非采用调用函数的方式，提升程序运行速度</p><p><em>define 与 typedef 与 inline 的区别</em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">define PI 3.14159</span><br><span class="line">typedef PI 3.14159</span><br><span class="line"></span><br><span class="line">define</span><br><span class="line"> 1. 简单的字符串替换,没有类型检查</span><br><span class="line"> 2. 预编译期起作用,不分配内存,给出的是立即数</span><br><span class="line"></span><br><span class="line">typedef</span><br><span class="line"> 1. 有对应的数据类型,进行类型检查</span><br><span class="line"> 2. 编译和运行时起作用,在静态存储区分配内存,程序仅有一份</span><br><span class="line"></span><br><span class="line">inline</span><br><span class="line"> 1. 内联函数是一种特殊的函数类型,进行类型检查</span><br><span class="line"> 2. 这是一个建议性关键词</span><br></pre></td></tr></table></figure><h3 id="Enum"><a href="#Enum" class="headerlink" title="Enum"></a><strong>Enum</strong></h3><p>枚举 内部元素按0开始排序，可以自行赋值，每一元素若无赋值，默认为前一个元素值+1</p><h3 id="wchar-t"><a href="#wchar-t" class="headerlink" title="wchar_t"></a><strong>wchar_t</strong></h3><p>宽字符型 内部实际为 type wchar_t short int </p><h3 id="const"><a href="#const" class="headerlink" title="const"></a><strong>const</strong></h3><p>常量 用于表示修饰对象在程序执行期间不会&#x2F;不应改变，需要在其初始化时指定其内容</p><ol><li>修饰普通数据类型 - 常量 ： 常量在程序执行期间不会改变，也不能改变，且存储在 数据段</li><li>修饰指针变量 - 常指针 : 常指针的值不可改变，指向也就不可改变<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 常量</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> num = <span class="number">1</span>;</span><br><span class="line"><span class="comment">// 常量指针 - 指向常量的指针</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span>* p = (<span class="type">const</span> <span class="type">int</span>*)&amp;num;</span><br><span class="line"><span class="comment">// 常指针 - 指针变量不可变</span></span><br><span class="line"><span class="type">int</span> *<span class="type">const</span> p = [Addr];</span><br><span class="line"><span class="comment">// 指向常量的常指针</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span>* <span class="type">const</span> p = &amp;num;</span><br><span class="line"><span class="comment">// 从这里可以看出 &amp;num 是一个指向常量的常指针 </span></span><br></pre></td></tr></table></figure></li><li>修饰对象 - 常对象 ： 常对象需要直接给出初始化数据，其后不可以更改其成员变量，通过其只可以调用常成员函数</li><li>修饰类成员函数 - 常成员函数 ：函数为常函数，函数体只能引用类成员变量，不能修改，且this指针为const <em>此时可以理解为 const 实际修饰的是 Class A，即cosnt ClassA* this，也就是说 ，this指针所指向的是一个常量，只可以引用，不可以修改</em></li><li>修饰类成员变量 - 常成员变量 ：该成员变量是一个常量，需要进行初始化且后续不能被修改</li></ol><h3 id="constexpr"><a href="#constexpr" class="headerlink" title="constexpr"></a><strong>constexpr</strong></h3><p><strong>定义常量</strong></p><ul><li>constexpr只能定义编译期常量，要求表达式需要在编译期即可判定为常量</li><li>const能定义编译期和运行期常量，表达式可以在运行时才确定具体的值</li><li>constexpt 更加接近与 “常量” 的含义，而 const 相当于 “只读” 的含义<br><strong>定义函数</strong></li><li>constexpr函数指能用于常量表达式的函数 - 函数的返回值和所有的形参类型都是字面值类型，函数体有且只有一条return语句<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">constexpr int new() &#123;return 42;&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">字面值常量</span><br><span class="line">一个形如42的值被称为字面值常量。字面值常量的形式和值决定了常量的类型。</span><br><span class="line">例如0x42是16进制表示的整型常量。‘a&#x27;是char型字面值。</span><br><span class="line">字面值常量顾名思义由字面意思表示，是常量。字面值常量在程序中是直接表示的，整型直接写出大小，字符直接写出字符。一个字面值常量在编译时被直接解析为立即数，编译器内部维护字面值常量的类型。</span><br><span class="line">常量表达式</span><br><span class="line">常量表达式是指在编译和执行过程中，该表达式的值不会改变，且编译过程中可以立即得到其值的表达式。常量表达式在程序运行时不会改变，即使一个程序多次启动或外部参数发生变化，该值也不会改变。编译器在编译优化时可能把常量表达式直接替换为立即数，具体要看编译环境。</span><br><span class="line">一般来讲，字面值常量属于常量表达式。</span><br><span class="line"></span><br><span class="line">并非所有const对象都是常量表达式，const仅标记对象为只读属性，该对象在初始化后无法再改变。如果const对象所赋初值在编译阶段就可确定，那么此const对象才是常量表达式。const对象和存储位置也没有必然联系，常量可以分布在栈、堆、静态存储区中。对于声明在函数体内的const常量，如果没有被编译优化掉，该常量存储在栈中。全局的const常量存储在全局存储区。</span><br><span class="line">C++中允许将变量声明为constexpr类型以使编译器在编译时检查该变量是否是常量表达式。声明为constexpr的对象一定是常量表达式。且初始化必须用常量表达式。</span><br></pre></td></tr></table></figure></li></ul><h3 id="auto"><a href="#auto" class="headerlink" title="auto"></a><strong>auto</strong></h3><p>C11特性</p><ol><li>作为变量类型 根据初始化表达式自动推断变量类型<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">auto</span> str = <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> i = vec.<span class="built_in">begin</span>(); i != vec.<span class="built_in">end</span>(); i++)&#123;&#125;<span class="comment">// i is a vec&lt;&gt;::iterator</span></span><br></pre></td></tr></table></figure></li><li>作为返回值类型 作为函数返回值的占位符 一般用于函数模板中<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> _Tx, <span class="keyword">typename</span> _Ty&gt;</span><br><span class="line"><span class="function"><span class="keyword">auto</span> <span class="title">multiply</span><span class="params">(_Tx x, _Ty y)</span> -&gt; <span class="title">decltype</span><span class="params">(_Tx*_Ty)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x*y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>这里的 auto 用作函数“返回值”的作用是：占位符<br>这个函数的真正返回值类型是 decltype ( expression ) ， 实际为 auto fun() -&gt; decltype(){}<br>decltype 的意义在于求出 exp 的类型</li></ol><h3 id="register"><a href="#register" class="headerlink" title="register"></a><strong>register</strong></h3><p>定义存储在寄存器中而非RAM中的局部变量</p><ol><li>变量的最大尺寸等于寄存器的大小（通常是一个词）</li><li>不能对它应用一元的 ‘&amp;’ 运算符（因为它没有内存位置）</li><li>一般用于需要快速访问的变量</li><li>这只是一个 <em>建议性语句</em> 具体是否实现依赖编译器判断</li></ol><h3 id="static"><a href="#static" class="headerlink" title="static"></a><strong>static</strong></h3><p>静态的</p><ol><li>修饰局部变量 - 静态局部变量</li></ol><ul><li>生命周期延长至整个程序的声明周期</li><li>在全局数据区分配内存，但作用域不变</li><li>变量定义与初始化语句执行第一次</li></ul><ol start="2"><li><p>修饰全局变量 - 限制作用域仅在当前文件中</p></li><li><p>修饰普通函数 - 限制作用域仅在当前文件中</p></li><li><p>修饰类成员变量 - 静态成员变量</p></li></ol><ul><li>仅有一个该成员变量被该类的所有实例所共享</li><li>该变量先于任何一个类实例而存在，在全局数据区分配内存，访问方式为<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;类名&gt;::&lt;类静态成员变量名&gt;</span><br><span class="line">&lt;任意类实例&gt;.&lt;类静态成员变量名&gt;</span><br></pre></td></tr></table></figure>初始化格式为<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;类名&gt;::&lt;类静态成员变量名&gt; = &lt;初始化值&gt;</span><br></pre></td></tr></table></figure></li></ul><ol start="5"><li>修饰类成员函数 - 静态成员函数</li></ol><ul><li>该函数出现在类体外的函数定义不能指定关键字static</li><li>该函数先于任何一个类实例而存在，访问方式为<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;类名&gt;::&lt;类静态函数变量名&gt;</span><br><span class="line">&lt;任意类实例&gt;.&lt;类静态函数变量名&gt;</span><br></pre></td></tr></table></figure></li></ul><ol start="6"><li>类静态成员变量与类静态成员函数</li></ol><ul><li>由于<strong>静态成员变量与静态成员函数先于任何实例而存在</strong>,所以<strong>静态成员函数只能访问静态成员函数和静态成员变量，其他不能访问</strong></li></ul><h3 id="explicit-and-implicit"><a href="#explicit-and-implicit" class="headerlink" title="explicit and implicit"></a><strong>explicit and implicit</strong></h3><ul><li>显式的 与 隐式的  <strong>只能用于修饰类的构造函数</strong></li><li>类的构造函数默认为 <code>implicit 隐式的</code>，即当类的构造函数 只有一个参数 或 只含有一个不含默认值的参数 时，允许从该参数的数据类型到类的隐式转换</li><li><ul><li>如 <code>MyString(int num)</code>即允许从 int 到 classA 的隐式转换</li></ul></li><li><ul><li>&#96;&#96;&#96;c++<br>&#x2F;&#x2F; 这会导致下述情况编译合理<br>void print(MyString str){};<br>int num &#x3D; 3;<br>print(3);<br>&#x2F;&#x2F; 但如果实际想要调用的是 print(MyString &#x3D; “3”) 那么会就会导致代码执行结果与实际预想合<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">+ 于是，可以使用 `explicit 显式的` 来禁止上述情况下的 隐式转换</span><br><span class="line"></span><br><span class="line">###  **extern**</span><br><span class="line">声明一个全局引用 全局函数 全局变量</span><br><span class="line"></span><br><span class="line">1. 用于本文件</span><br><span class="line">+ 在声明后即可使用该变量/函数，即时其声明和初始化在当前程序行的后面</span><br><span class="line">2. 用于其他文件</span><br><span class="line">+ 在声明后即可使用该变量/函数，即时其声明和初始化在其他文件中</span><br><span class="line">3. 不能在extern时对变量做“初始化”，可以后续为其赋值</span><br><span class="line"></span><br><span class="line">###  **multable**</span><br><span class="line">易变的，仅用于修饰类成员变量</span><br><span class="line">该成员变量可以在 const 成员函数中做修改</span><br><span class="line"></span><br><span class="line">###  **thread_local**</span><br><span class="line">C11特性</span><br><span class="line">仅用于变量，不可用于函数</span><br><span class="line">变量仅可在它在其上创建的线程上访问。 变量在创建线程时创建，并在销毁线程时销毁。 每个线程都有其自己的变量副本。</span><br><span class="line"></span><br><span class="line">### **std::atomic**</span><br><span class="line">+ 这是一个模板类型</span><br></pre></td></tr></table></figure>template<class T><br>struct atomic:</li></ul></li></ul><p>std::atomic<int> value &#x3D; 99;</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">+ 它的作用在于将目标变量的操作转变为原子操作，从而避免了多线程情况下，对于目标变量的操作因为切换线程而被打断，从而导致结果出错</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line">## 强制类型转换</span><br><span class="line">+ C语言中包含两种类型转换，即 显式类型转换 与 隐式类型转换</span><br><span class="line">+ - 显式即 `(float)1` 隐式即 `float b = 0.5`</span><br><span class="line">+ C++继承了上述类型转换，更有四种类型转换， 即 static_cast \ const_cast \ reinterpret_cast \ dynamic_cast</span><br><span class="line"></span><br><span class="line">**static_cast**</span><br><span class="line">+ - 用法为 `static_cast&lt;type-id&gt; (expression)`</span><br><span class="line">+ - 该运算符把 expression 转换为 type-id 类型，但没有运行时类型检查来保证转换的安全性，在上行转换（子类指针转父类指针）是安全的，在下行转换（父类指针转子类指针）是不安全的</span><br><span class="line">+  - static_cast 不能转换掉 expression 的 const、volitale 或者 unaligned 属性</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">**const_cast**</span><br><span class="line">+  - `const_cast&lt;type-id&gt; (expression)` ; const_cast&lt;&gt;里边的内容必须是引用或者指针</span><br><span class="line">+  - 将常量指针转换为非常量指针，且仍然指向原来的对象；将常量引用转换为非常量引用，且仍然指向原来的对象；去除/添加类型的const 或 volatile 属性</span><br><span class="line"></span><br><span class="line">**reinterpret_cast**</span><br><span class="line">+ - `用法为 reinterpret_cast &lt;type-id&gt; (expression)`, 有三种强制转换用途：</span><br><span class="line">+ - - 1、改变指针或引用的类型</span><br><span class="line">+ - - 2、将指针或引用转换为一个足够长度的整形</span><br><span class="line">+ - - 3、将整型转换为指针或引用类型</span><br><span class="line"></span><br><span class="line">**dynamic_cast**</span><br><span class="line">+ - 其他三种都是编译时完成的，dynamic_cast 是运行时处理的，运行时要进行类型检查</span><br><span class="line">+ - 不能用于内置的基本数据类型的强制转换，只能用于 存在虚函数的父子关系的指针或引用 的强制类中转换，且在下行转换时更为安全（检查 指针实际指向的实例类型，如果 是父类指针指向父类实例，想转子类指针就会报错；如果 是父类指针指向子类实例，想转子类指针是可以的）</span><br><span class="line">+ - 对于指针，转换失败返回 nullptr , 对于引用，转换失败抛出异常</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line">## 异常处理</span><br><span class="line">**C异常处理**</span><br><span class="line">+ C语言没有独立的异常处理机制，通常通过一些不正常的返回值来代表异常的出现与否和类型，如返回`-1`代表程序出错</span><br><span class="line">**C++异常处理**</span><br><span class="line">+ C++异常处理的语法为</span><br></pre></td></tr></table></figure><p>try<br>{<br>    &#x2F;&#x2F; 可能出现异常的代码<br>    throw(异常种类)；<br>}<br>catch(异常种类)<br>{<br>    &#x2F;&#x2F; 异常处理<br>}</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">+ 异常种类可以为基础数据类型,也可以为自定义类，`...`表示匹配所有异常种类，</span><br><span class="line">+ 在抛出异常后的处理代码块中，可以继续向上一级 抛出异常</span><br><span class="line">+ 抛出的异常必须得到处理，否则系统调用 terminate 函数以使程序终止</span><br><span class="line">+ 在抛出异常时，类似于函数执行完毕，抛出异常前的所有局部变量都将被释放，这个称之为`栈解旋`</span><br><span class="line">**异常变量的接收与生命周期**</span><br><span class="line">+ `throw CException(); catch(CException e)` 这种会调用拷贝构造函数以构造e</span><br><span class="line">+ `throw CException(); catch(CException &amp;e)`这种直接使用原有的异常类的引用，较为推荐</span><br><span class="line">+ `throw CException(); catch(CException *e)`异常变量在栈区，进入异常处理部分前，栈解旋导致异常变量已经被释放，注意这种 e 指向的是一个已经被释放的变量，是不安全的，不推荐</span><br><span class="line">+ `throw new CException; catch(CException *e)&#123;... delete e&#125;`异常变量在堆区，e 指向是安全的，不过堆区的内存需要自行申请与释放，否则会导致内存泄漏问题</span><br><span class="line">**异常的多态**</span><br><span class="line">+ 定义多个异常类 `CExpception` `CExpception_MemoryError` `CExpception_DivZeroError`此时可以使用 `catch(CException &amp;e)`同时接受多种子类的异常，并由虚函数实现对他们的分别处理</span><br><span class="line">**系统异常**</span><br><span class="line">+ 头文件`&lt;stdexcept&gt;` 类名 `exception` 构造函数 `exception(“异常描述字符串”)`</span><br><span class="line">+ 异常处理函数(虚函数) `const char* what() const &#123;&#125;`</span><br><span class="line">+ 等待</span><br><span class="line">```c++</span><br><span class="line">// string to char*</span><br><span class="line">string str;</span><br><span class="line">str.c_str();</span><br><span class="line">// char* to string</span><br><span class="line">char* cstr = &quot;.....&quot;</span><br><span class="line">stringt str = string(cstr);</span><br></pre></td></tr></table></figure><ul><li>可通过基础 系统异常 并重写 what 函数来实现异常处理</li></ul><hr><h2 id="面向对象的特性"><a href="#面向对象的特性" class="headerlink" title="面向对象的特性"></a>面向对象的特性</h2><p>面向对象特性包括 封装、继承和多态 ， 这些特性是通过类来实现的。</p><h3 id="封装-继承-多态"><a href="#封装-继承-多态" class="headerlink" title="封装 继承 多态"></a>封装 继承 多态</h3><p><strong>封装</strong></p><ul><li>将类的属性与操作捆绑在一起</li><li>从而方便操作，避免外界干扰与不合理的访问</li></ul><p><strong>继承</strong></p><ul><li>继承分为 实现继承、接口继承、可视继承</li><li>实现继承 指 使用基类的属性和方法而无需额外编码能力</li><li>接口继承 指 仅使用基类的属性和方法名称，子类必须结构实现</li><li>可视继承 指 子窗口继承父窗口的外观和实现的代码</li></ul><p><strong>虚继承</strong></p><ul><li>在一般多继承情况下有可能导致多个父类的占用空间与访问歧义的问题</li><li><ul><li>如 (B &lt;- A ; C &lt;- A; D &lt;- B,C)，那么D中会有两个A的副本，占用空间，而且在访问变量a时无法确定是哪一个</li></ul></li><li>虚继承的含义是一个类承诺 愿意共享其父类 <code>class C : virtual public A </code></li><li>这样不论 基类在继承体系中出现多少次，派生类中都只保留其一份副本</li><li>C++的IOStream就是这样的一个实例<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">istream</span><br><span class="line">base_iosiostream</span><br><span class="line">ostream</span><br></pre></td></tr></table></figure></li></ul><p><strong>多态</strong><br><strong>最最重要的 运行父类指针指向子类实例</strong></p><ul><li>多态,同一代码(函数)有着多种表现状态，多态是以封装和继承为基础的</li><li>多态分为四种，分别是：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">i. 重载多态（Ad-hoc Polymorphism，编译期）：函数重载、运算符重载</span><br><span class="line">ii. ⼦类型多态（Subtype Polymorphism，运⾏期）：虚函数</span><br><span class="line">iii. 参数多态性（Parametric Polymorphism，编译期）：类模板、函数模板</span><br><span class="line">iv. 强制多态（Coercion Polymorphism，编译期/运⾏期）：基本类型转换、⾃定义类型转换</span><br></pre></td></tr></table></figure></li><li><ul><li><ul><li>静态多态指的是 函数重载<code>overload</code>(同一作用域，同名不同参数表的函数)、函数重写<code>override</code>(父子作用域，同名同参数表的函数)</li></ul></li></ul></li><li><ul><li>动态多态指的是 虚函数，更具体的指的是 使用一个指向子类实例的父类指针 调用虚函数时 实际调用的是子类中对该虚函数的实现</li></ul></li><li><ul><li>静态多态是在静态编译期实现的，而动态多态是在动态编译期实现的</li></ul></li></ul><p><em>问题 类的内存大小确定</em></p><ul><li><ol><li>空类的大小为 1 ， 因为完全不分配内存的话实例的内存地址没办法写</li></ol></li><li><ol start="2"><li>当类中含有虚函数时，注意 虚指针 占用 4 字节大小</li></ol></li></ul><h3 id="类"><a href="#类" class="headerlink" title="类"></a>类</h3><ul><li>类 ，用户定义的类型，由成员（&#x3D;成员变量 + 成员函数）组成，实际是一个数据类型的蓝图(抽象)</li><li>类是一个数据蓝图</li><li><ul><li>非静态成员变量依赖于实例而存在，每个实例拥有自己的一套非静态成员变量，在构造实例时按照定义顺序初始化，在析构实例时按定义顺序的逆序析构</li></ul></li><li><ul><li><ul><li>这里注意父类在子类中被认定为第一定义顺位</li></ul></li></ul></li><li><ul><li>非内联成员函数不依赖实例而存在，所有实例共享一套非内联成员函数，其中非静态成员函数依赖首个的默认的this指针来区别当前服务的实例，静态成员函数没有this指针但其也不访问非静态成员变量</li></ul></li></ul><h3 id="数据访问修饰符-封装"><a href="#数据访问修饰符-封装" class="headerlink" title="数据访问修饰符 - 封装"></a>数据访问修饰符 - 封装</h3><p>public 公有成员，可以在类外部直接获取和设置，使用 . （成员访问运算符）操作符<br>private 私有成员，类外部（包括子类）不可获取，仅有 类自身 和 友元函数 获取<br>protect 保护成员，同私有，但是 其在子类中 是可以获取的<br>显然：从访问的区域大小来看public &gt; protected &gt; private</p><h3 id="类继承类型符-继承"><a href="#类继承类型符-继承" class="headerlink" title="类继承类型符 - 继承"></a>类继承类型符 - 继承</h3><p>public，private，protected 继承后按照上诉区域大小，往小限制</p><h3 id="类成员函数-封装"><a href="#类成员函数-封装" class="headerlink" title="类成员函数 - 封装"></a>类成员函数 - 封装</h3><hr><h4 id="1-必须在类内部声明，可以在外部定义"><a href="#1-必须在类内部声明，可以在外部定义" class="headerlink" title="1. 必须在类内部声明，可以在外部定义"></a>1. 必须在类内部声明，可以在外部定义</h4><p>需要使用 类名：：函数名 的形式， ：： 是范围解析运算符</p><hr><p><strong>特殊类成员函数</strong></p><h4 id="2-构造函数"><a href="#2-构造函数" class="headerlink" title="2. 构造函数"></a>2. 构造函数</h4><ul><li>在每次创建类的新实例时执行，名称与类的名称是完全相同，无返回值(注意是无，void也不是)</li><li>一共分为两个阶段 ： 初始化 和 执行函数体</li><li><ul><li>无论 成员变量 是否 处于初始化列表中 ， 初始化阶段都会为其做初始化</li></ul></li><li><ul><li><ul><li>如果 成员变量 是类实例 ， 那么这里会默认调用 默认无参构造函数； 如果在初始化列表中使用一个实例为其初始化，这里调用的是拷贝构造函数</li></ul></li></ul></li><li><ul><li><ul><li>对常量成员，因为常量只能初始化不能赋值，所以必须放在初始化列表里面</li></ul></li></ul></li><li><ul><li><ul><li>对引用类型成员，因为引用必须在定义的时候初始化，并且不能重新赋值，所以也要写在初始化列表里面</li></ul></li></ul></li><li><ul><li><ul><li>对于没有默认构造函数的类类型，因为不使用初始化列表则系统自动初始化时默认使用默认构造函数，这里就会报错，而在使用初始化列表时可以不必调用默认构造函数而是直接调用拷贝构造函数来初始化<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="built_in">A</span>()&#123;&#125;;<span class="comment">// A 拥有私有的初始化函数 </span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">A</span>(A &amp;a)<span class="comment">// A 拥有拷贝构造函数</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DeriA1</span> : <span class="keyword">private</span> A</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">DeriA1</span>()&#123;&#125;;<span class="comment">// 不在初始化列表中指定A的初始化模式,系统自动初始化使用A(),为私有函数,出错</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DeriA2</span> : <span class="keyword">private</span> A</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">DeriA2</span>(A a) : <span class="built_in">A</span>(a)<span class="comment">// 在初始化列表中指定使用拷贝构造来初始化A</span></span><br><span class="line">&#123;&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><ul><li><ul><li>子类初始化父类中的 私有成员变量 ， 继承情况下，通过显示调用父类的构造函数对父类数据成员进行初始化)<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">int</span> num;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">A</span>()&#123;&#125;;</span><br><span class="line"><span class="built_in">A</span>(<span class="type">int</span> n)&#123;num = n&#125;; </span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DeriA</span> : <span class="keyword">private</span> A</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">DeriA1</span>(num) : <span class="built_in">A</span>(num)</span><br><span class="line">&#123;&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><strong>初始化的顺序是按照成员变量在类中定义的顺序进行的，不是在初始化列表中的顺序</strong><br><strong>初始化的顺序是按照成员变量在类中定义的顺序进行的，不是在初始化列表中的顺序</strong><br><strong>初始化的顺序是按照成员变量在类中定义的顺序进行的，不是在初始化列表中的顺序</strong></li></ul></li></ul></li></ul><hr><h4 id="3-拷贝构造函数"><a href="#3-拷贝构造函数" class="headerlink" title="3. 拷贝构造函数"></a>3. 拷贝构造函数</h4><ul><li>用于使用一个实例用来初始化另外一个实例，显示调用</li><li>用作函数的(传值)参数，返回值，隐式调用</li><li>定义形式 ：<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">classname</span> (<span class="type">const</span> classname &amp;obj) &#123;</span><br><span class="line">   <span class="comment">// 构造函数的主体</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>深拷贝与浅拷贝</li><li><ul><li>深拷贝会在堆内存中另外申请空间来储存数据，解决了指针悬挂(多个指针同时指向了同一块内存区域)的问题</li></ul></li><li><ul><li>编译器一般会自行定义拷贝构造函数，但只是浅拷贝，这在成员变量中存在指针类型变量时不合理，因为这会导致两个实例中的指针变量同时指向了同一块内存区域</li></ul></li><li><ul><li>为了防止浅拷贝在程序中被隐式调用导致问题，可以定义一个 私有private 的 空的 浅拷贝 构造函数，当编译器默认调用时就会报错提示</li></ul></li></ul><hr><h4 id="4-析构函数"><a href="#4-析构函数" class="headerlink" title="4. 析构函数"></a>4. 析构函数</h4><ul><li>一种特殊的成员函数，它会在每次删除所创建的对象时执行。</li><li>析构函数的名称与类的名称是完全相同的，只是在前面加了个波浪号（~）作为前缀，它不会返回任何值，也不能带有任何参数。析构函数有助于在跳出程序（比如关闭文件、释放内存等）前释放资源。</li></ul><hr><h4 id="5-友元函数"><a href="#5-友元函数" class="headerlink" title="5. 友元函数"></a>5. 友元函数</h4><ul><li>关键词 friend</li><li>用于声明 友元函数、友元类</li><li>友元函数可以访问类中任意成员变量，包括私有与保护级别的</li><li><ul><li>友元函数并不是类成员函数！其没有this指针，无法默认指定操作的实例。所以其在访问类成员时，若访问的是全局实例对象 或者 非静态实例的静态成员（函数与变量）可以直接访问；若访问的是非全局实例对象的非静态成员（函数与变量），则需要自己设立一个对象参数用来指定操作的实例。</li></ul></li><li>友元类 中的所有函数可以访问类中的任意成员变量</li></ul><hr><h4 id="6-内联函数"><a href="#6-内联函数" class="headerlink" title="6.内联函数"></a>6.内联函数</h4><ul><li>关键词 inline</li><li>内联函数在编译(静态)时，编译器会将该函数的代码副本放置于每个调用该函数的位置，对于内联函数的修改后，需要重新编译所有涉及该函数的客户端</li><li>内联函数关键词是建议性的，具体是否实现为内联函数有编译器在编译时判断</li><li>内联函数需要足够简单：</li><li><ul><li>1.不允许使用循环语句和switch语句</li></ul></li><li><ul><li>2.定义必须出现在内联函数第一次调用之前</li></ul></li><li><ul><li>3.不能太长；</li></ul></li><li><ul><li>4.最好不要递归函数</li></ul></li><li>内联函数并不会破坏封装的特性<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// int x = a.getNum() 等价于 x = a.num</span></span><br><span class="line"><span class="comment">// num 是 公共元素,可行</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="type">int</span> num;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">getNum</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> num;&#125;;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// num 是 私有元素, 编译器报错</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">int</span> num;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">getNum</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> num;&#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul><hr><h4 id="7-虚函数"><a href="#7-虚函数" class="headerlink" title="7.虚函数"></a>7.虚函数</h4><p><a href="https://blog.csdn.net/sunshinewave/article/details/51079204">https://blog.csdn.net/sunshinewave/article/details/51079204</a></p><ul><li>关键词 virtual</li><li>虚函数时类的动态多态性的体现，其在父类指针指向子类实例并调用虚函数时具体调用子类的实现，这是虚函数与动态多态性的最直观的体现。</li><li>虚函数的实现</li><li><ul><li>虚函数的实现基于 虚指针 虚表 this指针</li></ul></li><li><ul><li><ol><li>虚指针(vptr) 这是一个指向虚表首地址的指针，它是类的一个成员变量，在编译器发现类中含有虚函数时自动添加</li></ol></li></ul></li><li><ul><li><ol start="2"><li>虚表(vtable) 这是一个记录着该类中所有虚函数接口(函数描述名)与该类自己的虚函数入口地址的二维表，其存放在全局数据区</li></ol></li></ul></li><li><ul><li><ol start="3"><li>在(静态)编译时，子类首先继承父类的虚表，然后向其中添加信息，若是重写了父类的虚函数，在覆盖掉虚表中相应条目，将对应的入口地址改为自己的实现的入口地址；若不是，则向续表中添加该条信息即可</li></ol></li></ul></li><li><ul><li><ol start="4"><li>在多继承情况下，（C &lt;- A B），子类C将拥有等同于其父类个数的虚函数表（2），同时子类C对于虚表中加入自己的修改时只会在第一个虚表中</li></ol></li></ul></li><li><ul><li><ol start="4"><li>在调用时，调用者通过this指针尝试调用虚函数，(考虑到多态，这里是父类指针指向子类实例的情况)，而this指针尽管其类型为父类但是其实际指向的是子类实例，那么在相应的内存中找到的也就是子类的vptr,于是找到的虚表也就是子类的vtable,调用的函数也就是子类的实现了。</li></ol></li></ul></li></ul><hr><ul><li>纯虚函数 通过虚函数不提供实现而加上<code>=0</code>实现，纯虚函数类似于接口</li><li>拥有纯虚函数的类称为 抽象类，抽象类不用被实例化</li></ul><h5 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h5><p><em>1. 虚函数能不能是内联函数   不能</em></p><ul><li>从编译角度看，虚函数在动态编译期实现，内联函数在静态编译期实现</li><li>从实现角度看，虚函数基于 虚指针(vptr)与虚表(vtable) 和实际调用者（父类指针实际指向的实例）的类型来判断实际调用的函数实现的，而在静态编译期，编译器并不知道此时指针所指向的实例的种类，因而也就无法将该函数作为内联函数展开</li><li><ul><li>虚指针是类成员变量，当类中函数虚函数时编译器自动添加（这里是计算类所占空间大小的一个注意点）；虚表示放在程序段的一个表，在静态编译期生成</li></ul></li></ul><p><em>2.构造&#x2F;析构函数 与 虚函数</em></p><table><thead><tr><th>构造函数能不能是虚函数</th><th>不能</th></tr></thead><tbody><tr><td>能不能在构造函数中调用虚函数</td><td>能 不建议</td></tr><tr><td>析构函数能不能是虚函数</td><td>能 必须是</td></tr><tr><td>能不能在析构函数中调用虚函数</td><td>能 不建议</td></tr></tbody></table><ul><li>一个子类的构造的具体顺序如下(析构时逆序)<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">直接摘录构造顺序：</span><br><span class="line"><span class="number">1</span>．构造子类构造函数的参数</span><br><span class="line"><span class="number">2</span>．子类调用基类构造函数</span><br><span class="line"><span class="number">3</span>．基类设置vptr</span><br><span class="line"><span class="number">4</span>．基类初始化列表内容进行构造</span><br><span class="line"><span class="number">5.</span> 基类函数体调用</span><br><span class="line"><span class="number">6.</span> 子类设置vptr</span><br><span class="line"><span class="number">7.</span> 子类初始化列表内容进行构造</span><br><span class="line"><span class="number">8.</span> 子类构造函数体调用</span><br></pre></td></tr></table></figure></li><li>由1 、 3 可知，寻址构造函数在设置vptr之前，构造函数不能为虚函数，否则无法寻址</li><li>有 3 5 6 8 可知，在执行父类构造函数体时，vptr指向父类的vtable;在执行子类构造函数体时，vptr指向子类的vtable；即此时 虚表虚指针已经退化，没有了多态的能力</li><li>可以理解为</li><li><ul><li>派生类对象构造期间进入基类的构造函数时，对象类型变成了基类类型，而不是派生类类型。同样，进入基类析构函数时，对象也是基类类型。</li></ul></li><li><ul><li>所以，虚函数始终仅仅调用基类的虚函数（如果是基类调用虚函数），不能达到多态的效果，所以放在构造函数中是没有意义的，而且往往不能达到本来想要的效果。</li></ul></li><li>析构函数则需要在调用时明确当前的析构目标，所以需要是虚函数，否则无法分辨当前析构的目标</li><li>父子类是析构函数是不同名的但也是虚函数，这是C++自行实现的，析构函数甚至可以是纯虚的不过必须有定义体，因为子类的析构函数会去调用</li></ul><p><em>3. 静态函数能不能是虚函数 不能</em></p><ul><li>静态函数先于所有类实例存在，不含有this指针</li></ul><p><em>4. 构造函数能够为常函数 不能</em></p><ul><li>常函数只能访问而不能修改类成员变量，而构造函数的目的就是为了赋值类成员变量从而构造类实例</li></ul><p><em>5 虚函数返回值的协变</em></p><ul><li>一般情况下，子类在override父类虚函数时，要求其返回值、函数名、参数表都必须是和父类完全一致</li><li>但是在如下情况下</li><li><ul><li>父类的虚函数的返回值是 CBase 的引用或指针</li></ul></li><li><ul><li>子类的虚函数的返回值是 CDerive 的引用或指针，CDerive 继承自 CBase</li></ul></li><li>这种情况称为“协变”，在虚函数中是允许的，且常用于 “工厂模式” 的实现中</li></ul><hr><h4 id="8-特殊函数重载"><a href="#8-特殊函数重载" class="headerlink" title="8. 特殊函数重载"></a>8. 特殊函数重载</h4><ul><li>以下运算符不能被重载：<code>.、.*、::、? :、sizeof</code></li><li>重载运算符时有三种形式 重载为成员函数 、 重载为友元函数、 重载为全局函数</li><li><ol><li>重载为成员函数，第一参数必须为类实例自身，优点在于可以保证封装特性</li></ol></li><li><ul><li>强制类型转换()、下标运算[]、指针索引运算-&gt;、赋值运算&#x3D;  只能重载为成员函数</li></ul></li><li><ol start="2"><li>重载为全局函数，优点是第一参数可以不必为类实例，能满足一些交换律</li></ol></li><li><ul><li>算术运算 + 、 - 和关系运算等建议为全局函数，可以满足 complex + int 和 int + complex</li></ul></li><li><ol start="3"><li>重载为友元函数，第一参数不必为类实例，且可以访问类中私有元素</li></ol></li><li><ul><li>流操作符建议重载为友元函数</li></ul></li><li>重载运算符不改变运算符的优先级<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">在涉及到运算符重载时要注意</span><br><span class="line">1.运算符的表示方式为</span><br><span class="line">1.1 一目运算 a++</span><br><span class="line">1.2 二目运算 num = num1 + num2</span><br><span class="line">2. 类成员函数的表示方法为</span><br><span class="line">2.1 return = a.(this,param1,param2)</span><br><span class="line">对于一目运算,类自身就是唯一的参数,返回值也是自身(变化前/后)</span><br><span class="line">对于二目运算,类自身是第一个参数,其他为后续参数,返回值视具体情况</span><br></pre></td></tr></table></figure></li></ul><hr><h5 id="1-前置自增与后置自增运算符重载"><a href="#1-前置自增与后置自增运算符重载" class="headerlink" title="1. 前置自增与后置自增运算符重载"></a>1. 前置自增与后置自增运算符重载</h5><ul><li><p>实例</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">// 前置++++self 先自增后使用</span><br><span class="line">self &amp;operator++() &#123;</span><br><span class="line"> node = (linktype)((node).next);</span><br><span class="line"> return *this;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 后置++ self++ 先使用后自增</span><br><span class="line">const self operator++(int) &#123;</span><br><span class="line"> self tmp = *this;</span><br><span class="line"> ++*this;</span><br><span class="line"> return tmp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>对于前置++</p></li><li><ul><li>返回值是增加后的自己的引用</li></ul></li><li><p>对于后置++</p></li><li><ul><li>返回值是增加前的自己，所以需要一个临时的拷贝tmp</li></ul></li><li><ul><li>为啥返回是一个具体的对象而不是引用？临时拷贝tmp会被销毁，返回的具体对象是系统自动拷贝构造出来的</li></ul></li><li><ul><li>为啥要是const的返回值？ 因为要禁止 (i++)++，在前文的实现中，i++返回值是一个临时拷贝，(i++)++的实际执行会是 i++ , 返回值是 i++ ++;而不是预期中的 i 实际自增了两次；所以不能这样</li></ul></li><li><p>选择一个使用，选择前置自增，其不会产生临时对象，避免了构造析构带来的额外开销</p></li></ul><hr><h5 id="2-赋值运算符重载-拷贝构造函数"><a href="#2-赋值运算符重载-拷贝构造函数" class="headerlink" title="2. 赋值运算符重载 拷贝构造函数"></a>2. 赋值运算符重载 拷贝构造函数</h5><ul><li><p><code>A = B</code> 参数A是自身；参数B为被拷贝的类，应该保证其不被修改；返回值为对自身的引用</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ClassA&amp; <span class="keyword">operator</span>=(<span class="type">const</span> ClassA a)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 赋值操作</span></span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>赋值 深拷贝 与 浅拷贝</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">基本数据类型(值类型) 和 引用数据类型(引用类型)</span><br><span class="line">值类型 即在变量所对应的内存区域存储的是值 如 INT CHAR </span><br><span class="line">引用类型 即地址类型 如 指针 数组名 类实例名</span><br></pre></td></tr></table></figure></li><li><p>赋值 即 将一个内存区域的内容拷贝到对应内存区域</p></li><li><p>当对值类型做赋值时，二者内存区域相应变化，这不会有什么隐患；但是当对引用类型做赋值时，会导致两个指针指向了同一片内存区域，这会产生 “指针悬挂” “非法访问” “数据异常”等一系列问题。</p></li><li><p>浅拷贝 指 仅对数据做简单赋值，不考虑其是否为值类型与引用类型</p></li><li><p>深拷贝 指 对于值类型做简单赋值，对于引用类型，开辟属于自己的内存区域，将指针所指向的内存区域的值做赋值</p></li><li><p>C++默认会为类生成一个拷贝构造函数，但是这只是一个浅拷贝的函数，即只是简单的执行逐字节的赋值，很明显，当类成员变量存在 引用类型 时，这会导致很多内存问题</p></li></ul><hr><h5 id="3-流操作符重载"><a href="#3-流操作符重载" class="headerlink" title="3. 流操作符重载"></a>3. 流操作符重载</h5><p><strong>重载运算符函数 应该为 类成员函数 还是 友元函数</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1. 首先明确 当重载运算符函数为 类成员函数 时,其 第一参数 必为 类实例自身</span><br><span class="line">2. 那么这会导致一些需要第一参数不为类实例自身运算符无法重载为 类成员函数,比如 流操作符, 复数加法操作符;此时应该考虑 将重载运算符函数 设置为 友元函数</span><br><span class="line">3. 流操作符 ostream &lt;&lt; class / istream &gt;&gt; class 要求参数为 IO流</span><br><span class="line">4. 5 + c 这种情况要求第一参数为 INT</span><br></pre></td></tr></table></figure><p><strong>重载流操作符</strong></p><ul><li>流操作符 本来应该为 IOSteam 的类成员函数，但是我们无法修改库，所以实现为 类的友元函数</li><li>根据平常使用 <code> (cout &lt;&lt; a )&lt;&lt; b ;</code>可以知道，参数一是流对象，参数二是类实例，返回值是 流对象的引用<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">ostream&amp; <span class="keyword">operator</span>&lt;&lt;(ostream&amp; os,classA a)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 输出A</span></span><br><span class="line"><span class="keyword">return</span> os;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">istream&amp; <span class="keyword">operator</span>&gt;&gt;(istream&amp; is,<span class="type">const</span> <span class="keyword">class</span> A)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 输入A</span></span><br><span class="line"><span class="keyword">return</span> is;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><hr><h5 id="4-重载下标运算符"><a href="#4-重载下标运算符" class="headerlink" title="4. 重载下标运算符"></a>4. 重载下标运算符</h5><ul><li>为了支持 <code>a[i] = 4</code>，返回值要是引用类型<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>&amp; <span class="keyword">operator</span>[](<span class="type">int</span> index)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> nums[index];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><hr><h5 id="5-重载强制类型转换符"><a href="#5-重载强制类型转换符" class="headerlink" title="5. 重载强制类型转换符 ()"></a>5. 重载强制类型转换符 ()</h5><ul><li>重载强制类型转换运算符时，不需要指定返回值类型，因为返回值类型是确定的，就是运算符本身代表的类型<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Ccomplex <span class="keyword">operator</span> <span class="title">double</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> real;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 面试 </tag>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库原理上机实验</title>
      <link href="/2022/06/21/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%8E%9F%E7%90%86%E4%B8%8A%E6%9C%BA%E5%AE%9E%E9%AA%8C/"/>
      <url>/2022/06/21/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%8E%9F%E7%90%86%E4%B8%8A%E6%9C%BA%E5%AE%9E%E9%AA%8C/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="2b7cbd1973a56328a681a8453c4e4f6d41cd230f14c2ad9d07aaf468a63beb58">10d79030e8222445804370796b90fca16014509a2fe9c37552e338c7db9a928a95a8a6121bf1fafb00748dc231066670776c10101fe0d861cb640163a4ad08ad2e5fe1c174753902b2b61f59d8e70bdbe9eeb029c0636ad18acb0bf64a37baeb424548fd4347b1bdacd9cf4bcc2ee23c03e3fc9ee8f745fc2bfc81f34bb1beeea207c4e70bdc46a289f5b071c092ed574f5b451f885780adfec4e9f12428492de1da6fb6030ffbd843ae471e25170485a483730ccd239fddac77636b77351500c7fe13769e13147612de1145d940b9e9c9904f5a051c2a0a865a9f1dfc456b87703ae1ea485e9ebcdf7c612834bec7e81b3ec70f78f49a0618bcf49fe0889405e3422838e52fc031b0139cc1c7b60f455c2de3181ab5772034ee2ad5c61429a974cd0f03b48c154edeee6094994e24d1ccc55bfe79bb0ccd0de8d816e5b93a81acb9bff8d06635b26993b76c9076b01fda75496fb4f5fb9a8c46a702b35ade805efd881ec30b00cb215a5398ff7bda5b04f79fbffa0ec7dc19c99787b4f34721dbd9a76222f48678e13bef577f4d45ad65c36a45bd4448d1478c71bab2315686ceea466beba2cb44c2ebdaa9ad0c906517e065dfca6ff75f8b0c7e8272fdca8aad25a3c2870bda56960c32aa097ec0c7e9c9fe15a3fdad8cf60acf4a7736cafdc829f726107e1c490f7418cd6767eb0974885d49c37ebec48172ff901ca05081180997c8bb8667a7b63a6c10c4d03f675a3f73d20b9973269d69141ae03ddc3cb3d6dadc542e893aa608004cc735ce94cae249b2f46da852b398e9427ec9244bc836742fa0e9866a00f1327c09d716377daf1956642c6bd1944ecbb18590dee17bf24349572c93bf541190f44055c94bc02e9f1e3a4cec556bd0ba30251a4d2650e4af6622f9ca56789c2a279fb261dff5827c6e098ffe8f503cf18837423f514225aa1516383324447479b999d0f310e6fd18de888ba88e92392e3e89b5e3676ea2ef2fa685e305a9412b7c0871dd489056701d170de6692a3476e582af09bc927b73afc96ca7ce587a5bd83052d5108bdddb34a8e86c7c122a2c45e96d05391a05cdb6343e81cca0e4071872d920c949fb783987ec8e6d51a39b6a26dc349bd9c93646922e77e5713f9cdf6a1eb8f3eb33ccc8f28fb7d56e218ebc3f25377e8aff40be0db0b3197f22b96f7713d37999aac66347df92ef5d62d1537315ee4d310aceed6271defda46437a1fca908ba781daf12dcaa325fe274120a5c6d43fce8c6d295f51178d63950ffb446b455dd61225d6e05f100dfc1e7252e1156d6d8628317034438e3c9b571fb662c04eeed662e53fe80e8ab92f4c777078775ac570bf4e47158553d31179cc4036b9e247653c2c2a45d2bb92f89ab64823fdca5e0dbb645573385282ef5f05723b848e13e46cf855cd19677f1ebf003ead6e85263203854cd202d6b11d69c0c2bf37980441e2e96bd06cde314dfdb068b31151dcf74cec1164a2ab5a47d0bb2f8d987c2bdf5b04c146e56c42280a906000573c84bfd448ee77480c4851ff4a9a2c64294e4850073b1e7b68259f34bee8bf8f3ce07fdfcc7e7ad639f3b58405acc320337cbc551dfa085fceac86272f9f935157a46d372a127162928572112fa8c5871c80f9e4bf0d9681aa39cc035c9c385a60629afac96f34ec74bc78269f681c390f8fdcc046b80ed116d832511fa98b2dc406605cd71c9c84b74ca3c10460f353f5943aac5422f19d26cd38074f1c7ed8acc668397f9faf8911a2dcbf3748fc93f4a40e89576c21a968952d0bcd855ddf9e68bf430387f84d0d264c4db37b4cf5aa8006315f66537de3da7ed7056d44e707c3df2e6582cc84d391338d79d429638481e9147b1306c8baafa24f11689cf2454ee0b31d8f1ed09a544b0b90d1b46a388a88b4d019f1aa400e99206fa5b498f784041b5a16633c0706450101bfcd74f6905de3cd9902e2fa47fe2752ba6280e85548f3bece034676ec06433a3683c7e175cbcff1b9193657dfa6d308556e569d6923b656195ee21e40b654ac6bb88e5521c67dd878d6f73a307c6ccae55039237fb14a1fc444f5acaae20be1f06ed0d63594fa3016e8ca0778a5b73f4f39267b2683aa0af751ad57e4ef29f5202d0d454bd5f42b4cfe124f324c777a7d8465666a30842bfe3b03d68ef7ee552b8df930ec4d84d60808776c439fa48c3d12310f01f5ccef28d24891ad51fe9e9674f38b22fdc70744bbf25ad7fccceb1588d92025a59e14f2bbbb0b8ecbed0bf80571f66f9bf7cbda86fc08f4a2b2ec16d615d9d03fbfffcdbda72e2155aa7a779ba2b5cf47f4cdaa68e3a06c5b42a83f77da772d0f04c2172ca39ae85c1092f53191c032ed13f0d51d26895f92b83f3b6e935e981709a45b00cfff16d7782550081f03f7231c834364937afdd9bdf38828161c34898e424dd809ad98400ecf8ab1801bf2c1e339795c0aec034aeb26fed7be67b3c42934ced7051b0a96de04a188f61fa8efc5f8e23f945ad42f30fdb15007dedbf1ddebc848c7659f9652d084b28dec767cdbae9d9265d0ac9608df14a65004e38b0952f084b9d39f2abde7ccd9862e580567e9bf0e3552d2dd118a92444ee4469905da952cae275d7be94a77620e71b558061e835d19e939b1aee57a20689df130f1d869bbe0af931237052a7b0a0f27abfefde83bfd593329514425ebfd19c3ecc0a16c82f27399d8f28f3bbe6558e3b906abe1c137abe08a028660b1500d625e39e01fc60b309133d866ebbaf412c85ca92b58bdca64615e21854be5abead1d58cb63c2ff0415a827250f945d3609ed420f09a1b7e51906c9a018dc328536f9309e9a57f6f9c11d722ca247af5c7d83a3e520ffccee21e29f6a63e69e1aeab429cac4d4cd537df976cab4a8dcd8c33e49de6ad130480ea4cb10b6859d00e14747a42797ce3ee48ab2714c0af990a2e4a39c88cfe3cb6f2902789493ae870c0b8d0df150cb731beaa3f6090d409723dd6236d3066f4319200b2652ab1f736e1a1255717437c764de0a06be23a5940e801e2fe8ad559f99f7e31cf07f38d7d349a65f2ae263864cdb5dac12991cbb2ba1e23d1b6ac8d6184673dd4f10cdc56ec75a222de2a80ac659256ebaf8ac22daf9c9d9ff0b088097a80c5a559ab92a0b7527131c39a379d15e4a01ba7b5970b58fd3f689efbdb7f6c56698ebfdecf13fb55bf0b5ad24d0547bc9884b61ebaacf0484af9cf2a88b6e77783794e6718493df47aab612837365a1609141845ed8d030eca595cbe13c20962842ab4955bcd4623ec8e0a2e2a5253e0d2f97b5af9587962fe05f3423c7d0dccad6875d4ecc57428b87442701fb853a75c7138958436e59062e983c5c0377a982c8ee3cf705aea2bc03d629ca22eb2e7a763385b892717316bebcb1050054ef961d52bf6f4845fc32a2d7499e5d93886ba614a12ea0fb6093fd7f70626cfa4eb2066026d55838618b666abb63603b36bc516f8541781f9882157887b438d9699ec1904f1c426f9437e396ee43884fc4cfb6c1cb4873d7c97480d6014d83e34ec63c95081a37146737cf24646d4ac1038a81df1cafed2eded16e31d46f0c95cc98252390fc7e7baa72e200b914297460a324da7a7f529fd576763e7c2bad4d12faa5c7715152b56188f3993b0b16a526866a2cf781d289734d267df22800a461c2e05b187e07a9ebb0f2292917e1a66623f5a3c1c75bd091331d70323eb3b2bb48ae5d7d54396335ee15863cd735fee1255bc071c4a8a3f121173cb6630d88aa9c713ad4f8a473e5e1a4661ecc778b6d79b3b1b9de03e8b3e03c874680dcc0bb9b08fdb0b437ee0a77d39f95034f4452762d29779680a3eefc500eee8e4ea254184c0cf81ef71a90617725bde358a58d517f75249996c3ecf4f63633da09dee1ef61f326bd8a49f0f92452de285dfcda49284a0db2f330a9d7db1722bd4e8b8c3cddfa5d428a3d472cf63aa64ce81d7958bbe4fcba5e06b8688510b3dcdefc0ec5ea98bcdb001937678331d27e2cc17abdc7df349eec412abf0f6d312f9b36dda00618ef5d263111a6160338e4891035f6be03765dce1642180d3b2fc160199575b86ecf71b2a229fc142e811a3e4076aac150aba7bb639cc5e5660a569379c823dd265a1a891b44936fd888d2c8af9be67395b3ed1c6f14f4ae258575e4e9edd2ce17cb386af4833ec6232fc2a6522946ac480237feb6326435d8f73769f4c18fc75e41b1338454de11536adcfc577958c33aa8f866a1b7cf6b83f90bb7957cbc4af3aac2fed75fbab5ef1f7e9879c635a6ea7e07979ce8caaf7fa3d79f88fc3fb67567eafb0963494a386e24ac24b02527ed5072e5fdbb7e022c99e4322551adce0dfb90769f1afd364948b6e5d475b5e80b8c036a7bce82108eca807d4743230e6ad5a76d1fc16957abb6433939c7c0b213b47baa1cd278dcbe9e2cb1aa98e96f108437600d3c6ae989367d7f77079fe41383f2ed39853e523e6ba6f0ea8bb087f1e91d9e5182d39bf28c25deec5a33f1d975c5bf431784473523fbee6fa919c4cc8a4e851b41b12cae1e4e716930b9db80bdea8c207848845f027176591703d0d8111be6ff1fd55ffe73fe21936d52cfa123a97914bc238cf75501fabe01c12bb1ee27179c83398d90b0151a18141b16f9b4b962ae9afa10e183bb9ab7e5dd7d8b7c702dac55eae23e299d4954e1a213326bf77cae67ebe298b2c605284644a21bed0ae636b6efd281025c3b0b83a9099126f987cef087153695a13ffc63f5123b6291d60774a0f26d231b099dbd1f5822e3839f231c4c73eafe9677624617fc3ee85b7aa8eaec3c9e52c4cf3ae1e172d489814cd8e57ea548c132b7541564d93811bc68f5a0d0f574052f6868efe42cdb21e46d7431146e674f78a3591d0e94beb1b7256ccdb58063886e0c811a85cc3888274ad93c64d020c8715009aeea61873a43c57c78d4af4aed9603a5af63b121c642b9a3538aefee1bc70a66c240e7ac05b53dd6376e62f4761c85b9269a8cb4810bbdc5fb57e72a045e64830bc6c99cace81bb23238fc37c1b80261c90db0456cbbccc92bcc2aa94faa38a7e90018b582a55432845d481514e2b2db5ee8a9baff31a1895a1ad5c3304cfd96f0e0df779a36d31edb532a2f66078d755af027f33366c18f6580d14306e4d8594c223bb8f35f58fbb2e1d234c0b0779897d70179f717b198ea774e95ca5d20b598e0e4ee5378f6153325c8505d57f1c00fd95a18be005628594e545e7968a4dafe24b2e1ca3b1b06929ef8c87c78cbdc020b7f6d29fff7e2239ede5a5b6fed3c38f9a45b56bec1e2371676166d619403afba7add45196c33bb92d3384130f415ce5019e049e6d61d3f3aff2e77e64948d21b27921240fcb138f4b1eee3fea98e0bbe4dbc3c50cd9d9a17a9c03651a4f326acb1070644d9f79f049054185a5e5c5b34db9bbd5014309db51dcc76c3b5793e67847960cebcea16e160834a1b14ce7042577a0304dd5fdf95f1d7add8669eaf8a6f04882988f0560b72054f914e8b58fbc2f03323550a202a613392fe3c0d069efbc94f4b34a45760d5fb634fb14f0bf45f8e15677ea54ac87a83f8022914035d6ca59d47c65945e23626fbe0b4e8d1c293d2ea1fb15e09feacdee196d2af2c3dacf194af57c4cabaad207e51402738cad7e7fdb4515b163efc938b8341be4e08827d624b9f4edf895c2943dafc26a63cdc5ee81992c3b6ec96ea75d404a699d1bfc5f95c30629c55708f1b39833fc92cdfe93ac9066b8b7b138af297089800e93a2336cdd8bdfc5d94584d839afc55538320415c32c71d1586cb713394f0b7b53dee80639e42e1766e73651f66a4d55a70b3a95668403b6d6d08f1bba93f116c3b65aaaf6b84122867aa8fa5da89eb5700d1763d0b0fad7833537eea8670e0b48472f65ab587008dfc70e2401019d5cf17f52c226d01b34ae81219137189d8d9d2c298602f3f91d7228eabb773eb406e3d948e10c42b92d7c8064e068516d27418b497aa0fdc6aac79f171f87a08f05dee0922d7a642a085cdb6bb73099a9aa5857281404f054258dbabb9e1030d272f68257ef190ec92875fa543de419d6c3ae2f271cfa1fe4e8cb1351c9fe57dc86fef3b65d3238c54739a9c42415a6b4da0397e8f5c242a4c0d349c5fd71ec27cfe1b6de8ca248f13f39cdfdbbf854f9024de1f25d52b065fd4ebbef1fe4d10f20356cda9db266eeed7e66ea6fbf202433d4c149c702c6bcb5be2780160caa8ff96ff25ae5cc2b566730b399e635fb3639d9a75545e6bf378d9888314aac8ce40eee73afcb8d199eb735c52c40aa9b204e6178c1c5cbec630df694b8f4763a2e6f8452e991ccfaa87e2f4de52f48c2b5aaeeea2d39b55c59aea61e5f072404b50d4fecfb34df3ac842a6fb38243215d90355a061d6eface4b27ff8fe605468e6f317a54ac58d39edecd92e110d399cfbce5ccaa0279205b0608ae9e78e90c3094625611494ff8ab0ad29194d8a59d98c92287335862b8d3cedb6f2a1e78064fea2357795bfec055efc04e9059228cacec82bdb2815cd48d791ddf9e2f27235890a155590e1119bfa2340f71cd9814a2b411ff99517c24b2f5b9bb5fb80aa0895c502eeeeed4d912ff0ca28d6f364b32cef9538d84a733f874bf21cd41ad8dfed1796915591085a0b1b7736636f566316e8f386322bab341d42ea165cfc98b2875b26568a096eb0e43dd0a467a2ae246329d66e253cd0d306d0346010531f7be195e7a5a43459b928fcd00a9059034c272b7bc99fcf980bc8cf68b2a3ed2855269e51edcf678930949e45fbf03c67b25123631a876dd105cf384d42c4cba4e131d3794714e3260e072221a3f8532e190b8171ffde1a4fd26e1889a009b9ac40c0127688e07e99a9cd753aae16be19424472b91f2f688e1bba2388901d38bcb9a5cc5d6d007d423e255485157989870c63d28f69812f43e4456481085b9b37cbb1cd12c6cb60f0e62bb72543a88bc4723df7b27fde4123be6f7d791bbb6adc5e49b630f60f2fb2120069fa0c96ada14818f919f47199a716442c5b8dd5b8848a0e07a7aee131a3dab6ea669b77f4bfb89fec662700d244e1a386e31c4e274e886f697f1f77b551dbbde96b7999b8b9291afa42c3dd68a8b7a2dbb6ce371bf35b0eea83ef14199c65e877256f8508f8c2367bb7fad8f448e61b4be9ea3f436d3a9b1d9016dfd794a3b56437c7116c02c3b4aa670047c225bebab992dbc53cb397791daf5db437a2c7ae72477494dbbbfbad4633fa0feabd053264a11864e067b971465c61ddbc27538f4464de325b61039d5b899d4a2de399375f9640779ad69eaa64131ec1b80e90671a9c6c724c7f4f78ea72681887e16d41007a46b9567c213d8326741e42b10b4c9a127ccd8c7ec1cc4df34a2dff0c54970444ff8e3696295f80a769fdf7d7e797d64566900775e52ac088d6ddf588944621147637e81d78b4c3cd69ebb10dfd872a3cbbce11644fa6c386f16c003955e84a3c0b0931f73aef17fc0b5c91c4199a48779d766d8846c21de5daaa9705d314e0e72b8c2ca61bf1f8303d076f256d8e39b0b75b34c980b961bdaa940de1017558fdc91dd6dae7c72edaca2aa2def126fa15f1b1976f702a62546877500e4dd3fa7e05b58d0280f8c6c89cd04a6587c48f8e6c7d6531c0df169d442df51bbb4a0e5f7cb629c57971a10728603265be51a9032c3df02c071560e16bef8f61d76d6b909de30c693a8621e1c9c71d78eb4706a94ecce6c3bdbd18ff5d06c20b85f6d8be47cebdf49231a3c64ccfdd0d246adbc07d10f21162b72db938e71ce3485624030129ba3f4a051efe756bce94edb7b546aa01a41afdaec58380063b83008d48ab6a980a39fb7169657719a36a7588102b5970aeb4fc94dc4bd4308932fd18ab0b8784dbe6cfdfac5f32c9ecb0edf3821f9b1c67dcd3bf6b98fd88cbae264bec7477376aadf0da844b1a15046bdfeda3802962d374852a9cd286843aaada8987a021e0795dd02f5ba67de59506df69f9bdcc17bb6d24398dd86f58d12df0693ec3f147353bfdebf8f4906ba6d8d676565099b0760cf80183b38c52976185981531935290909ccf3bf0175e5af98cd70a3aef36e2b712125e5bdfc88edd0d05eb5e9e4249597bff56b8a498c6e987bc2fdebd14df2bef8282d5ed8a285063942f116edc5a9cd8d3bc441c772903a0fb621c22bb4544739109a157671dca0d697b365be8feb97141605c4e655ecd04215377e55e158589ccccfdd25e47c981f77a71578e92d83b4acccd814c5196e769ccdfbeb84603410455f896c6f8189d38f94bad2209e9b2311ee93353963a68075a0ec26c7fa022c2ea28f28e3be33855b7508ce070ed60352fc8a0a8e73ee01562707e2de47340ba2922d049f34b580b4f3e518e2cd209b0f0dc2f4b5cb30613e5912c5b172f43d9a30bcde484f4aae1634f193c24978bee1a5e598e3fd7aed8a323897474d1b8fad6e4c0ed3fd09e1e157a3a6eb57097341297d66f15a082a2571a534b49eeb91a1478ad69240ea7ea748b4bf4aa644a804e63d6cf40af2efb7342fe04e02438953385e23377a450da1c7ff8a1cbd01aa97bd68d2bb36adfc5f5afedab9ceb25b84797b9ed30e96551393a84d77a7834dfab60f6c7cb3b7f3d9ea107ec53532889b4da893f2b7fac5bf271b7eca899524d5ffc1c63d0d00c150ee198ecae00c26ff6d505fec1ae10594b48891e6b482c197b6ca62b5c8e2bbbc841b67b205689c19cf7b1d06800f46b24484819f32511256ffaebbdfdf9555d16b4e258b1da317a7b576d182b8bd17f71b974f47a8edfb1e3d777f026a92876389092cba0271673889379333cda59c5d73b7ea8a09820eadb57925ec978703ee08dd15bd9d9369936677c1947fb2d1d058d1ea951950bcbcc76eb0228120aeca08af48d37e70811e04859b0cdbbc05ec0e93086f166494f025a3abc986f1264a1866ccfc4987a69c6965ba68b00cf14a51ba364e6e1689d2a6da0111c1c1321ce07c0064f5af68bd52ca932e60382a335acec014c4306cd914e4b27f416bf32ae10d2d38ea47c48fd04f81e1bde3e812d2e3f5d8ab41407dfb7fd996c734f071ba5d349254ef53879e9df23f114e52c12e2c42a8d30042598ab50c8403e1808f1c87c8c6ef2620ac2a39e7d2a47ca241d76afd5e53909caa007bc3c9b6589a055e06314a0c10df313ec8fe466f1cd6e098ef7483916bdb6a1270a7068f9f21c2cb6af2a7e89ae81c76f3233b718e47fc913af2257edf9e2507f050708d1d68af2544e29990ce6b958c189de51d64ea83d78877d85a69c247aa9b5ae75bcf7fd07398194f38b796917275f255c2d5422eaa576576dcb87b2c25f70b61c60b761d7fb32d4091e496ca52ac25c522c4c740cf290beb8dd4b23df494109b972a75ebbbfd6d3e43eeb37e4f66748515e5788c13a820e4f8f415908458eb33c5e744a75c03dc5481b0360348ff68dbe6a728ffb6bc2cd435bfcfda72d93275b1d29bd7129c98eeccfb519d66ea08fcf888f171fac8eb23c44bc0eb0110995fe4f0e6c2880771c8e8f2ddea6259be2451d5dd9cf0cbed984cb578b8b65411bf542a4db32af56d7765c590e21d7b88ee38b046d4c44ae939bce94d7814dbd17f75ea4ee681fb46a279072501b0b3bb14d8a83f2b32b842bbfa05185c02d49e526dae0dca29257a5dad292dd7590af2edc17854080ac0640203d3701c2b2bf0fac0c3c3e191cfae304e34609fc1f2426009c88f8a307dafaefbbc15b26d30ee3da55beb131ef50706eebbba773659717a84c3672bca220efe3056492308cb91297a04e2466e3772dc4793583b94e70bac847864b6d95d3b2d18884c827c91b4f69180a1bb1c4adadae7900b72df108745d2736f7d80c15ea86e8e6d6be9e9e931c3f64ddc673e6e2a1f3910b368b5c65a394099312d84760d9b08ef44207a3da47554676083074c9bb0fa0e877a64c901e9e24ac7935679881ff5dbe7df217b6e0fd0bb314ce875bce14c6840db61be1de1f95dcfa9302e28bf8c52611b2ed61ccb669535ac36a44ef695298f27aa044a43eb39e876cd8bd1dbf88332b1815a61599628e25314cc11df0aa26471fdf46cada7b10323170168f66396e0f22783244d3e472f3e9ede1260643354df79ccb5c0a3e5c0d41f4f648cad093c1c6b43bdf416ca59355304eb88576a4202c3e91cff044d26ff2fb2738ffdf7e212095cac6285721d6f201e0768ea19886aa4402013a911b8844dc3713e6e138c7036b93d0a342955bafe34cbffacb39f8139db97a8a357428fc90d1ffc63b789faed614023a164fe48afe1f7379a3fbc7d49445570c590575c304ba949a20d17e077319fb95896743d3252830d6126413251e73a029baf377f7f55569a4b8319df307812f3ee6b5a362ee4b1a7631c7026b8a69b30945cb7e165450babdbcdf6e61e394560d42f9a1ad6f8b41a7475437d552bc7cd8fefd674958988798b712f42bf306a220819e875859269bafd155aa81315f53263fa6c9841faddcebbca7176787357f2a718d08160579fe11d51c77354edbb71597dbc8142e148a8b377d1be5c96c3f9c856645b3b9d25ac6320fce57ba6156a22f73e7ac4474e96c733db6cd6a9702f9c096bee977b075c5c547fadb0878e35a098ca25357fc920f4e18537a48d57ed657eeeb6b3a65d282a9daaeeac672b9c665a261931e860d56a7b1d19c911f6bffff00b73fac32cf15d347275458ee2db719fa7400f09c5c6913738de0b7298c8a5d255222ea011834e6f914cdd9aaebe71b7996598b3c527679b2d96b2c4f8616b863336d99b47fe21f4ead8b8d4150631bfff1dd879ba636b6cf40b298c363288de69b420875c7607685f30e4f5864db8c4927398b0133105f5be344b65915a1b02814d9e1b6e61009353538656ef8557f1fd9fdb9b8b20fb47fa26be9c02fdb87f0c6839924952db91166139126ea0dfb7105c354084c24337271f879a9ae2e9b1a4e2c8e916b45520a5fbb5213bc0a07cae0f11769f37cde1f93a164a70a0a37f3ed1ce4c188bd1d385c493969138dfec9c30b0ebb266c33f1640b5769690f7deea259b98556b7f4bfa03038f8ad834b98ec538fbce07502d71920791d6a6b8033f76256adf717b433dadf75daeef93ed5fde963f0628a964442cc41911f473d07c7d6f44d36b4605ae20503d3a62692a136abe2c29db54e38bc7a75895654b22e0217e096df52a0ea7ad7822733a4074f479258b74c8220f10b22be009fbc5d80eb69ebd60ebc4f41826c4575c716b02734073e7e72618ad724a5f84e9650e5ef8ed3f46d0f41f65444d34529fdc46aa78a8b0b35eeac092549508079dbc2d60eda77ad4481279a2f44a671fb8edf965d12e60d12943747beeed7da164a83ec6c44e9a2edb80ad81a10ff781b1867f2596c3486bf17044a189818a7e11c7c76430a306b0ec5098ae5cd893c9e9d36543494f220d1418a037ab6b49f78c53186d2e11e799ea1e1c84baf5cc745bd6584c9250c55ed3463be9543d5f26e92c984d7ff6e48f3a50c278f3051d741cc5e4f8e078cbd5760cc60826a7071da924766b12e2b6b29a7a18e88a5c049c09472ef3b6e00523769c329488c97f9dace3acab4ee2bd1cb05f6bbb1081a22947d5dbe9ad519a4eba060220b21301c29f6c75c3741d28a75aa88ca27ef45ca9cd3a81a1fc071964d34b0645189962aef8d4f6bb7f05459df8390b94f288cbb2165cd67d9a2b7f8f87bb5c6aae3b16851c3ad2df3e97dcdc43f9798de767024d49a165468bdc32745ff864c2322250a877896d745ab21ee61dc077171c4c26d854536e14676b0bde43332ea851faf6ba25498047bff5718d524d0c2df93066c7604d1d449575e35f3b4a8677b5214edb1f55469a306669da86ab001bc28a1afbc49356e10291697175d9ccad32b8cf6824c9679bc05793ba32eeebaee8404cf94e2b8efc129d841f5c6fa5366d141d6cd835f82574113ec68e8123f329f4a66c23e639eb82b1e25403ae4013e8f84bf06ed7123ae021619aadcb8830dbd2df17dc58299e4e84deeadc664c852c55317fdf9b78e2102bac2efe4a5a021a67f4dd3ff96a6916a46de999ed5235ef483ea66c93618b8900ff64742a08be27c772741d0c2f85247080bf42922a0ad5e7a8c0e8c8fd25c9d076bf7ff3ec35e27de5092f3bc06523d6efc64e2f890a404665e8038a7869492202d21b0b7b021496e4a2bf21b0c10a16a8cd7bc18c89f284d9c055019c2550623cfabfb030a553ad01cc7e480f0527aba53294ad3f440ae77021b65532f385ac41706197bcd871cb7688ae38cba6300fdd0083281bdfec77f77ae008812a71ea55e863e2c2ee76ca8a2d8184cd5e42a8d3ea59b1fa0bb5cede9a8472741d46a6fdb9e143e3bae494ed13254b8de86f42465870816933c39341e6fb376e70c11e0fb7d06fa9359603759cc65f31006b58615fc0bc69b8f3ccb5c8d5cc78603f079fef417a9d257885471d27744daca4db5240c10102203bc8170172a44a83b1a99cc4cfb0ee34e33275df1f7ea3549dfda70e6344acd7a3845f905b001857e4cec9b180e63649c3d1e7684981a1060d2db1888ce929ec5767a45da8ff4bb29ac10525334971c7295d2b250061a5ff5b6e8e4fdcc9fe8595ef5494ba86e0e728318ebcfe7ce85bea334e474ab66bb3b7a1becc63d82998fe5a22de22de9b0103b8ce50bc05c5330dacbc2fd2712a96e9b829161aa3a13333eb4ad63694aa2eae60428c488db74b7adce374880c893c7c91e40bd5ae28a2e9835948fa11299c8b980074d87838a2b9911d87817ec356c373e2764b703887a688afaa3485f2a4ce343af7781b698ce256b238f7989101fd6b4690c7e12e0032741125dc91eeccf9e0a8d1209644339db5cc95576e78f6b98b7bb04071defcc40bfa6cee5a8d2aacc1da003982e210bed58b5e84ad0cc4b8c4ea65193a4957009da1c89f48571d29673d06def7654ba088d07d790e2abb403ee036c45bbd3b2b648176239abc6665376db7e3806fed85fffbc748066a4c403d6e61aaae3b79e71c2fe948b8593d0c1286afd8f201bffdfcf39f5ad7d39b4ffd16d68cc471a43c52a3cff11641a487cab5f164cb12687fee4f07d49e7a6d013fa7cfce583c100fa326e4b5d8f65892359ac7e5973517a0a4d7f275cd291297ffe4807353c7ae616fce365ee8aabb14b4ebf2090848fdec0cd7e430198a73e4ac84eeb3d73310a0de426d11e0ae38998e68c09289472cb12e4a7632974e19df5f98e703bdc1a9f91ab76761c5e59f1f8f5656a4c991d07e5437d8b3c4be0dfa9f81307aee02a30c4e91942f7f58516c386006c5d6d9c96adcd6ae139f0db145784d029c96ebefa78b811ae40c984838c0f9f18aa57b34afdb06ae0dfb8f97f3247ed51c34e84de9684cc8244fe7f6ca08e33ba147a31f3ba9202b26457222b7bd1a356a190739d7c37b4a28b5342a9d789e2a850e25330e3ba0d23e9575f45aab32e8ef9f099a59b26a8825a9626fb76db7f759a17422a1e1dcab330df87f9d568e911127417a01b531a0c34686ab8df11f5d5b28d6635d3b7f26f9ec8941da3d1dd9c298ce6072bf69f1490577a401629db47199c0e799ca021ff21bc973d382586ea1e23471028510c99b1e1a6b2b0725ae7af93db96f5275e6907f6fb3b89227cd13606fd81b44abc8898c5ae5c81c90f9d282d4f7c149aba2dd36e5b8f0254f4c8c2216859a9db01795355a8e69ec197b8ebb10c01e43e7f4951b52c03847fea48d780c373da7834a3c2207378a92d176268137fe850d9eb94f9f524b7132a9ac26ba0f369ce4d1e5bf7c705720f1cb063a5815e30e6d825bd10519409f8cc5aa38f1f1d7277f347fc8bf8e0f63b484cbf553b8495d528a78230d7b3c7468cff6d53a7bae49176da1efe5b807d4984f53b55f788a38c992db9310d4c1d864342a477de1ec806274403e40dc32ca0f5602e4b494eb80fbcf41286869ffad917995961eae09309360f3804e80288f572768c5090793e52181622a4b605d1e8799deee9fb80f5747af4dbf23f4ede95abaf34b33a3236a6a7e73024c78ab7a5624b733cf08dbb4bc624f8bf0985921b7eb1aa1002da25c59afeaed47b954cbb641b31fe6cf3c4bce1191e5ceced166a9c42283f3184c5d946b218df2c307224ae5580914510d2c40aa57e366895e4513601fa07f74e5164fd4d678e74b024e5da7f4226ccad38fcb2ac967fdf1eba5eb4915fff51bcb2cd0691ed6a04ecc5233e116b1c6653fd93a535a9f8bbd25def609f29e4015e9c7a41dbf1e34b242772d1878062edad500c3b962f768312188db284192d2c5e17c858c79a51689fc5c25f4e39d2663b8dfca3437ed4726b495bfba2510ee7ef747079a057e00c33aeaf4da74704048e16ba8577ae0c3244cc247415ab2dcba4d409af677341ab559ebe896de3ab8c6530d63c2619f9b339b0f83fbc31056a97eb06f17694c242a3388aa202978f9bf2d358f4ece568993e0931116a138096b47c5f0c67abb33a012a3b96362fbc62b25c1df839db951b995a7f2f432579dd3dbc546ef7a14ed49bc74f97b618b06d639643bc2e10d0d9f8a267873040a6ba79c62b6a2c3130ebc2ee2f74f33e30038c3bf8334f316b5abcbbbddd0f97f99676a014d430779adeb25557b670f0ab3b0ee906c2cfbd03c8eb818d44442faa7f5479a5d80db335f5b5e22274c557d1d4b823cd3a26564318174bbb807f44a93591d7617815711b780a02e7ce3fc7b4772db882a5c8065bf88aad3e9c47e708e5bba30d364f32851f10a5b0ba2e5bfcc2f3791f16e2406f6f1f91c1585eae21fc2e1773e05b7fbc0609f0a79449ef05d850ba4020e8377ce3b64332094e13e41a513432dedf984974126f2df88c42fa9a494afb790ef4cc84fdac5237649d1fdba796356d9c48a243d0272e25b26efaf133dddb7b85b10894edc4c1d2c0348e5d5297c10a26fc87c4c735ec83f2db2645e87fbfb7048d1f44b51acd7ea4bce77711351634292a56eb2d7b2eeee8cd306e8502ffbdf7263c3e230625414c21f62a1cefe8edac2ec7c244b7ffd6bc217cf051aa9dd7b6f03d08035aa59efadf2cdb022e1746a81b3a225417e440fe86cd13a17d8b470cb67ed3fa87421ae9a5ba379ff6b7bd7dd7ad8635958816081724775a13827a50a64a94206f5eec2108aba343b9d4d83593f11e0eea835c4eb6474b5729920cfb9c445bbf71813c435eadd19756d04ea399663394deb6377f9a475250f0f911281ccb6fab7ce52efcd8e8d3eb230544736b882ceab4a29180bfd720738f16d4533818d09b420690de69977d79a393f0cdff6ca0b8e0dc370613ce31bee4942c5bae583153576f0c1788a63ad8ec0654e714d94a4a6e36db4534f173d46839ce3afdd4bdf553eaf6d81e61539b1d2902db8a234dbbd18eeb7e22c79f0497338568dcf5610b8d62319ccd1e254b1e6875a75dbd4d85208236f6dc56c911f702cb5dcd359911ae2eba6da53df0f933c8ce9b00749342a655415f39ab09fb5daeb15f6f9b9c6949160b88a7638ac245711e39ab0f6324f7fa98c1ef3315b5b41ec5c031573753417aeba30e81d07f7749468e859863eb1fa6e58e234c6df863c42ebcda795910a2dc95be08bfe3bf9442cb4b6077fccd0262af57aa564a02ae41e80984231789d41eaa6562c58aeda1b2e855b3c0d7d19d8a66fdff54c158b4f333eb9ccd52ec6250185dfafff6e59d8ce59acc9d2c315cd275e47976f50109c45604414fbef62ec3b5f67e8156fa18c4d88ce260537f05d0fe89400a8d475b74db9389c0f6c49c348bdfab4046b8cbdf7be4035d1b0b8bc6a9f3072679d6bd471b017f15cb848e5c6d6a9d4cbcdceaab40121a25fa6000f2e7c685ab6927c1c35d5895b0af351fe4ffb4face9a62cf71cf3072b22e97e1c418ccfa0a7681658d0ffefa42ca9630c7e4fd8b5a59b691929919cd6c080e61dcfda6ad29a9a804b09a7296f12f06a33cbf5ee7e879ce9454e86ebf96439d5677a8fb47ee606063bde7b8e4ad1d122dc4948ced6363221c1adf9830a1678d012413b1abecd6970e857e5462feba55253fb66f1e6891e31ecbb3ca56564bc0817e81dec1e3725db09450e4c25e3248d146aca5a836a6f24f3e7b058deaa54ce99ead81dbc2e549a3bfd1cf7f243d60267290337f264dce0c230a87c7d053bbfbf8770d55f8db65448b9bce11f9b05935f08638d35f343158e6703255d1ada45921320c124db6e6d3bc12fec2aeef9c0e8c1c5654167c85576e605bb94333a3892e0b6e9c36e8f15705232adff2adb85a7fc5343f2d38af0550aa7c9f046804a74a08a773537712bcf1e751141a67ba7cff413cd94dc668be76af82078a8e3ad9f27c0e232a40cc250280940cb0d5cac388134a71cbe0d1dcd74e54cc38b63910c3b214c022b76e71bf681c52b5ad0b88ff0df117a3d08a24ca950f4ba0e755a64abe6bf97674df6a61dd0be34c1a106444e5890cf301c83da91076331400d63e2e54e60bd542b273f6c617ec320d2b9a60d0a159767944ca4e29ec7d7d4820de942188239681d94ef75c0f7364ec6366f32ab13693f3230fe062e3258e84025e55a9d269d0fdf66de5ea21726569d0581cc89849b8fc75c00a09e966a2197ee5deee0019d360ff7878df05694e253056ec8d8fd705f8f2f7dfeeacef84391d94be3cc0dccf889d25ee5d85a05afb893c95722c64a30263b8f3b954c517da9bae15851a2b71f3fafe2dd0f333e8c465825abd9b7e0fb8957a67b315fe1469915a552b2ba0a720e4741c535c3a919f23e1ea942eafc58af034d288e525436bf694a98104158fc79e8d0ccab6df7729c31f82c0b872658e00fbbea3a6b6d3f1049b7df0fb842b011388d449082cca27da8fb14b053649ec7ab2046b98dd40acdf9c5889484026794136f5641d6e7e5f63c1dfb0ccb3bc3e5ed1a5fa7fd69d76b75cb9aaba9dff7d5ec87e3877d774aab178701de7e2b7004e3d075d76caf3f8dd96da4950a354fd828c0c77dfae33c166556635a9e7c7964ec161cb9c41e6a6d31f89217ab76bc4804148bb0af6345d0f08e44b1279dd5194845fe19fb5450bdb5806c50ab43f6acb9e98c8582f694558814e5bee6e0a32533e4532b032fb0d81b7b16f152cb4c6b080beeba1ddda7dca79f274e3056e1c94720de8ee6d52773e6611cb3798d7187445cb66dc7b43d8f80e0c16ada14420297c3215c8e85c827497af43d321f642bb4e19d55c5c4a2c38a993f2e532d083b7bd0587840734af73a771f0fe04f191de63334c1aac8ac5dabaa2506a0b3155546ba10bf235b88fb057c4b47edda22bcad05c717b8e538ef78fe501aa831a0e01253801dea90259ef7f316e8d07d5aacb8a0b957c024d85e202690bc8650ca4d78ada27639fded91292f8340ba8f5f119dc4df4a43ed1717c0aab9b22dbd96acde2d43ea7a22396f85ad0cc8091afbf0f9c1e95ece8c8d4068031141cbc45f72055a1c7baf35dc955c55c4fe670f506ec09fd81fee5e684c632b84e035aa6d6c0fcc4c2b7b367720266ca9d5c953752adf57d7f78be953e097f31cee14da9054408efbd8cc908a4e65e750a74456248c8c8fc77541d340e9c8dfd919c3f0aef4c2e3ffea3b0b6e504f14aa0ffcb5da732078f5c1334d96bcf3b3e86a37f3b3e47c240975ff328ccb74d6e464580f78e8a746b1a616eaf0b2e0febdf200b0d5a32d491f65f515d088641f47b4eb65f9cf9c19d0b8c92eaa88ebd1966b3a437af246de868ccaa28dff20aef541f9f29d0f39482c71fe3b56b0bfb61f52b0832a5859e7789566e202d193ea9f5b6a722938976211e2349f9948baf38b4c676a230edef789a30eed790043e1f6d1aed0f00452c91f93820866d2df311bfce1244b5eb3ed45dd3fd9ceb00f4cc0970cf06b5e05375e249fea5b03e1923f8422b26d192157b3225b52cbbc57cc6c8eb3397add2ea87e5b5a45ba96ad3b282c80db4eea144a0278b420bc4127d8038e46dad3fdafb1e8fbecdde6f4a6c84a11e50beafaf59b3200944c9d4885058b8c182e73fd0707f69337811ed8e14f498c8c073b605fdf9765fbc5708340c665ba39c59c5197051aed51af81a48cccf168c1f84e998631131ff3de2d692ba34479519666e2fd42b4ceec10994168a0cd173b875cb51511bed12d733b401e9e2b79ccb8a31947cfc3d2c904c73f54600757fa7e22d7eb0abf007d031f571fc9314840f61216d961375267a1a3fa6a6b3df7d527f077f47df82e1b74d7eca9d7b9e611edb8744838ab40be9483427bbe476c56cf88e58b968c071a109c52e534c5c70f0e80f84d7852735011a35f3cb99400cd65daa5476a01acae99395ec6f95b91a868b78d8cef8c0249c1c687cb81ac1993071212ae4e275acfdb897ed56e275ba6219f495cb321a24dfa80cd13a61f41d3bfcd4134f0df265e41686ffb18995dd47b3d6649a8f73b82728cca3b739f6798314c2f202a50e01127a637f37553d9d081ecbf79f8023c0450426ab19614a0d69e848060e8203c4659221c014524339a0cdd4cf8e3464cb46c95d67a0fdcc1cc914468924c8f64a5aa1b34d7cb4732b64aa884ea5c8b0ed00ec0f5a7a05c3eb4b326df938530ee39c1d62072f155593bc66c8a74ab22d30fda33b08f742e6aab117c25a750e4c080532383454522a54be74e5237a198e488d1b6b2c3f70a68cb2ae616b29273a4c73e7b3edf3586b950da84efb39caa202cfa42911cd9f2aac20bf78c66268aca6fe889f3410c93cc1b1b9958c66d120b97379d7f564994d2a2b9a732c166a66854418f831ee8d6f0ac7a086074f2be79b1986d818febf7dc9f0af81f3918f741545c877a919f194f19a804f74c6e1a895c9ffb2653b0741b4df9217e5b1b7e7df4caee279221badee5065493819d2afb38aabd1661b77b12fca1f98b62616a51305e9032a12bda280941e2a15950c1668768b390100e39c0ac57e82da0edc287d61bb0de85b07d8d529a685ca9610cc59e96b0caa657aac17a76a96e1c6cb3c2c295c8bab965383fd7883665ca7b3ae1662fc98148f607b00f867bc6ac456766e8827e5b15320d999411b136eab2237cc47a85bc3a7f0cee6b32df904a4e6c5dfe55aa0e9482631f07f0c95a1300abe8e2513446aef1916d3dc4f9c4cd1a1d26f4736c3a902904415df0f0b400f99c973065b126a8288401cf23b7f497f8fde3651607cd82aeff7f2f08839a86c3bbb048f3cee8cd9ad68ade7bc19b465819bf01d80cb22df66047d1af9f92a7012c4236d8ee8ced6c2543c29c8b036e2532ec5200a567995c12901cf6298269e666ac53b384bb95cbda13ca695f13a7a138f110da937380c5b53217fddd820803f8209654ba256ac01e841674548c05bac16d4c964ca3648496defeb93e605362d28b7bdefb8003a289c05d6e395b60428bbc3de44ba489eb5155bf3dd74190c45a5e5ca84ff0ce49cc35eaabd5caf70ddb5602c8e00cc35cc968aa3db1ae74854edb10dc2931b7206bacb98384a790645488c4bc5f707c16deac5385e278f26d353a261d831da735b6a3e842ce3792f9714016df08d28adce210bc175075c5f412a331d2060ffdcee53b3370e9328a1e9bfbd0119cf8d93ee49e975ec50d11125cd9e4ad3a955526b9541d5b1b75bebef34af428e1124267c0652ebd239e4872cf3772b79b2a4c0521f5896a3224c5a8e5d85e1f8cff30c617fbe8073ff7e4b4751c1273b48c686bde5c789103b346f9b3a40f7df079d44231d32826e1bdf494db74648a8a3dfbb207d19a4906824965d46aae486ad31ad9755d4ef6026a436dc5b956275f98c096ecfe918c8a4d8e8501c55189f3c05030274d148fdc96f6739c26418e092770fdbc5d66274e176aff671869243f6964450018311a74f159d0fa2f08bfe47e4c9e3b8a133f2e6672eb1b77c07d7d1847a4d30684fcec4f0f5771726c7377f1cbd8cfe1b1acd5e666f367db4018eaa1d44ea7bd896b40047ab8c29fb5b0836d48d4e2d13454738456ec5fe4da8c67dfc6c5811e946658327e7b65acd846b4f80ae0f3f06bcfeaa2fa0ccc5c999757da7819f1ad78c37db9f116d041cd50352245e6594041f29967b2a5c19d899db79fe684a0eed1e3e591038c5a341eb5a6a29352ec1e7df2010e32d2c9e942555e330a6cc9a59714ca34b5d717a7c9ce8d12b0c009fa00a6f362e05a32f2f1623bf47e262fec346649a10d115b2dcc44c1a97b46c917bb30f8dbc6c667b79277b9e1a1132ff2c43418f41f2bb9a765885c43f5ad15bd60253f8b352e0ee526994ad66749c490f6c49d5941a5e6eee78de898a48bff6b0e15cd68c8513fc5ba3c87107f5e7919c8b6798c94661b3f08e3f5c0dc0c53f405c42152745aa32656d211586690bbc3af5a233a221dde5dae492abed4a42ababeab442cf212514927a4e22b80c2cc281dba8b392677ebf3c419e3346d8507e75c51bf62825a954e56b4e75479859f494d9eed27af4014c347c0b44691b44de90cbb550f790d0ffec327eec182999603aec8d03afcf49c6dd92cb647703dbeec45374ee39ee8de9b77a320b77caa6639327e5e99a6079b9c3f3e0316bf486dd19de2d90482fabef2c8ce043d7bb705ae439a56e609a06623bf27bc89529d836bab1de94d8dee3d9f3ea28fa0c561bd6c0d0b83b1846631887fdd5ce21f50004072bf2f77577110257c9b22b747d6ed1f29c92d14cb99b71fd7f12141593d216fd672e46eaf1bc0f199076a715c7e49682b9a9168ed5620919c9e74fdb3166924de5ffcf00ab63f0560f598b8ba12b763f46f6359712d659530572962f491e0b6f41a4563e0f4275c8c143a05be8c8aab6a5de8fe1054f5552b5dd1c1be4e0f6f1449f87a991713d02dcf3132c2f00491fec52c1be69e2254f0db80c0c404c4cd2782d1cbc27df01967b41c0b4a1b436f74a8df1ae69186877bcfbb33216044642efda11a9e2a0058c80d5558efbefba995c269e89855eba0cd532fa8b794ecec9fb721a325161563b7eb0efaafcf7c3fdccad835b6bf6f766fd33a9d8bd1c4d60a6e87c91369b50115f80ed8f76297aac758cb2930ba7a76343d5256a77e30acada285baa1f8aa1241430519489c98d7d6013075774ce6b4b50df1345cbf552841776ea7cadc1829680a0ea8f146d6688b21e775e12075a2f69e49c95f2985468b3dfe16ee77565e577dc8902bee8a4889cefc8ba7e05fb9e365899157b7d7d1faf4f049cb374d81fc44df517e2c3fc1c8bebef2d3bd9930ddfce1205e125880cd62f2efebd76714b57187d6a91e4bb745d93e17a6772656d63652585748f32951f81e2e0879f75e9a23d8fd1c8b366955b449938e8a5e7d6f59ce79544cd0c08b67ecc432cc96cd2c08c8a3287977ae7cdf5b853afce01b1880fe1c3ff510dead8fed97fc686dcd923c58c9b4522c552689a20dfd488993d2c41cda04a7cd02957470954513924de354a2570264aa0be1adb17f75b532d95a9cf99ebb7ab54f0c9b4fed2d8f1b3a8f30a245ce9d5a44aa525bbf0e6ca5226dd098dca959f1a03861705aed14356b118b413118c375b82ff4aaa74a442f9b9f962d1c36cf7b201b476d046d249bfb933666a4b62c98245b3fd759c5a4203660c9cbb0802d202001221667ffd348b3990d9c9e85fd7840ebc92cb282860dc1bd7a405ef29c67e72a9ee1fc18a79e709bcb977af0f0834a7cb4fdc8072f9d5c0721b9aef73d81ee0d0800fc401b6cc75ecb49957b9f876408d7f9ca5324bbead8735623492a6cd62e0593cae47e9dd97eee04eb1e783a0cc9a2950562aca366c0c81fd071cf2db545a172039ba7fdd20147ad05d609bac528a0e486c196909fac6d37ebb2a0d8c89e4fada5cf9193d851df7fca2465474d4e9820394b4f974e4a71ef69fcbc04681c2d1aa391dde48af63245bb5b7a897ed6c99e9a3b4c573b7ddb5f7d4516a0b01b363f1ab92aa6c7aa459adbb1b62cd511fdb9c9badf1bf5298beb4b5210eb344c7b0e89fe378e1c5aff6ff36e1c148162d50722114e17ffda7f76c40e5158c1a443b9f4ff97b422666798f1c668da7bd6062bcd98197dd1d81599c5c367481ebdfc26dd7d0b13be204ef2f221dd530bf5226f3ca82fba209d118bf6c0e568028f8934daa0c1f49e1ec6b27330a43cc63507b848851a3a040b14fbc9c3e7185e19a25369b30f0c18c0b77aa9d501738c021f208e9f89cccbd94b62af0380a0c34b1e20b49d9947d8d22118cdbe1fcccbd3e5795e17941ab4be917c44a85ad1c6bde52eb8dd9ec79b8d7dc66c07fcdd62c977de6eb7eb3d0ff83aa7c4a97c99d99771a5824b476bda371dc143de3ea0333aeb5223daae9ff4d1353ca707e567c0cc3960a8aba725c6b45822b8bbe559f6c5126513279f6bc32beff20b709542d744b239b713afc9ce199e181356658d7f71da7439009d163fa63bd6d4b06cd18d91e4520aaa43b9afa86d702baf0ea07ffac0b8343cd0c4165df79f700951b5976c16c054f9e615b2f8ea3baa189de5d1f2a4451ad02b5cfda86528dc06cbb6226c55fe4a5bc16906abf1e6fc8d1a0df3ef9dfe325d8fc809efc502ee3ca6cfdb009be17bf122622215f0eaa2171082f371fdf940bd48319e038aec777c01df5b68dcdde61d5e3ee6caafde9b4e59fbe6aa45645938ae4d572380279bcc1b562e90283559149f13f2c299fcbd188416ce9fbab44109c5b4538429e467da7a0abcca9ff88c8cd8ddf77b6c0d0be57c8c4cc17c4f5b48d31bd7e2beb4a1f2b54559a14ffafe7e69e2a6072b998cc3eb1a891d7ebecfe58f2ed492f48cc8f1736c8b77fbd569a1a2840d8dfb76f88fa4280f79f635ae3fa051d2a4e1f135b12f67a02f797191171b1121b0b7442705525c511dac314a9759983b0c801a892e45f42cb98462b9d75c4e0b30875ba9de8e1c6ff0a818a5fd7859131dec82c6096f03fe9576032ec34c8a539f24d2382c2df625c095a2f0043b4b5d2fc978034e14e618d0316a6f4490133cc309f0a55f854c87ccf08b6bb2eca59002e703426884cbb4f35aba7a58e4748bcc89f8bd5fa56fedde25743521290283bec96fe933cca91d474b78205bb952f04304d5e57160da362a0df04dbca469ed1ce7eb38f7373417c9fb3c1e28256bf36293d148057fdbf758ea9556e5c4c61e244c3e0ab7a89e72498b0286201d1cccb0c3bb93d612fb875727572faeea8dd0519a04883e8fcdbb412d5e33bef5f8096f9ab19d382cea041b33ebe73847f6d96f71989be1c2521df425f63fb22342968046cb08334d091fb34d2078baeae1d5a7a4b896991125346bfa0abd94fc45e8c2541169e57876b5922a9249d26f801d4f94608746a7f0f19ced4bce979efc921c6078858c0ed8d0d4c63fa27496586971b06e1e0596a62c832759d8b70045082109e93a2e97f05a0f92d6fd62e7c0a8b20c1dfd73b9c2fbb412aeabd0b9e4a4b2a30c6c95b0a080781cf2ad5decf15f347fa5d8a19315cc57a26e423ad304b0a8b84fd521b016c45b17680f9098aa8285a4fb11425c6e5b5777a91eff7e9946e141aa546d8cadf596b9a7fd8090f1fb8de1eef9e549d1e7d34daeed05ec360554b7ce02e05e1954a36b047ea46203782c21534fc956c8d9e89ac7cdbd099d00df76d61136d3593195af796a2326df4ebbb222364c905c53785b75e12aa35e971410bd7c6665cb3f9b9a5f887893567e13775414487975c97b0342075d8078b437d2fa81c635fd4834e96ada8069a909c92be9ff3ab78463ef567f86ce44cc081e39b00e3061fa64d3e108006b1e81cc80e07ba52480e5061c62b731a607b3f75bd8e0b6e646999b79eb007901f60b4e962574446facc40c8d07fda2b39588f13161dd9a4a1db8173297715d02e9258a4df7bdda09be984d0169f4ecf27c427226f414eb180346377ad6e5dda572ba48fae3f4799b0be333d49d3f53a296c20142e2c4bd84aaf2b1bba9dd5bcc1186b8f34eb5b981c5783a48eed6d7bf426f591d83a8560cb37230a04d95e5fa6e26222a273025544bfb915f8f788c82a345da8aac2139da96bf2cffff296848556aad99aa1f71e679e9c6b03713171cb0dce0210c651d2885c50b67028f04b95870e109ef2e19bd70ad2468f6b3aaced0b4b6ffaf23e83e73573d86e050ffcbc387dfd228c7e0e6938ef4bd983ebc238cfc32042d541cb2d2b6db35c793a92ee1453d5ae5fa5e97e1587114a103985c55b7d741ba9b45654703d41da689e9145288e609eebc681bdf64dd65a39a4cdbbe1d75a4ca1833f30c6a549860cc1beb5bbe84a4f6b9b269d862bea1f3df6e3f28a0d897596ba33237af096bc450ea0890b769896e0e711deffbbd45095382d8b65d9a18519cda7f663d9b22d4a0823c26d70beec712fc29ec0a2bf90864b97ea1a1ade5b1b9573a35e050049806c4fce938978fa84b35d95d938a83ce0fa1d9eba791aee3d37b4322e1a850184d708e982b7dec403fc26c701e481dcc2c78a3e4798b56827e1fc445254a49595aee5f1a35166ba560221702c01132396bb18f468eddc1443a023581149868c286d4e59e5ead1e72fd3fc00341f5b9f8ff6aaa9221e8267b9f4e59769c580c57ed5fa58eac7966ee380c3bd18107caf79b356979d6db469c7301a6a3847349f72a516d06c8814297a56311269f4b3c2505e64ecb7a589561574b722c3f59278bf226ef79cbe0cdfc53c66a95d304f153c45d52ad0c5e953152f607a47ab86afdf90fdc77d221abcc22b3f089b683c8837f7becde6b3b3658e7970fdacaf831dcc8122832167ceb630a9e56a89cd3e52d6d316a1568fd19234aa7640b8c42f4e1e19b81a6d270924ed28f3070b9e4978897bc6a3981132a35a6ae0f04dbdb3dff1ca9d95a944a19d9f95f7359746f3b8fdd287e96f9e4b52afa92a90f16353c2c45f26425c2b640357d0c860e3c00221616aefad1d4a625fe9d332ef9af1fe77d210de573347ca8261294af61df8bafbad3a3e1043ce8da271912b33e0e79b5af38258fb2a38c8eff3b92a06d43c1bdce915004e1c83763ddc36c839bff3bdfe19fe09a1205b803c5c95e3ee0c45c7a6fffa973565bde93db6c29e491c8a01e66a2680c2645daf155875e2e08139ad7f5d6930b5cf0cc2ffb0d76ac336ec0ac90275ec956b36958223fc55695942e748707333636f07275ba71c898882f311ed82183d6c292840a276618e3795018305fb1ae5af38ceef114fbbdbe017cbbd0170f81b598aa7aa5f2e7a5468ff9c69de234ade78206c86edfe36e20a1c7a9d4942988706e68f824595165a084c3182be925a53f5c5cb57eb1cdd266a20da5b4e1d9e27e8355d11e86e44b15c5d6b782045f869412082fc70701b73ca301be9d4850b7119959c88a1f5de50d632f166986237d19e6de12594f046c8c356d2ddec5ea1b84a4e2f5e89917ccef457a36f9d35776978f35a38c364f996a860b9bcfa9f3a4a7c4f2aca9b0670a6af9480991d0826f743d2583f01cfd764593038117776a3c35b24f8c75ce7750c4a468f83f6a9d0293e64caa719fc3bbbb0f40576d7ac19e53b8fc2e078b3953d59308533346d2c20882b2ccca602f26c4c276718f562b9f66bced407b10dce4e2f32d98b2a674a880ee85be23a99c055f42542e0091e50adbcb2ca17e143d4bb40a8fb0468d9d2205624e553e35197091634c87ee464a8ee488d428087edcc1973984f99b8835c989e37177c634ac36f64cad3ce10d791a4c9a36b7af0b4066726c49ccf0d05de9beb7641c93abce55217339be49ebe1c2191b681982b536900af98236cf27be0383e897f105438b107429527c3ec1a7c051c330a2a6798b9985d1be83c46caefde5a949965b43c0375fc66cf7547bccf51039f3d4035977baf1efc94c4189a83839630586fb962de9fc967a555f38e8ab60b1f30bf6e098fbbf825033dde144850ea794a9535fa0efdee91f310d3fc884656ce5fff3691e7170704c380d393766f0574b26494c3208bcfdd2a76a612e6f42148871972512f1a21d38f94a227e4114de85131364162dbccce77f728ca6ee5aa594d0d70f4bf087170ff9d5ddbe69d21956b6f66928cfe03f81c7e2265c74945b2f5bd300aacb3a994beccf506af4951c49dee7d418fe53857cdff752e582a543bcbf4ad3bbf320ed889ab3dd8a55d19fec7211b35f579617ba50d97eecf1992b19b221f1b8331c81d8b6b09286e73397a2e33c6c33255499a511e8c7d5b8ab778d450fcb723ca96ef8e6ec4d579d13de82ccddfb3c5b8949074cb697d8b9101844b807cf3eece6a86f41902d163ed5b4c7bc891ae66dfeb84ac9ccece7ead5c252b386be92adb9173b47aa6d5f274d98324513784ab40ed1cb18c98f68285aec757a7b6fb132f1ca9683c85d4e8c95b277ab20bc96baf193184d5f8112d007358893b7a34125ea6d536e600e0f7e07302d94a7ae74d25c89c258f34ddbcd199a52e3d9449318b5b8521b4493c259be54e8ea1c85bcc3a449766815e7ae2369cf260407da4308d11a8ec7aa2d2693e3de2f92b104e09ac969f8656acdcfeb0d5ef6b61308624e6e5fc2cf29ef58dbc9db9751dec790cfb5198c79224a1abafd8cb04d341e8155b8dd37178c2df6ee9b1c4e29b0fab839677c8571dbeb445d0137651eac4fec3ce912f870cc1531d9dc6e266ece70220b267470c56e707a6e50f8ac07f9f69fa2d547de00655a9bc56d2b41e58e09c1d3ee0a7e4320d69ea4b411257e9426179d19865c5927e63c8a7c4cab7315ce77f2dbe48fd261a5aeacf3a566484d91b526afd843ec2cd8391277622608bbad81e8350b048b240b0929281f769a7e996aeb5127a613176422de33e7a6b5ef341a023708564a1da5834c2d792a0547f72e5220981d6a3c3d318c90ffd1cec1a6d0c3f186a582309634889c17a376a5ecaeb3b4b9957ea290fc9866acecd0557572cfec24e8d10e6db07324318afde4fc0d10fbd63ea70f5d5164d0c7a29936ba99f126d4c1d74d55603e24f5c390b4f188ceeffd73cf1a7167b91fd3075adc23c59d16e607a26b700ed806e485e40a11acfeadb50c57a8cb4275934dcce780944a1afd830ef6c41fc977dd765e9b26d64b85feff8bd1271b2a6c327d58c3c876194ed9ba60708bb4d8c8f9c689111818139fef0f2bc29224a80fa1e678ac1715a68ef65136d4d2fe0de2d05d50501e9cfbadd6776fa0a60cfbb5ad8fc6aa2ecd76c70a00a84c3e172b5d64badbd93d6497dca445e1e92f163a300b37410f08af40427b40dd921e5e28fa4c7c926722555cc0c4f8a05f1bc746f418c9c53662655ebd3b22ace4e60e93192e77c4f3a850d01512db17f42dc484cd7a89c364666ccc5438b6ed9d1e9dfff88c38317cbd79a6c6d242e8b84c81c7ef577d3fd7b2cd9d953b71129beb033fa067b08df72ab3d5b66480accabc579f30df38de1f3f54fdd628d25836fcbea9203c7feb46a242dc620d775ccb2c87f69398bc8f5f6551324aea2c92e9d3396e8f690e556dd6dfd8bd74955708dcf2e36c350fd7143331b726cbbcb29296a9d8a2ccc04248d8e331c52a6d2b6bde7371ca1d3733bd3f45cbf5241d0d015f361f51162fa79e18c033ed04d2f66b1259cddfd515a3ef1bf8c46628c13317df1e6e04b3d583a9c2e286ede5fc60cc315ed98433ca9c50a8ff0dea24aa32d6cbd71d898ce8ff09c90034597106f38e5860f64dddee1ffcff347bd80bc3c9932c1e2fc5d7aaea9d49c22d93e0ce2a1bd69b96cf46e53e91d7e8ce20437d904f491a0aa601b9bcaa272d9cbb759665a71de18f6e6d40e49f143844d3e801517c983ab4296470cf078f8dbd89d309d46bb16737474508047d869bfbb752d37eac6e17262427fbe7ae2515cd9d57257536d90680ea8cd6812843c81061e5aef9a3af6d007f281e208bde22ace94a8840226a416a7921affaaa210ff08f64703a0d57c3dd74a0070082540988a7c179e3a7a9d9875e1213fbbb9d8b7d8cf9f11489fe6abf9e44c0f754a7ca6c0591642d4959be1da8845852f717ed457f2f98efa4e65c13d861820c77c578f4c2904073fb4c63c1ac41fef4956976e21afb2425dd37f0d561e631bb95b46d95ad0a1e5549b88f81accc17920713457ab91e654122558daefc602eaaf213a8dfc8bae7813d9714b56a7579bad5ab7203953b0b237687fa1bf82b76b9b5ad23bf17910edf3ec5d3b541fac55c5bc58be8aeb33d1932ff3b3306edb77dcc0740906fdbe1ceb787d6b1d2334408623bd45a9bdd3cb5298ae2b9db6d773a6bd664781b0993fb4f62224e3d73ba8cdc6998c0b9c650b3cf7bf6ac390e89bd26bcc161d2b356a32cbeb23542067e4723ff3fc307c4ffa170ae50ba18df4f11c9c40571f4fe871df77a0650c76819648bdd6adb5073a995aa5a28c06274bb2eb8dbeee174676ebaa6aceff8cd7f93fecdd4030fefe48e7066e5cf444b9f8e9d343062b46083b8ebdf9e78e51639334f3d25ba210690580052a3bc24ab7e9e27c5921258d8ca807f897b173c2f1a316ed9add2b53ef0ad2b63e4dcbf31dfab6362475c90d8b0d7f7e9b6e99d8f8d0b935f1cd8d74515933893a6454933f8f8c98732d81a65d030e11f705cd02c65d38f4d75c161ee1a3eefc01bcda018136ad50895d4a77c65b51a11e7c93b3f644a3848147f573861ccea6f680837779c08b7e91bd7a383612ef688d3c7bdef93e84cd9b6a10df5e19c9f9646d94a3a2cc40dd7eb19e3fc46b0def833f15734f3fd6fbe18193f925870284362c8152dd249dfd50694d857cb6c0ed41defc82bfa5e5ae1401f034b93189190b4f5d25f816071f7461ff2525439c2629e8e82ab51a67b72d39a9a0e3afc6ba219f4c51f52048b723fd1e679a2de6a3a989f26af3006bb08203095d8735c654c847698b0daef8a8d32d0e52889830a0aa45ef0f800a459e1657f8c8893e8d2f52f1a8e6fcb74f0f18b5b602db56beb73b7757148c41a96de4d6768f49f26d5b98fd62805d01ec91893d4aa6b38bdfeb7bf2f400bb8bc1af8efca5f528d01e5f35b2edde20edd6d17bcc04e9caedec44616ce6857b31925511639c6352f2ec0cbdd1a336dd2b51f63e00b02727e2a45c27f8448cc7528eb9bf298f499838578129ef083818619685b5d794c668488a5a204aab16dd3d4d8568032e9e8633fbb54fa1ef75d348bdc840fb13aa71c1dd6cb6389cfd1245d1a0105fd7522c82dcf97b0648f0350c443f66a8e918db29d6c1fc21a4b8d55f8ed9acded40b3ce2e1c6dccd543d133622e27d8458ff194d735f91ae127ca13466937f254115f4c0337f61b209df06fe61ac94aa50d580945309e8f51090700f092b5a9b9d4a31c8c5f545eafb4c1299149fc65bd41bc050a142986fc5071e57897fb183b86099f02da37bdb62f032a9b17e16a97e25822d7f28fd0a5a6058ae253a7ada10442592d1d5a74feacca397da4675e20c716c1b71846175b033098b38d19d3d4ff4f383085a3bb5aef8ff2e9ea36f01001cc70886632851b0a950aee745ead938db6f2874b1c60d1ae383c4a8fd9f256946b651dc9d6c103d4cb9f0c875d9ddebd0e25b63d46820ce68cdda6b4a2c21c7c40d328959fde306c943c5bb0e65f7f5bcc09da2109d9b823295e237feed784db467f8f6bf5f97674066d9466471e6550e81a441059929b25f52703e45f0d1e26ffa8e928ad27385a74b82e7b9e23008e50eed8eee9aeb8c136b3be3807b0903ed2040ec37a48003273047a8a558d6eb328d0064df0c41c8a1fc5f30145ae0390743d3ace78f45a388d39f3aaca20135fee56f7e7716dc6adf89206259a7c31256b41cb619b4ddbd2370614f7d5f175d1e3f998bd7c06c3d9e10d21e2a9a90d8f7792cb020f574dcf5552425aa3604068d1bbbd910bca059e70f59b7d1a80b467a48163ef3666e7692b1abbf9c62c83632e6628b2a986564ee7c505565ae600739d52be15a1e8176b79e3e4b4ba86870b9a16576c582dd1f6c25085d39781d7cbdbd7828865af70b62f66859e971f453fdd85013984768db2645ed21daed50557993950b76f61d666a9d088759ecc5d3955465448997c01cc755e0f5f1f92c5b44b6e111d7598b44b73d28cffd2b24001f87d605b4ea4132cdd90cdc941c44592531c683820212ba22ea6ef1dd6ea5be0a8b04d28c34d6282306fb70fe2957761dead75e813d2eda888e9d4cdfa275b029bda90f0f8c6b1e763bcf9d561edd5602549252990fdec2a1aedca5ef3d7112c5383e682967c4881a637957446991ae0fcc618393daaf517fdb3c4c9a3b5e548ad2c992f1702260e863f0905364f2368fd2b937bd3221f99ba1c4be03f44855c264199296dbcc9d22eeccc765eabf01dae9cc9a3bd9eef352ddb2c98507d06866e2e2aaf9be0ff5f308c14294e4e1119890fc3566b9c2f9abda8eda7b5eace15c35138ecd504c60bb6cc24e1461c4aba7119fef2e693e5d0d78ae374ba50983daa8880470f793ec51ee3ca7bf24852118a09fccd47b1ab2afe01b7c70b25106ac6d016e86aa75926d144739a0e62304734055ad7ada24ea7dad7ad0080bf9910a4c04b91c512ea20e263482bae19b70edf1f5bbd883a3e757c09b24d0431743651b5c76f25d6a37eb41413fc1f7d4d6a15fcc5f25d1b77316eddc4737bec040ec9ad8bf410400eddac4f37a0eea687b55c46078f166149c0d297c5d314dc5207552d69453a4888860adb2a97d0d94542638dc4c7318e19d537aefa8ebc4b02935495b6829d86ec4251b7a63ea8c16fc3228e05c64090f653c4c5a47ecdd4147389cea648d0abd472ba9fd1a56c7c7f5d8663f51c0cbca73d32e74a97d95211ef79fd6e545dc886c90625401b585f02f9490a5cf6636a45e54447ff1d67a01e162e62eceb058df4b07c8f5f5083c758f98c8180db8a60b7548263174b047bacac51a298209f09baa0ea4da664cbe0bd8b419c2e6413b768087c1db0a72279ef5409f41e02e6873d4c644d8aae651b6b78a035438ca48ff7eb94bafd5e54152d8959d7d02782bd6567a131b3354e9c7c2afd98d16bf19714f72846caa15a834a1877e85b8623052737c63e004611e2991bd923a97cd78ec9a38d78fbe69326c13c29344137eead82f8e006f094621494e9999f3465070ef79a00c62455a79bb34992ef167547d69aa23a03aa05e44e556e023751d261f2b3e7fb53aaf1573392bb0dfc90ac82908f3af9478bea1feab236e67bc92d99f51d37d983f979cffed9139e3cc759106fca0550ad378418956cf88bd415729dedeb3bc6f0caf26e893173a7f5501e3f8df35c5c22bf9ac7842e6a2349b2bc597d73a0fedbea486b52871e675e224b2c191660224a263f579ac0631311adb983372ac0bd55bd5f8265965aeefe7c7dc56e3c019e172b98d018feae87050d7221df8fa018d00a918c34afa7e12ba86ff2f6fb61865d7d47c2cc29fac3dd029b02f97ef83e455b735c5ee88a89eb22c17792c7efad7735fba56579a8cc47576a19d1ea93e93f476aea4d00dec0b376eaede64cf039ac71dbf14eec9e2d0c34ea73a18f6a36b2c1e6b3afa1a085615bfa2236f3b5ca80f677f321bff6e2af4c90dec4c10ade09d3d58e30d6cb2ee9f2a8cc44a93d72d7ab88bb691bcf3ce681af300b18c676f2ebdb73916fcd28ac72fcf44eda957b3d6394beaa2832ea2253f50a3ab8bcd0e8ec890fb7a34399535bbd8d9b6ea9f0dd1cbd5b172dc7159b271c67ed9c65095c54416dc2b13e0b5bbe8b8d4392870772cdc0fdf58fdfbbec96c0a7a3b42d99994f999067a3ae2efff16f024714c952aff831f4125064e5b9389d17a4f79767a1546c0fed54292df65becc2e3f70ed5cf8ef426294657bd8a12ee6eba6a1405fd1812eae835a998822b5fc0bb90b48439e24dd65232d86c58eb94cc4299a04bca2b182d737ac91a07fa9ad0d916c1695480cdc81704fdc18a3acc8e4d821efeea9a8abf18099a6258a1f6246f189681e254745aa8c815ea718d3741fb6211016b1b8fd848d9c17508702540dc942af7068296b861d4c31c039dd79784861547cfe5c8ef9474dac8d572a7974a0e0fcbe0e56e88bbdd153e320192dcc35e87230e2b6a305ad1f282486c22926c3ae98c505d39cf1b52bfca1d0529f0570788d151f27d16997154061e2351014bf2c22243d2d04ebb711a00d7a519abdec8d81585df8a36fb4812e019e5d58866b12bb502dd88188bf81ecd7e3d2c370d9ea3c67469f8309af0224b3a423dfb3335d33de6e522f589f25dd190bbf7064e7fe4d42651275a98a3c3d8c37338939354a15b944380d6e276556c07143b58c3eea0caa97ba4f88c561d9cdd9eae11ccf6db8cf91d558fa1d1122f65508b41572f1256962a454b38c4a945071bfa3ecdd38b31d3ceda196c54ca65f2e4bb78b3bbcdf6f3afbaf1d91c47dc202f2fc74afdc840b02265560c3228be8e9bdef0e5a5d8e4e66d6e44ee494430a270a8f4e29f2e07c0ac770ab5d60ef2f9abc6149beba94262c1a38ec6b8cf2cf270049d9a63afc67e3cd5567c4bc3bfbe4ce9e50da297ba69a0c3c3e83ab3d53ee0e9570a9b528b675e24a43c990d49177e868a28ccbe07a1683fec9647a29def80412e39ee9c11cacf9b66d35d7c423acd59f8f8c0d431e8bce1828a8a7695a5cefa654f350cab761d9ba8b356d63ee3b010bd272eceb2b767fb60e7d9f45967bb0fcf26d1466461b084a674bc3fd4d781578eefb8df301e88cc070e187a569eba56066bd2898659be423afee78376cea6d648069449005aa6d890bd279797747f848b2398c91165b6b99d5ffe842c3927913bd33ceeacc121a4bc69171394597f861d9b0de26cc9b5af37afbb217f8f4520ac4aba1e0c35d110c68e8a6254f52e84a203c6b31aa0900089d2508f943e004fb8dfb2d8bfcb081bd3f3162ea382d9178898b6fdc464271420fd1dbc6536de633f509824e12e671b03f4558d42a0dd0a57116962515b7472f2af99a2683ef62919e54bac0fa1c9e4378814c66fdd11122309778e3f99e80656c0330a9b38d78c0d4d3f58516215954b375c98734bc08b017401fcdb063fd2382ace7eda63889183804ad03e2512524c486d0e1b239741b7b9cb3d7e857586df200d3f98b787d40c1354c495f05e6d46c902029b78d2c0fc23ee3ba549543704c4e5d639771cc9a65920ed61428ce5185825b511674efeb5ea9eee60e8f60a0688231391ac5f149389bf110792a902cc39f0d876a04fbfa6c4c27474e439206e0e5692b56ff41318893d8f10bc723b749f0ac0d54ff58e81feb85db1c33d1a394b67a9a046790a9680294f79c3559d3c4dea126ec3ae62ef66e95be2cf303c71ea2aa3770799f66ff328961829859c4d36dae4fb6ba053e4530579e073e1ab975ffd490c7e91240cbf0d0aa6111ee8070773a6af7d881e97952881f8b373d7386083d3d664b582c16c4494635a12c594e683f85b15bc3c19be30c709b2c6fcd9051a1a3393139fd27c20d3900b24c3006cad1e7026885e9253a0bbe77a16e2c244444e9fbc77c11de61c5fbd054200f02374a170d0ec7811dcea6cb59adf53343af988467acfa63202cd9987585cd3cd2ec4f3196a3cac89adbf671e4f94d3207c79d5c23abbfa79af9b325052085299c8f4c302e6f057871014514912631d554eb52e566d1a31076474499c45b9d5dce4d0346e1e50fddba1e110841d854b91e1dd64e81ad7dcf3eb9aaec5b6b94eeb6cbea72eb7c8e09953ed3e654c37090096498ae4453d0412ecdf74450823b98d9c7d1d210074d7751c8e0458a28033a7acd50dafcf41b66665cde3c26e5e8290284c84a455fd285d1531cf140c278b2d8ffa942dff221da8600454da6b847ba7466702a18a5d1503b0aab3bbbc5cca2ebdc14736c3b0950a96f6a29336f3c69bf73baad6b86939edd6c6367f1d7840134c8614a6965206294092122ce6222b34f7991d560fa24d95bf4ac5d2809d2cf5d2da7a2ee79b37a0674351ef95e5f47f558e0fcee896a64bf56b6c01abf689b2fe9e92a702c2f58e352c888db1f1ea44a94dfd998951f80cc2b8bf2606a4b277d72646f431b1945fbf233a3fb96fcade862552d54001ed914fa97412fa3658aedea6b690ef173ad0c2b349a29c0f95367810438dac4df5a29b18eeec07a9c5592b80a42fa33de02722bdc429aec274af50865e3644fd7896391ac3d773b3ce8896f5f4dfbeee2dfb3478a466f04ba7309f56049252a1e17f70ba16d8a2644c7acaffc8055381182cfec8d68d22c80bbeebc9f5ec0a810468aa66dfaa37b2df333c9ed70bfcc4a81d1ab51317ca06c6d56c67cfc80b7173f76c6e962c2d9ddaf8a99e5934d12940ff446328f9d3fb7f52a1699b5a8739fdf1f004fd204462d27f44b9ea85d075d0d66d0f2cd69791509432c05e8b86d208454b9ede6b7cfb471ba2d3cec8abafa1ac5741312afbc90923cec0d2e429abff2213a91aba22a2507b6ce2523c7525461aa7d2d76a620b71c49140d6ca7558a78e9d1a4a9f62a6451f8a304541f43e40b2e59fa217ee09d36211f37a2c4a541cf24db31819e88f18a5302718380f0e5569f02d031553dbf9edeeb25ab81f182a7a6fe14ee53d241694b1afb1bb75f64f680be7c2af26531fd571c826dee0c3cbcae184c88fa0c07cbf4b97106283022e36e8edf66413217fe1dd45bf8249d3a6b7c6c379358be093b9f56f2428203e9fb378a666b42e5c7d5fe5075a81fbf1be5b10babe70251054485d7616b09401812a0536d2361f1fb3fa6008fbea0b4a4105e060db08b75edf62ec59c87d242f560c6b18c1c4e88c5f7adefebb292e1304d66573307478222fdd4985cb43ce9f72e5f58491e2156de0a1bcb324a81516ab44fba0497a9a2e913c78321bf56868c2fccd7b8e134fdb1d88c6eee95eda9aeb3e72b8cc2b1e74a6b72566bfa2f55db8a6987d47673a909c67412a127c9de7efd767f8110fd82738bbd96b8f76f853c3b643e04428a8511c04c7277ce9e6490cd32b94e902c629b7c6027b805acd01f8f3389d5f3a06628c62532b8e9b9051094922743aa176879409403daf9fe022b9f594e81ebb73f2b50dabeb289b6459db1a49f4f4c307d11790734759fecd6fc83d89644899001a8f0759a2de69f9a0daf780d2ff3635800052c6689bcefd3095bb319cdf80dfd3d723b41570f7bf246a85e33796f0ebe4bc5115bba9805ebe433741e33d03b1f98337bd3d112e902e53d0c43dd45a1fa21c4df061e8448b2a4abb0357e558ea16df9d821ac2e744b0e05b950cd9808f91ccbc63bc46efe7b7a3621367ceecf19e57c705fd58ffd2e4a8170b94ef2cb01d78bf92992e371bf3acdc90722bb537d379eb775454fa247bb31acc13063ce5d97195b4797022110c7d3e5d1eb7829581cf58e4419e92b04eb8a903ea5417fe0e9e768684982a997003751440172dae26b64f98edc0fe40476d2c3c899cda2b34377fb2236eca4b92ca6b98e6dd2095b29f8d38061e5c42f3c727c1210d521d359fbd9fe386a9810c1c97fbb620e19962aa6a30f387aed874c91c17aaa854cadf7560beba81b282b5e86157c09df0eb25525204af08f8b590736d75402e82fee85cfcd59e30d519fde996814509d27097834c2e3bddc181e69ffa8cb7096f7174dc8452dedb83bea152b649ba7fd8a0d2ffaf40a8ae762ac371bd2cddb59615b3bee0ec25fec33212364fe19399dcf3a7c33ae49c24acb3ce69206ae195cf7420c255ded6e14dd61f56633223ceb9cc2c9fa97aae49d6b32e3c8815de90a6fdefe9f73675654fca862fa1167dd125fe849c8f98629d06bf2ac0000979fd42482da399ebf73c8197adf6a5cfe672d769864e5f5e0e4a93dba52675caf57096a3190f0af106c10203ac25736c7a7bea2575648d55b3ee5c31a1c3f56f3af49181404fcb2d382f4a51ad254d21c2345d7c0a23147e6b5b83b4a8a17fd2c53e41366770492bf1fcda1df5da64c829db796c8b763e8cd22f53f99c10786b5f6030e4810d133fc9cc8f37a737db4751a4b635d5f34f73bef814254ddc6d67163957b850fcf66738362973a13742e6e399b058610a412ed0cddf10f93857cbba3a92be6651f076313ce87b2dfcac37f32d5ce119838aead71b55a955c753fc7ddd08574f3ca4683c2efcac2bfb1e4476023b7bb552d97e18c25a1b33435b7e002e46f676e42cf138e7c921b7a163140e8dcedd54f40299dc32f096f79d43ab25c176c36cdf0e0d0df112b800412f91964b8a13c1cfdeb4a0a9d08c26e18b60c4366b7a03a056cb209fba8c03b0f3388c833db96537b911c424fb043c2abe5140cea081156ca3b0c587b103087154c2063f08b2150b00c2ba4e362405f374881964f7e1c3729cb9ea242432d9fb63242d1c93e01d7663ed1a5557103de59547c50edd8fd868fa019535c0a00f6bbb1d57277655ea392da6ba66b5a0f48a54f6d312057b9239216bb344a783f4b7e2a632d0d04ec57bce8d90d31aa06f33c772b991c33bbead10c7048aacea4d859fc92cbc250edb491faac0623b82d31635372578ac34c2021f35eb09e46fa0884521a337a1b77e1e5091724f9b4234bc17f93bd5549c2d33c84831a454886e68babf882906784797bdf845824eb5ad6cb4800ccec031e82976308a52e6cb69fdbad34ed82c5e08161f90a480a2318cc4f007ed0ddc94cfd168204e279010071cb05e59f41ddb195325d45d948407f7cdd5e4bcb264b939c4310f4a8b352608bf2b051981d137d135361ad16a3529de1a0986ea70e66a1f191c8d9129f3fec3eb71252375f95b73739c7f3f6a61e6b475fe93936011852fcc2a27526aef2ce5ad9f7ab7ed970e5b0cd882f50641bc84e7e0df8c19741147b37d178185672880bc1355d4134b4d7dd2f82ec111dcfa400b80814ad1a469fd27166c4caf48551c9dd64dabb7dc1aeb9b5a7cec8ef6ddd19d6855ac3e5d1753cd2ea09dd3736877cedf7c211fa3c6b888c82c7b51edfb99820dd9e12f138ae607fad1c1e4ae71a141b964b5a8502b108d7adaaa0e2ed285dddce32a5b9606e05ccaac1c4d407e0b68ee57fc84f0c29dc4b2416c351bf5fa5f532a2d03cd3d930fa4255b278f3c9092fa63363d7a1c742893dfcf967396fd147bf37078d311eba520278dd4a4ba0ef7dafde1282afb5fb5f0ae5828f1b01dc6d41fe71dc0c0e9c8dcb2f9ec70dac9208a65e3ecf2bcbf961f96ba6697011678728de870e45fba291ac5c29158b3460f8c0a9e9125170753834ddedee8f979e837936f70c6b593012c1b1ee0ea7cfc45271bef6f33518a4d9886b4322e45270a08568b45cd5b395c2ab8ab6e22582146c8e52df5eb113e414a1d4f42f7fdfcde0bdd380141f31b7a8b53eefe9d9c2572da52e47a37bbff11d39dece63ffcae756b9bacbf052354c3263dac984874aad5a3885d86c4f07642d1cab38efc9899d66fce86174743e85c8e65f2031fde61f4966812f9215f62225ce2c75e0f501818c39dbcdf69b11fe8cae2a540bdbd5e5e55e4423a1b059cce4a57d49c47e0907e81d88efe9a5731be1691cb40fc76a56775a4c0fb6730083c1b2063e2fed4328e60768cdd166b9e2cbbf1980fc032e3984aa03a3a758690bed346807e435917d5d3efc32e27a7e958be734cca266097b852cb244662a9458963a396b2676aca5d90a1f226620b92edd68cbefc2712c499f99ebcc8713bfa42ce19888055cf8e31f6d3a56bd02f37c74841b3f3aa8ac59c3c18fa4d33fdb5a02eb4550afccde6db03842d3ef08b0148eed71323400f8ae5a1ab5f4a77110265a5443f952734ef1c9487b7d55343852f07f5f60fc4af5a083ee64eebe51bedfac5b09c0428159af3df7de5b693800aadd8dc792bca4e9f69e7f9744a3eb09fefaf8bd276b5da507a9970df94d86171a14e785e1c60825e8f0f466222bff64ffab902e434cf27524eb5b45b696c150047a30714191db8e819f9c06d070458dab7586cf5fbf9c1434c04080648bfd5c75d5d340b880979ec56bfaf0cba8942a0623242452fa786af5f2f355fdb0bb2b5b5432289c42345937b1f67f232f550a7e3ea504822b5a05a2cbc5814f276337b59011cd647369be0e7c3faaaf82723d352ba5676cad4a6670c1a84bb5c562591d86474a92f34bb829cea549fe00440c4442c6f197e6008799ef34c8d06c19b039e8fe4c6f64e2825fbcde2a6b1ab5044e4ac5f2f3d210c6082a5d6933641e96fba88e35f14511fa46fe648fe3e47ad54ab4b77fcc3e024aa9dfe59cd4d728270543a1444242cfbc06af641c3ccf7ac3ff4d11bd4e518fce394c83dac099335d3ada7767e4e4e10b701ad2b9a76395a7a6bce89a9b0e50a40ca24b6fc471f91a16eb2666df9f2080df534ee589d32947614d31c2efb3001ca772747670675bd0e38ae431c6d34938315f115319d80a9368cda4eaee186dd2e8cc0b6ebe0dd13d227564d9d2ffa9d6e243d43ade05d8b938fb3a1f52a0e954c42743a19e04149f4d3c53bf37165bd9017ea87c941b56d91c15ae7bb135ffc2569efe70709469f71c1d8cb9d102048b62f3814d44c9a9242a5adc0a8b0b93158122a62f7612400cd5272d37d2804b1e657b38ea17fd1497089ddc9f92ce844a456b31283bfa37c9bb51da81cfdd3e370655f1b09ef31f6e4df54b6bb4b879f2a37713e44d6ce7ccfdda78a24fd69e42d5aa1a8fe23aaa30fc6d5d6e42d2d1b2a0dd756e81d33d05cf0b47689a3fcd0085b8c946bcbb467ea52f405985ea9d04ad9a777bd1d85f37204f37d4a32850b6eb8a7ff824a73d6f9397b0e9c997ee12e0c9e085994bf815acbe2bee5e097e91154951862130198e52a6688d32e6694dfb6d670e93d5c784a2b82c2650bed57088ee3fbe77da39b211141368b4fead6d9a8e74d6dc59d7b5c3ed41f4d74c60a1f33e6aee75c2f6f49a5f5d4c4f17ca6937127a908e16778beb24a3679ba1526999133e4771b235da4afe803f3e0832f968d40dda3b81ddac93620dc9cc71c7f952dbd30125541728a62882754b62714543ee938270cb2b85b4a532f2f235fdc0f4d03fb58eb6d48739c0310749645cfbac88be033498d8b1220584c3942a7ed0893a4a129a58aa2677418dce985dfcc3b0c5149bde7ff9c1eba646a0149d715d35d8f308f1dba1a6c3218fbacd5310b6d009f24d5624aa7d08b338e54b5a9e915f1cecb822c73cec785e929638e0b9558f91724e730a3faf00132a00f3090e7699a0d9a3885fb96a428406149f1e9752a11458e85a00ac082bac7d7ed5b94bf78dbdfa6f991104c4582a972bf2f7b988e8a9d40d87b8f910d8315ed61f148e155a2411c863b78010562c9bb2e2df7846fde7b7d402ba5a5dff462cef53fdb783186868e062b7bce7d9909b0a336b983460cf1d852be978d5023628b91ee6f463f35fedf291a30df082e2ddb911cc09a821f9b617bd12e2f62aec96bde699c0ae30bbcc93f0bcced0f16d417b518fc5453155c49112ea3ab4add547b1bf221e0f797f36b0ff24b63db1bf325263603cebfd72b55f112e5b9f2cfb1f4b3c41b524b8bc9bf64269e2e6c706af11f99842ec2dab34da51ae4140ea2410d4f61598cf84402aaeec5e2cbbe4e5295cb749e7ff175f4f37e80be4b213822b00675a4a024aa653b4605b979c3080503c8e2cb89256f87de08517f79e7dc2814e928636a4f71484f35dea14a962ac4afceb59bef0251dd2e14ebba16cb4d714412f96c3b64bba8fc3ae1acd066df345e38de45043aa6f47ef0976bbc8dbf320f17f3662b1dd2a446dc853c3d6ba2535535a8b4a90618abd38c949c2ff72dfaff55a5cc707521d8b4a8a2231667a8d829ddea45094090958ef0cf4ae7119c10db78ebbf58ba43e33d48513a72ffafcdfeb6883aad6d583ac8aa84bbbf993f38c386cda170e8e7ec1ef141018ca053ca5c229cadc008facc37e569c43ce59e99acc6476d8da6235a90598a9743386e7cf54b31a076e2e80f54325103dcf5cf96776a73b2e6a0bd90db53fa69cb5c7a92b70a195f312d3df3ada7e63f91138e574ba8ee67e1c54ce2cef7a3c5ed16c482552e0df69d25a82d8bc4872af2038bc950c3ad778d6662bbba68ba2aef813e377d4a5ee258bad33818bc9080a794b08677b152f2d15839d12e4d64c7c8e77fbf1bff57f3c29c2f495b9f3a8fc619c417067fe89801b7c8773d357cbefc985419e4c7b63f82dda913c21e7d73d5c2c4a19f7d8c32774808c664bdb0526dbe77796bfeac9cc2208487dd999a0fc90c27367e11eacb38b703dc9bae1a893cfb9586c2d90deacd8cd0f69f40284bd32414753ede6d4c092e930a8a448a4fb38794dc3c5ee1cfbbaf04bde4a5ccfa7c75d8faf6f0daec05d689a1ce5d8449276eb5c8318c1134d4beb2d1ee1c7e90d524d4c064c2bdede13aff2ad34064edd9404b21782cff0cdc548719799076cc86c693090d6c9db872ad48511027891d4c1f25347a01e6f7c72bfcdce5f36521d9cc284d2d44d2d3859b527f81934a90df0f2f9c35d22ade5074bcfe1308ef340fddc0fac86fbffebc86edc5737b4fa44feca0cb63fcdd22836226afbe976985d7bd13b01b3a6f23e0f358aeb854abaece6a297ef6c8208afe9f911550c6ab1e02a7869d1a39b97f986b2bfbea939ee818a70f9e3a71671122a9dcc2c223368f383358997907b01a86263e2f9995c13dbd8c97665a2a007180759398458e7260d707d1ac1695b5e8dbb4bc7b04673f986930e256056a858da0c97fe0993db0e18bffae121f7799ed9a86d96eb5b112907148c978e38f943a67f54f337cb041c3294d582e4fa125650c24fe2ca4d0c18b1169c1445faa01fa562323fc1ad43b05f1fb32261db0a2965d383e7f28449fd12f4d4e135a8e728518ab1345a94299253d2cb90689a011443e50c91e9ceee96a195ee2ad0238f306e7e27c1d94ba0f1a6be43f5de8563c7b5b305ef2f86bbc1b07503b8e894aea336cbbfda00e99c9309e898d1fb021b8b4dff711b0b4a3c161970393a3faa22bd53cff13706b7fbbc8c46bcbe1b9d42a3cbb17035a0244d3e5e60f0fdde25cf826257f29fb630361c72042395b2d8c46608a44576c5d34ee6b51daa59ef410305ff540472844abfa73e7eb340cbb9bd859eaf3a0c1188cdcab2a09c20fa96d7a58980144579d0cabbd09abdaf5f34ddd3f492548794f744cce89ff6a726cdcad67d755e010196d8b19b1154e6a184c15eb22c5863b4a652629e39a1bc3dea6eac6131f3659882470c5f56a5bc546126d7fcdb39c5baf01c05acf95a48e02ff51a9d6f69048371019787751ce619e5fa3dcc54a23235f366f849b6fe8503d801630314b76479b20e1cff8ab51f86d255eec6961a8907854e0f9a3bc454aa873bd1ca5fe8fa3864ffe43bbd6964aec184616a9fa2484627f8f69a6c7f6309eeb33830e9c216c37259bd1a81529c4c588e644e7ebde4a4dd879828759bb6d83a04b1b024614495fcca44b926871e8ecf91a28e88be004d6753ed0beb460d3bf671347f25b0d38155a916a12f114ffd8ec236ad027f36848556aab385a07561081ce2b96eb7600645bb9a515e7c3fbcd7547a74be2f8bc073ffeac20ee4b5c0495c40884dabab02b7addf6f1e037cf656dd193ae8e67b19465b16f5f3f0746f2cfffcf1d34cfbe8addab3c47d97c79769ab1d21413159f14b8071b35035f42d1acf35d122893294cb0e46f86b8d95db7dad5771e2b84afe318f15f32d94bca15653d34b541ae8136cc15e723065f704eb26f33381408000cc521f6ec003be49e7c67c59f96ecb1fb88fb6a55b32ae168d9c0eaeee4aa74ab0af0c03436cfd1b48519b2eb220899a05bd3228da51674e808230ffe6c3936496fd3be98c607758f966a93e4eef16c10a4a2161e9c6bd67c87dad1c8de3a514367eacdfa694b3c025a4165e3e7a4df84b66808e7ce82b38529b25c4e215fb1d390beeaa8dcdf8fee407ea79f052959cb0d6a0f02d34219aeb937ac9964f6dbd99bbc490c00c7609d4899089ea84c8816b5d1259aa30c155d7ecfca61a3353fe3804129c745b0b06c3b92db7685f80874ee83d190b3d5ed0595470c44ff65df2299fd652e15cdaac4f52d0f6aeb5f6215feae82302c1dd1f8aa552039028fe76f1e975cd3ce57ac0af83bef73fc3884a0196d276790df0617a999b5ab996bcf9c223048776e71bdbf6a69e3bc7ac05a977067ba680acfdd074df51a8302cff36342d93b9ff60da02499ace19f91eec37bd9db0676e985b0e47a93e1745c6478c2757e89f035ce742dc76b89521b05d4b7ecf08f9596e9beb25e8ed53bd70f78b362bb59a19c001ca4546bf2add780fdb6da035a6ad6d0f6e7d96412935055a1de8756cf1be8bf81db67bf4b60bf4790e2ad5b821454e567ab5e16b4db7fdc71026919e17d9583614e54e785f69b626b1e6374f019156a808229b3a8d77feb7eecfdbc1e37cbe36ebcee75760623f0eba207edfe44f8780c6c8bb4e18bf08b175b7142dd627cfd341f7fa57d891bd7fbc4eb127331b3192afdfdc2011d881759006764da5e39eccf81127b22f47e6f1737c64413da871f8ca12c824f54c2a8f2767e6ccfbac4ed6019277c2cc00e83ab3a469c6575ea7c97abc77065c84da0ee115aa7ebaaf0bfb2ff820c7aebd93a49ce281b758eec8f50d1e6238fdb5eb9e99a88281ef30d7fcbd2e059890b79e693962dfd7b1ea4d2982d8ca0758e152ae9d625d99b0fd5f91558613b4fbcaf818dcbf3361d04e9bef7b59d82d586eeb875380737ecd4f8de9e676e04d4c8b119b562a0b509127414ef37e931c636475f1fcd5caed640d7eb0dce48296c0faca1974ffb42e8c6c3a2cf0b2d526c830d34124ab2b08c0dc559e90c605f7df3eb291f2cbba74b6a92582f7c7a53630d116c512f6be3be5cc6e13cf863771f1003c68be037a787ee2e61d01ceb41fd5f9c995e40a39a62c7b1710b65718747f1c1b5e194e69f21cc5815a8dca6f8be6e106ae5da58a8d665f17fb49c417bb510c1efd658ce26a171937101626f7b3a9711594c8f65e51739acc22e48061c4a848f339d5ddf6afe66d6937d49488b39fb0cf0cf1f7e4d49cb655ede23b095ac2e5c02dcf7d3bd2c78c0362590cf9699640645e4b47920dcd03eb69ba79867e25914f22e298621b989f9e02d84ebdeeed9832f033d09d802eb321232e4f7741dd812f337af1960ba2623588c08cc92dd139c2ba336182ed8c9dfac2d22f19bb6051dde7a5f260184f696554a0936383774875a50065a20528ab28d06f263159ef1c813397b7e862e12d5af1490cf44eaab303fc5191f0a1ac098920aca6173dd373ee91671b8c509f53cfecdfbf5d525d0758ab679f9b2985d2aae99da0b019d4ba589e2668f5c8a10f6039ae3abc7fcfd6d93c4334cfeefd301b83f347456502f5c74d4e35b29d41a5248df9ce11bee76dd9bcdf78b7b6088ca5e12e469b7dc52dd33569ed80c3efa38a0d6502dc225f3813410bde6c5f7f12a81bb3b7e31e04f15f4d33160f267c0f4b7d631e6b9b74a6b706c4208a25dcac61e927760c7f18675d77616c01cf0c7e9c00d06cc0a296029c252a2589a19b35583c413996aa0fa4870d7a7a7335e1f2d77f0ea577fda04f3e791345be86a193b59cb0af7cc343930904c46cd4a633749102cdf6ee9a78b7f4fe5a6a29ee4bcb42e81511c42c603d404a949893f1164b5bda0d6ec043f65a6d9bfae351e128d91b9a0db771af6a27cbe3e5c9e3b8d12f7835339f84b573853fc73a3bdcd8bbe919def8e7c2045fafbd2cd42c01ad08e731bb62e33d12a9a660434dabd9b86e2c9396ff5729f8abcd25bc037f12673e0d23e248022053197261b418b377171ec9a2bd30cd8417c86cbd7adaff3a4053f5f118351c9cb767c63e4d1b187e58c1c6e1821de979d303e8bba57dfbc16b1f308d024141e1d9641c37c837528a6283dbf8edfbad3e660aa42aa6d4b96685213f698e89201a9b8ea17b857177f5fbb8238ac813b6919879b4c27bec53f1f2f8f842a28ab701e07e01a3f7fd849526114f1e60a58c01c2df9724fc5e2ccb90dc96bbc5754ff0774b93c831e87b6a4cc633152c95b6f18d2f7fc2f74537687dcd58028383abf9a6abfad241c34e27d40e1fb28efe06f6eca46a6df7661a06746cfa565829b9b2ff78b1391cb5e91d987eace508436c865f771dd279db5dbc8efa79a0f3b6501d5bceefcc4e22ae3632046f76afc61c32ffee0f161de9ba24f12a69e1b61895155e23359c0bd32968702bb6aed9b18e07fffe7de05d0ecd55694c975c67ca8de75dc0f9c37c568e9d892a8cce53ed99d3e091f5fbe7a6fc5b4bc151d34ca95e4230e09cd755832e7bd8147255a3eceb19285d23775e8f4a9ac32c7997d18ff52672b67143ea7fd23f7d87d2e17dea68dc8279e7649083549bf28182e2e5b72de2d3ed94d0972249b674b89a452266cb73466f7c23f8fe48616eea66ee7e0608310e9b2956c9ac22abe899478fae3f6ef3fd38a5b8103ffdcc3836cac9e5bae2db80b7c0427fce71be9f28d6f2d447a97fe1d35359f9b5f18335e98ec57191cd9faaf71fc4b252bde7f93994921053d769f171068462a8ee20329e1813d23b29d9636333ec7935359d3d82c49fc3d5cde59ae981f0d35a64d097e84dc491451bea93ceec61129487d2d78cf9335b492737c9f5809af54deffda8cea74e3ef8c0c24c6e531b4662933b45f45392d7966f625b30b0fd786aa02a80bf251915f628513bc14259d69485a25c2ce0a991c067aa3b3959bbb488100edf47118cca6e4755d3976d61b7878f32bcc93f9c86b1bbde1333b32111f9017f0400e3f90efbce8204d7b347aceb63d955699b7120e4835077112b006704344008bb1e299f682eca35ba1bdc305bc9213479eef37a91e215dab0cb601f8c8a8b702335e18fbe5b3dff9ceca95ba7303c139bd0866eebedad90a897139981938f5a7e3191b231911c6403ab1f4cb668a5e23f9dbea5c3a4ab27c971a788b77fa0559ed02941e224686d456da142b39aa766bea628baee42e5346a982df1ec5dde853567bcffeee60a69d12c47e066eb6e61cd4e582c0607bd6271b1f17a14d4fad2d4de9df5faa7e71522e760fdbf9ac509c0b713fc49a51f864e83a514ad0b35a274376b9404eeb95af4cdd56693a40d5874bc86ee8c70666dac84d8fd3161557bcc49de8933ef2e25f587916a80ad8fc2032a22a72ccc09a67f5aaac0e1fa46d0ae4d3fc1c7e34d5158e73f13fe17e1ab8fe80ec1f1eca23d2d6880a07c1a60c665fa4ba16030ba161dec5cea7a35846a71d998e3adfab3b3d3fb836558d8bb997a271adabbd72a27cb56325d28913915acddf3facf3211e4da69f37b4f40c7b73cb69cca5155338c830e54f4012c858cb4b0cbf129382068a733af2e2d70af7a9fea1613e8bde54acdc94e95a7b81e302c890ae9159e996235d988a7f053b6a91c6eef772910b84a08acb66c70cdd01ca0335c4203eab81382fdbb836cb737b300471a1225b8ca84b30b95275068259d89ee2009284db68ba87ab1910a6d32bb2efb2fd300b9a879a79d71115005f0fc4a78176f2f721730d14e6002dc5994ecc9a848b3e3a50a60192499bf5578054c29a5c7e0edcbdf541ef78659fe398844ca3ea7a82110aa34dc51193aae7106808b734cbb4f1fda5d7e81d9a60fe42c2cd3dfe8af341460b4143e5647eee184e8724b0d3e55729bbc5f3565d3f873f890dcf9c1132b58701c888a5d70c63ec9ce961587907ea3ecfdc8b73bfed22d845738f99843cee9ee1135b2429c77bbb27de84e3adb15309eae32052b7caf4abc6e5b8cf9eb9e82dc13ebf8c0ef1576a51c4b195f1f3673c0f9f1eb9cbd6fa89b99bc9d7ca4d0426528794fbd0ff6342b8dc6ed042dc7c859a025211eac5c18d0bbca2699cfe2644627123b082c5ce9887efefe85bfa05157376ae39e717e7a4cc4b775d41bb9a40a3cf33f12715eb8b4e7ac21d87713259d5f33c984c6618af1d8ba631f256f72bdc9f5428fa693b84c278c40696053e6c2a02affdfb371da10519c0d981f6ab6cd3f4a5fcb63d8d3ebbef12ad4da99c0c6d230012d6031af84f16d16c282de5e3c71e5ce18582266b466a0524108f2e447098146e20d7d60495b26f592b57ebd959d4a9c644c56504f789b3638d6a531a871d3198a8f3c8ab6e01143d841e12c89b944c3276e34e8d5da5ce6859aeb60d75e523c284cfb1f9dee8c18ab69113e77c0d2b67a8091521a094bf2976a6b94bcb9827e0144038468b439eef41c04c3a3e5691ae437e4cf62995c7927bd3aabff3420c06757aee8890f22b2c6b257c9347edd1aa65fa79509209a0d1a084571c87d5484ee5b87a735bfb6d6a0db77452a709f28b528c004df51d7599f29f7b797b219b2ec382babe0b968f660d9ec9eac0d925e88a404712191671629e384feb2d7e1367349b2789a9bc1093e6031db0c36ffa338e48ca4c9488b50bf6003b7346315dba0797a653cd334cede578a78f5393cd1a69dde1510e68f35aff4696a214b0b21fba759b9c55a9a62bf25b46ae16af2a925858c47ee03d6eeeebb19a288944623db18451c4d21c3fd951e11222f71d4c370dd2977191386438bb6270569e08fd0cbfee36f7d7b00fd4938766fc4dd9706a62215b9d556ba8f1c766dccbd47109aee885685cdcac3c7bb76ac88a07e3580ef849bf8bd8a8e1ae90e1096a678e87a9f04e97b1abf557db72ad7ecf7493f61763239f69a8db01c7c111d4e1eb285ca5c805ee6c8104f129bbd1edd9039d37bb9f41681e882815cd8828ea3964bbc1c95fcc12495f6d0682a5152dae3785f5fd39f03d517fe3e65dac3b838174caed8c4c7b17fad4a54e5eff82a40fcd5d10309397a90bf24a3c58dcb10e171a68496e0363e4483ac4a75a34ee12f96e8aa83a643aa360569b2b59fff80da2cce8ee5342d91c4d43e0b2af91e6324412432c3d469651d2b01c9b9d6d53da94ef4b0e20b29301a874434c87e48f020d67775e8d858354c984af00269d89d1084ace57295d3e2259a51f1712a7cc94753f9b1e11e2fc1c3d2efa4f83756699fc2cc058f75908356df08e44a652fad1ae8c7c03baa185ef88c86b33fb70b596a7c8c743eb65171f844cca9d45a7b67d37ae735ba9660eb8c035e761429d9075a8155a57393a1ed5b67f68c1fabb7a8960ca77269ab9c55e38dae6781e17bb4cc40d03d77b41edb4d726da58ea300b16654c013f2dcc1d721907da1061cb1b01426c1f18479e218bedd2861952c4b5df335a22d6f37d62dabdb01707a77271d88cf37bee6b1cbec1c891f76cffa22906eb40d8c727fd44e525a2f8b7b9d7620fed75166ad387309c99a4d8e0acb36ee814a62a517e4e7f937df311256142067e15ea07ac48f2362f28719c1fe4ec2d616421c601a0e13baef153e2db02e6d77d30084ded8eabaf34e61bcaebf84621e942f35f307efe7891513013abb4f03169f3a53069220bd5f43b3c8e85b216c3f41464a39dd6303918fb341aca699979c1992a60a313a1d6154943bb7c91feb9e2370bd0622d66a99232edf76c5ca7e5bab92e7ab1414623a7c3f502a5b6b9761f5e79c951c2013160be57edcf56b76d267d1f40c5148211675413fb352a6197c22fdd6474e035e9942bc6136d500f22aa560b76c281f54d845ae9a88976b4701fafbf801cf324636c78804aed07b43644d1c715e4e8a9ac903d40b64b40f00e28aca88d175d4d4b2d7233264fa54b59dfc62789bfd25eb949a2d3718eb0baf7e483fd85a39ca3783bc5d12a62922959b0c56d7de4c1e54da490cf642908e035fce19fe0867f69d347097e09e3214adff78a44d0b66b5d5452d9a6a9fd922563dab465a607af2dbc73598739f904979499103c1c7e48436a3ee1ba5ea7f7766f778431043b066ae818a202eb3d0771a27a552d6577ffcd967a3aadce30925ebc4e4f91697c6f8faac09080ed8ed7f65a658ff96c0fa3d25bea16def28f04b047410e1852d76468dddf3b7cec98ae96070163d8234709ef04174aeda695756be0f0d2af899c30b21a2883baff293a819230f591ffb96e4623870682a3b3a7d5d484e974001afb8102650c67363c1114b8dfbb63755a0feaddd350318ffc347d3d2e66c37486297149f96bc3c119a46334376d646cfb3619e26086ca4f6d0bf4a5e2fd9ec216af07f861ea1fc658cca1667796bb713337eec085471a66982f735db321553b9a315299e5ce995d6c332832b836c8c19d20fc8d5d9b13de3763fb7436f0d5f4f8aca505f929ee8776e548c4a66239d04f12ff27e4fc6f2e6e4fd7c6f5378044925f50e647a9f5f553601436190b8ba881ff46179cf2cb7064bbbd1e0d8c22b4d4155222c496fab482d2a2cd135560a59c0ba2b2444dd5a38270a5f3e3a19d48698140df87bc32860f4688a8ef224873a1b3a1bd19447698208762a8525c0e26b7d465ba206f437c46c98a3a76520adf34ed349017f997057eab18c36ad24a35e2979c8bc67bad3de6eb21ad4ad93da1e02d7193739aeecaa2ee8d28c9723dc60dd968dd42413f2f29d9cff78954f28176c9f29bed46797cf44d22e1606c7587580f926f2a464b1c8b1e89951f004a35128927f347fc88cabfc3176d171cf13516eb2e2ccd0ed76c362144d2e89f08b90c38eaa08a056f8100c2ff31d642d300e78b73ca2ea553bf206ec1f768514a71188bf870f3291d69a1b6cfa87a3c2a4724ab0dfaed9f0352fce88eacafeedfb91dab859f63a13e67e398b8504b52440fe4c687b0bf6755e1ab85a9b456a32e82108c2b4f998986edd83a5c7859a7b92ede3891ca19e6ee9e768500739ee3a50d3599e9d60e5822ed20f5ea6a77a420a575cc0a164c236189d1d3e84e7e71c7b2c9f52fc57b71f98f994d62291a5c842a9f8518671cbf8ab928a09bb926e652ec9614dc5b4c1cec724cc55b251cb4d757dd821e73040032aa5e0ab2dd29903dfede4b9cfb2c2ebbf3c13838f6a961923d9e91a43aa1fae1aac8b6e3a530eb7ceadb4a01a1dfd4fa73ea9013ea0dbfd581a6f88c8026f6aceddfe3fb5bcdb43df97ccb7352b35b87633951cd6ff430d737ea6995467a448fa94a5a6779587bc14bb399cfc47da8b614da0df9973331a31ae9ad41e0b22be6670fc4ac7ed3ce267824de140d4a7a27b1fe7a4e2a9b14475edeedfd075d3fa5087acacafadb15dcc11f938828226eaf38f542678c62ee12fa2f929cefe8c837da967a0fc0a87d366758a11a5a147c0fc2d11317dd75daa27ebe36e13a7763d3715de57c8ddf17a3a41154878c98803264fc62532ea7c4afe8f4960e6c3d746e35a25694d9bad3864c39b616b83a6c65011c2299dda08e8c980a92f009758c737705b29380da1fb814c72a913069cf3ba9f5f03866953f16782ab861ad417e3897bcea55f11bd888d02a6239234f52565c4626fe5e6b2812415d0ed3c2d6e38fbc20c329301b2c39ed0fe4369417375b37bdd6d7458268e3cfbafa0c926d045a0eab6d38884d79ba8c0be271ea5e1652be188da321ef13850df336ead7a626fdba35eab46d0eddd5c5a9344a74a0b5c35f5853b5b7d4ff07d99c5ce9853f2d105f5a237db547874a1f8fcf6b23351b75a46341d172965e019b434bc1f754207b4178ec829ade635c3371880b111c6434aa9f213a04853b3f56be5e5959bdefe07bb14ac778160aa4530ab4c0d8d5e4706ec267a53dc3c5281b4c57c2478bc2cc47b1468024d6de4b1ffb6fd2f56540ecc03a39ccb3fc6ed26eceb2e82958e7b4f1932613f2f6a61f31f04af828023d39929c2ccf36e8fda64f0ea0033d5024b74746381c4298a7e4e54b8e789b5eba45fabb5c79f50614c0be0ed4ab2f79781a2a8a18a19113066b82c5e0139dfbf953fdf3d4ab7ae63bf3906da421c1988669e539afe2e7a778a0d242fb5ef828ffbc39331d0374da7c126a9edaf64a149a6bf84b1d7e011da5627fc8d201094a74c7f74f156a937388f2e3cf4e75d397588297eca6ebd111a1a39f5235b73ce28bef1661f0f6483639e89284cd896c1346bf9fa791b08ef312c1f0a63add6b9f337f8f3ff485d99001debd9b7bcd5c74359e1c44e5669f7b291fb49da4429586b728782663563c15cb20bd92c9b0b5a52aafa0aa67bae4db64fa0812b66130e45b52617435c69c4dadde0be5f6d2cd9cf9618ac19601bbb970a087eaa3811a5dec2334104511561afe85bbfd86ce3fba3b35208caf70a0d749c4fffdf8a128c5c0b350eb31d2281ed3c26c642bb32aeaf0efb2aba73cbd8f808ff501ca81c632610b06b6eb5a334e2e774ca3283a6e2a5386e81c01306c27dd9e36b6c9055c6f569813a8e4129b8786ef1d3883018debe44860dc032fbf911eabb2cba1a033d5578201cc3a19e5f1e6c93a4d43c41ad53db92ac8fa35277a9ba64b682144a5a141857feb37d0506e9bee52280a89cdbc8263763559ea1f28e2a5b3febede6d807d40123541d6fb6c0ac3dfca59caf7d6870bd6c7ba81fc2677ac2ce37e7ee0943ed9b66a06a12e80d352abc7b5ce3989b9622a0a0aba228752347a691404fa7d2d76d088b348e0865ccff9ebe2136bd90a313f92dfdb8c9c7f5670ee31333b039d284e8c4da1f6c206a494869b796f56a18a7937ef7f30d0eebeee385acfc24e0b101a448acc564b43b6fa66ac8f2bb6a9520f451091ef17920925502a3bca73fa539dbdecadd99015b1abc8b4dd27d9ae61356907e7718d2843b9b22c379261d6043d3b0b884e8f6fdf69c153695b623ec6f7f9bd8e1222baebb9840466f1074f0a0652a31f6c8c9363873ba88404b98562b38d8b9477c938d3a3ac12387f71200f664402a750c704bbedf4fad2dea8999d3d5783d270dc129ee4e851bda513d4bb062939b4b8a9e84df310599bac76270e4919bff3b3149efe5835035a451f70b71bbebb63df690f0e2486909fd0f91042cf21c01abf31d09e0544d67e338c29145a662c99a4b1f5f3f7b289f7fb18ed5c784f20b5a3be6123031ff3b3cb711a6f1085f6d6747f7fb51170cafc75b003cf279ef010d322ae8355357d5f8e1d30511e561bee974d2c9227975ccd68d3d1abe01038d73369e4493844a493f194526e2798b2030f9fed6517434a0ffad721b3bd58f697c1fb815c846ea922936184b62f16b089e6faec0bc6a4fca8d8b24cd8030095a5677b034fc24610d71fcd7da9a6552e6944894579f9a615e401b25da94557cda9a17cf5c72f9d2c6aedb171e9603ae697c05d1a57010ddbb4fa2c319897383d24b229361ff4bdd2491128498af14b9340e78ae8e47a75802986f732acd6e0e978ec57caba907eb2bec2194f4318daab9c946db2789fb1e592d4ca98c44f603cf12222f6400d61fa165fbef754e9d74452f34ad219c7a7f2f1c30e96fe382d94e529c284fd2a091ce176f9875afae5a34d775e658c8360d2794a4984a033102eb8fff4466025db5223249c3ac439bc16c0270ebe7075351eccf36e26de3b66011fc1cb384f0e6be90824f2c715ef8184828a48e390153ca19bce5bc52e41a59c41c8e57ab7ba67df20d6e025c6225b959e285d8983ed789a86a408a17bdf042b0b70254c4024f60f0d5fc9a093e458767831a60136d3ec32c9e7c0a0da7b7ef3e51ebd504ce3f024b5e903922c6c9c200eafffe40308aedc5d1a8a4569c2652cd673d1ef277fdc316207c0478d4243501b2e9a4abdabb7a9476a7ff1c9a2dc516ce5fc0afd3fb7586a5a27e24b8b74a0ff461bcadae90db13ffbe365a331172d8910ab57cf62c9e65f29a19cb16e50d97d4758298879ddd8a335dfd5b52aa7227034734235aff494d8a168136877f32f6a1ba712c1c88b2db08c9fef2d0275ae413f71db0acb8e1df9fc117f9091b2605a2b602059cf7803f17494ce22dfc1be386bffe11db8f164fd51e7878a3ad7b130531cc60839fb6b3005d2c61c181343df1db24bf862b683be7df04c1c165f8a95afeee7273d3a7e30415a10d400e2392ddac7cade9dfa7638597302181e3cb393ddf0d700a183e8addffcaa31d25cd94fe5c542391ef1cd078346dd62c2be7b315a26cb3ecd08e9056fc3d43fb1803928ad856ea333741032a2ec4dfafb734c46b71c9c93c493d2c6f8deedf69d185f78b74d2d74a890767c910eb67ed6c89e5bb2dbb4022de9f11a63466a7087ebcc9c9cccc7245796727c8ca542f2627be3c627dbefa7f9ad06b304c4ab0b9f4ff30a67f3503c4851935bb5f0b0148d6eb1e06fea7b63b44c15ce7c8eab98e383d5aa7ca28facc132c50eeaaac5bbc3e27ebce9a95603ec1e0ee68021f829e672612499b0bedb4284bad485d3335935ad969a8ad9a94caa9c0877a6c34eb504b190736ccff65a9ba1df0f5e8027c16e49bcf357e352da5381be2fb8df02218457a372c038f74cf097a15a3d52f9577a97e0f97ffddc49e1644fc9391ac76964ca509c3344cc0e9e52f66c81d111414fda257580938e12aa607ffbe25998106bb689fbc5139027f251dc161380c392f6a2ecb2cb87ba29ad830430d82ee38eeb66e58a41e75b2ab9c547fc3e3dbdcf8ae99257d256643b542c26840e3220eccb53fee0a7c1ecb4077059e70fc42823af70559a68493fd77e19b3084daba28115cb7aa1b5de6a305c2dff01d67f979360afac1d653a40347a7828c5290c740884829528c68d1201f5c2e61cb63bc6237109e9a4c2ddabc575e6d656bd82c77c266ac5054889fd8efcc7129afc28c24d80ea47636f2ff3d5388e9269980603d444a293c50bba23bb8349a9ebb80ea7d026ca82bebb827538f120476cf7a0f2ad00c3132917c94f238046f4a17d2a8b7652cfcd01f5cf4d216cc71dc44ef0fc91be852456e476514db01d29c32dd99d0e74462037269f90ca553f9b830451a1573343838932d4c6b137c700b2c2831685a6cf3885fa9c5a74c6adb9232bf9ad5d2f81233330db64600ec106f1b0028c9e5cbdc05b6af04a98ee82c4f7e73061f1e52b4aab73284f5d27967a3dcab1a707d77e3098c2c197125e32088df3ec060abc8b5ac0d68d9fae63b8d9f1f0b407d9cff80f752b17aa31aaa79e2c0c6153e8c17672873483d9c9cc0e423f7746d1ba3fee59b198ce95b405ed8742a751e6ac4732c0ca8494bcfaa796ca666051618e9f589265b49be2792344bebfe89b3c2e6204b82e08cdbee686bf9086192efa5d1f128634ee419126daeb6fa5e23498e9b34a770c7f7ce8145385d61e130f681b326ad3e1bb22dab16b4ed34e0b661c6373a442d22e98cad91bca23d24a83cd50a73fd2685bd80d308bd2ba139be196bad901da86b0a744b372a917a45f8c3f27a2964bc17133a9865a624b47151c1ecb5590d8ba40d8ea84a3a9b40e7e7f74d4d0d53ad3f6b10f2317157ac18941b963bec6ec70b56b2a079e344c8fb024937a7c96871e3776128cc8cb303193270403dcec64057f1e11388303f8ca8e3314923b80fedaf46a466fa828a149fd0c33245667e44a28ebc55a1e62518fdf5da8f1dbbcd76a74159bb6573b6e82b5c8300e5262911b86f5d656ba55c4482a8debfdd6c49f7bc452be2893f5744fe0df1b09eb803540fcc06a5f7d1af8a76222b8c9fcecd753f05ab6ce206db09c2e6d1b57087ee4faf8c882474424521fc9b8fbdb4d5cd94a2f5a09e353c6ce62add7daf7f743038887acc0867ff580e04481f91fcb24a9a8345058f4a2c9bf735beb5802562dfba37522ffc643a1b51594b7126a62a06a54c2d4b54b850ccea66ae0adec8880f63c479f41deff78b1ea7150a7dd83c3ac1fcd9cb40215c81fd0b62ae0e73bcd2447ddfdaffa037e9bbf1215c05aa704803d792d9c3349f3d962a49c5865db958570be3e520710aa62f11c569960252b78a3b15175760fb1038cf1678c369e86d80d3df29e6b8c8f4e07d4237db758f5a5a763a0e39fbc006f581879f86c5e02a1a7226dfc076f4213fd3ea560744c0f008ac4209fb9660d45f6812ea2bb4d3951737c61b3068a0ea5b111d2576623e5b2b6adc90c035bbdbd550e37f199f77750201c1b52101b232ab05112e775ae32aa2c8035fb5e12f18160afb11caeae770c0e8581a7bfa0d76872939281c94cc2a338577d3b9e8a5e31540eed51561f57ecf8133a8a3d5733ea177fd6a0d3623e08fff500c2a9924a5434403d509b77426bd6c453f976b51be57378a5d2a3afd426521675bb59340177104b17cfcd479ee727f244169c7fef8c426123fa06f445b12b191a9e6d17451a2ff4ff906b3cc5a227ce8b3d95dc06b114a8f262b1f93a6d99bbf26a00114aa8b35420886f6d17f4d3e0a78e89a0a0f085cfb438970f403cdc282022a7571981287b8c384f1290b69c3bbc59c1fdf824a92e4499db3d6c964636072ead40bd5e506c9e68f542ac0887ea9bc346cd2739aeeb3f2303c40d0fde4a7b364533dd7e4bfd74766e628504b5b8ae54ddb1e5cdab165bd24db181e9f9c92bcbf4ece2b1a4aede597448cd4ec070b69f7c08fc3ed0178469ba75738d67f18632d8e12615b8cfda80d8759004b5c44490d6ae99f539b6b894bcdc90cfdcc7b1e97e5353c67003fc42196b550929b293d973a7bac9c5096ab13a64d2fbbabb4914f5cc92bf674f8a63c2463219540308ea6bb5c68a30fc4ad30a0885658a11f9c6b9556dc2d0f0b1bee7fde5ce842e7ab1b48d0975930b54803da2691d90cf927c66d4f997dd3b90a834ed1dd56048828ccd96d1d0b0218773cc6025e461bb4b0a1f310e08f7d4b4066c0846bee59273b18c58ba82e835d1e5ebe28b5d668c0f1d9f64ecf4c0160c5cab37e3024baffc4cb1a151ffbb24ed0b1af0cd675d04f5ed68cb787b98882723cd4879b96a387636b986d863ff61e283603cf6fc773e18f645286243aed7014bed59e4ae73992aea17b78522ee10b6125be9fe6f83e4a48f1e3f9b44dfb9403da4d3040b886a31e90cee040fe43621b60835c8ad3fc4faafe9cb3e14ae118063048256a283bc55d136da3453c8c38b0c4120c1e8cffccb64419a0cc443086174f752d9a3bf019ac6a23a1786296932a927c595b64f26eb13217cd1bb28e80a349eea87a1a300075766d49b0b3facb21bd6c041ae951238425cc916a7fdb8f3fb36ed332b2ccf0b9d06618d3a668991e85a3e151812f49017c901db9d2c0cc6e4e33d2eaa3f0027e57a978e916796054b083cf8d653fdb99f3795d41685c4bea50b88a284df3664fc835b22426d88528c0b2bd5c42da45431d6ed05ea49450dbe400e6aee96b33a55491cea0d120cfa05cba3611fc336ee9bf595276127cade057ee5c7cbe22a3ce0c88bebc7b91c9169695ef35aabbae90e1a58d292d04e61ee3d1b68e4fb40b0022e03e39752b188e915238be3cd4520bf47b747a75e9d72e2dd820fe4f6b1e61813fef9642f687b14031c2a05722f09285f07e822594d0e90dc36f6d796a3560b77ca4ceeeb701c25afdebb721b584702bad7113d9154fde0690bb2e6725e9be0738b3fc5fffb49a2c24bdd682ceea9e19e33bea0fd3e0981f91791853de77b10a329822802b3652cf92b1f29fe0a2178d48c89ac543803e1abe16910f443bc1a7bd8aa08ffd4cd4d843bbf392fcbcbecba305d77619eedaf8a0de4df990b43cc0a78b9c77ce7a79701146e420e00d9148e8d05175b810b979d0128eb44721207666dbcc7d24695e18aba6937da12f8c197853d3e1ce57610caa39c27150af756a9abbfaa8ac117d9c93304455abd2108de1060a81517c80bf88c05f4ab11820d344c3c6fc6c7802bfc9ea2ba0861dd77525d765a89a77a2afb577f2325791492473d72c4f7ea3d2d7d36ab76522c5db328660a509df2c14d95e31815695531ed4a0035b4400350e559275b226e65fda8bdcaeb4fa55ab34d9e40ac4e0c24391532e4c431e87056afb61e5188e4cd3d74c74cacc43873424aa5a7d1d46f532cd32f847a9404a9f84aa70a8980781db328e2996945c7582351feea208a41330ad7ed0300dcf67f101cbc7039ee03601a4dd794ab70c2c7bc91b3b7b2cea299b88c91a6015905db355e056538655f30c95303aa1554918904d197e3c853d34b7859733c188cb3f84390c7e6e38a33fd52d2afac7a4fb61899d9c2675d8e6df7090abef0be3ce1e0784d311987b1a345c7fbb87d732f7080dc9ca7b5f303f92ba38ab7b7a5923f8a5dbe2776f61c5e6c4be15af8a1e5f0474bbb4482f097b738419c2c96410d0a52e11f8f13756c5851cc42034af6ce9f6ee39cdc48fa5c44d4bd0fed48d7e0cde1ee265fd040afde8090326dd320692bbc1ef326046d1daee878c1101c6ce12c1336f1fa294629468e46f516fcf5df951e9f8679705bf7c3492f4454e58182927fba759332dc28cb6efdec804e13f0d17130b8d3d5246725d4d70224a8f20dc46e11a31ba5664e5b3dfdda2bfd67cdc86a16b250106198c370c778134b842744a737f56735b593724a01f1cf61c2c3b00f95492b300b4f08c6838b97ce916dbdbd9f686f2ef6e64c9e36ae85d02583af22fdcc30755c8679493463ea5f8aeed6ba909f2499c1a7c6271c34188e16f0d72cc21b093f10750e53cfe42cf0df2d809d3c6cd6eb1e388daf502b277617d102939c9c1865afad705959f6e0c4d5a6a4896a8995f25f9304d246b22e6ef0edbe69046ff4a5617c91efe580fdfbc9796678cbf1095ad6eb68b70f3c0adf324460cb586b23a427e24b56b07cf85f7c82fd7e04cd487cffcfb4442613e1555d6b3f20c40bbc1ace3fb6dc8b4637a894612f335e7ce474fd85cf4f0547d961e9b5005624a040691b0fdcea7e5f4d0a10801ae5f7221f2d29b3c45526f255754a78fb32c9be08c8d35f324c3ded3a908ab6912e11695aa1bda4b754b328927f19d8d9bb2b3206e74c810a4ce89ec63a74b2cf58d461b1c69fd1a18f1d967d35560cd66764c517e954c46e95c1df39e17b499d9f3ba701a5c02373313e7efd5b5e60451ae9ed7ca020201f10ab7526ed4dda5ef8485e7845a2af5b101bbb3c0ff379203725d90907fe7558799786919d7ce488508d2e8e66ae1c94307d190a721c1492b3c396a99587f1010effbe38dea52d13ba5b1edd9c6629341f56f708896e99c0d5c4833c8242a12529b70d5e9ffc73fcfa871e5cc7aa8ec60c375cdd18da6d18473af68a9ebc2d0399987dab12daca2f4e4ad6931c8d2b1701a6aa64d7d79ca581ba2dff3cd22d1d6e36db15befcb1ba928e4cf79fc7b50dd632ed43b48dc028463053a6897099d4527303a329dfe3db561d9ce2eca57d96a818246e4d4c374c31ba4136cb4844e206e1f9003764fd9021394577175bf187e1ae61a5c8847d3b3a870a1991bafba2c1e048556c26d7f49a6caf4017d2ee9c577d3959d60bc9570846b02485d45097ecc97f9c04ffa357fa228348f18ca34b4533d45ceb1b07f147f24e9251a968b2a5ca33f6bcd6e33906672488f49803a608ae7e16e7e32f4008e843173d03eea550ae411903939db5296ccdf0670eb9d7b0732b4ba72a60fbb4aa2ab06a3047e5564e31c25af0a3dc3d51203c82db648209ba9cfa5fd7393a132b5b6a0c3a4bf1fb201ac191ab20f576d1ed1e066ddd037d79e8b74ef5239e5c438cab4e43d42a0e9849f844c07d5a6f4a8a03a1b50b7f2c82cd30a35a9051f8e1663e6d3f90cd0e95a5cb57e864d5cc7f0d538de733c6fb5bc528efb6dbfc4a6ac0db1320553ab79faf72e4c4a34c600e0c174456f62eaa00fe11fd8d1781db8674050ce1c3a8ab64419256fc4b2bff00cfb64b2b4a47ac5a120ee70e6bd1c823915e010722cb3ba3551d14fd9f3f369a48bcceb8136502544de78276c96b505d74259dfb475ab72e7f00a295ff0b81c5793104f2dd53767ca02de8919089fce367308d0b53a905d535af27bd83e9cd2495d66ace9d32747274a6b14f3ad2870de7ee27b4b6dd0829a02a42cec6174cb42e2d8e69907dd9a072c8e3f871735e5b19cccdb5d2001d750920e9e8443ed822a9324b39706415383a2beaaeafd9b368e8b4fc994eb78524b257162097264b8575a70ee96a42304eec5703f2135e1cfdbc7ea253f829406a8af9ccefcff7c5bf75323a4f320ebf90035fa51a0eb22c0f667657260ce9560f0addd051c22514bb92328a935d21b68ba4107bb6c7b5733015ef863981eacd68c9eeaf145e9d8ea4364fde2068253be31928346d57d52e33383390f64e3595842dd104260e5b9735f23b0c4de94c2bd982652916ba2f02b28f777c9d703ba62a6ab95d92e75f21ba584bbd81b063c40bba254390e135eef60de0705aab491f120b0196828c43a3d91c2ea0de33342a84dbebe0ed29f35c62063d550a05bcac0a342fa9f9d919e45a67001d24664b571143570fda90a3e195de4dd56274e3aa2f5d874fb76800180faff1cf6a067ef08ab96ea7d0536584cf4a3a84d05642099f6392c99d00e02807546f1352f08f52e5e0b2e8aa0f2abd1b38b93d662f8fb73393b6d45b0b73a31c90c7bd3928bb3bd45534420bcd805e526916b9ddd6c18f21f7633f93014ca300f3b6887302c1ed96e142ecc50b1104c72c275fa63f5b353ec59a75b775e9a819bf72dade87d4685ec0a87da9e74c0aec0ba39affd2571c0dd6bf17dc9bc14abaf8a08581c7dc05b3d58af1cc50fef8f47d9df7a594dc0679402abe8bbc333ffef00c9da6e32df0e37d74ca4af3261f0705066fe77b6abade30f390a9e63b8a9e876ef70c00e3e79a1affce0c312f419f3fe9064cf6ee9a577af4957d49f0cf560d866b5a20249d39c98fa9350ea9c6d9695d2688bb94aba6153eff806673a5db999d63c1331af867f33355f0a4366b707630c12d47d2788b61fba6a81b2f7e948a9df296a5cd71f326083774752b16b57c65a36c792410226302dbf2751417573822f1a6b436d1d8fd147d07ad3f49e0fe5ee5b2e46334348ec061fc08e2d2a21b99ad41885240a8b772f457f96e10d0b5559f7464562a1f8b6f11610a3a256009290478753fb58a462ece86a4fd1eedf2941116a296f3abd72ae3d9723b0d2402cc8e227b28b4801800959be712d777842397cb061e1238af05e849146483b823dfe023cd70f1542e716e36d99f82292bd36085c409df90ae077c2b3ecbc49a841fa1d80631219e55b5f83d44e5175f447dbacb116d00bb21c3d60552a35a5a6b75bccdc046f949d652f924687eca089e8ac2ffcc77d3d7fd26983b60a0280c28a456243115e7ebd1c70be47fb8f036821b881467073c17e8e27e02e9b73b6c08ff1cdc58bc695a425b8da1d37a33c3fe939f654fffb6297ac3af3e6ce189ea59defcd2ab5a13e9eadaabc23d4b59e589bc208b3226ab434c1a31070e99d8f18a7b7a0e5f999473354e98bbcaca172637ca1acb6993bc9380a9139c9c7e0a795945444a3371aefa2bbf05e58a48fe970d66f55d72b25b09e2537334558dbfe48b546b7f47614b4539b69310e89969b519715e6412fc0d5b566eef371c2849526e2059cdb5a63d920eab11b043e2f25c3d5029d2a2caa2525aa96663e631f727f37cfe27a42fde4a760897e0514aafde833c1deb52ef00b0db778e5f0196e20f49c75692458597bd73ad447001cd4c77aeb1bd5f47b6bb5bee7ac6b1e96afd977b17e5b8639b430047ff65a5bb7c09b779f1d5201cb4ffc4cd081a3919d036c04492759773b773f2e69dffb050b3ff1b1de6c17888a0996be30bba22767b5b7de1d0e0c821e58ce7bb6db51a8e37397ee913a38e0ea19053f19886730d3359556e69c4905eaa7e4e4d7c6e3269f60d9a69f06b0580c0bf0677cbf5991906e2d720255cf8524c31dd81c5de3847d4bc65e555c6f5f73262d1a44f160b6642442744e9a3fb867c808b9d5ab7fd31a2125455357aef3de40f048362331bb267ab4f3696f925a181553f047fb8a0a8a7d136026ac53b3f7d6266a7d3d706b54349b2c54ddfafd27bc5ea1ea7d10572a0784dcec811da9cba2f341d6374bebd4d1c0f8a7a243e32a44f01a5ed88558259da5bab748d70bdbdb4b1de3e67e6818742e02040c7f78a262168dace52f02d2f63bb78d121d7e2d0d7e76ad33de9027a8bb4d7a3bea0c3ab97739af422ca77b33accd761a8e3c4012a1f355c0d314795961c8beecabbcd255eb4762482236247f22abc9dc38ed09ba321af3c919cd4681ea4a118f54ecf354f7d205132210ffc4a04eb9b77761afc71f92144367197e349631adf807511eb420012068816a33c4a92e2e7f183b9998602d2545c6da0c6f5a0fa516f79ece772daa6e194c67117ec3e921ac9450516f2ead2165cf555de37919a4f2a86fad62ae7884a73234e43fc24166258a41b90b724236515e9ed945205be51eadff5d4f59a6f0bf840eb44ea56fd4fcb67d82615a838e71834e185e13b4f00a6b7a6aa83dacc6cf1e11d8f2a20e116c6e3853adeba49a3dafe5daf4f9caa51ccb4d96df2fc959f42a9b6cf1f96869baaa99f544392c6853e38d238ff8aa40585cd3bd2702b07db27697e64f3c68de54ff48b64598889fce57efeb27245cce112738a66064abe1377c61f722d0ca0e12d77e2050defd16d706bdb246aa8e4e8af943970bd9e476b1329ea3f647d202ce0699740b21ec83018d2e74650fa899c089b939ae3c3f9555441ee9d9f4a61aa1a44141117203f8c1c82e489278551b5e35d3a6fe8a124070bb51d253a0e83d20f8c577a9931c9c7fe1b9fb9956df6252b2af1b73ad7ef5a8d0424a05d19a6a31a0d4644c5a09a6c05244704482da30ed98dc8b32695474f2af820767ce1d589acba3f93507a81008d09b58e6d3ff08e39a0b3ea930ce1f1bab7e37a4720dcaa4693e6a2fe19e671df1ec5935f59aa3a85b633f438a91e23362b3ec404cfee0df0063b30257c73be91230ffb97ced0396d16c67483bcf5a0c64bd3c693851aa2dc2740762a62666f53da0e98a280c3eebddb4f48c06b4a49c96450844d867d801d8419a83a7846e4f8e42dd6b6191237154354361bd1f17e899cf6c2adbe46db102acd706737d0854c556b4c80a0a8f2d54bfdcda3d5aaa3e53ae38a0a7ca396294ba17d9d7947dc6641bf517a5b43c570862ba97c14d5f9e4db3f7c76c8ffb43ea1e1aee06fe1ede9994d53fab4a85319186283eb9c9b8399100bb4c49a171aff6a004190b3212177390040100517ad2ade1d1e7e833134eea0f4ae4c803ee03f346f4acb6a1e8583fe140af9c8cd4504f60a8c751925f0a929887ef202465c73087016d017c33a29e61da49fc80cd02a85c02dfa4899bc7410c49b9c085a58be8e225c9344afa8e973f5d930e08307566c926f0e98f36daeb26ab3dda0da57459213fecb7e88f9e7abe1b7880a1398264bb037ddf199a54075c21bc78941c1b18c1f46da489a213975987b97eb86090e1321f540106a20079c64c92db8c9ee9099d357f4dedfb9ae99b9afa297ac051ce16a0851ffb5353fc0f25afb16fbf1745eb0b69e2b6c8ce13fb7d2c63964b847d18dfa0c1d85649bca3f487771497f6e5ac5a6ffd6d846a204625bfdea0be27dddb94bd95fa6e8be965ce8c1c06e6ef94e69204c72b5a0990eee49f6ec8982e65f0a0be7044a9a1dc4afbcf16d767950ab2063dd6d8eb3f0398d2acf41b33183daa5d014dedb1f44380cd420de88deae4e54319660dbcff9accb56e828fde26c25b7a7be2688d172803bb2bee53ce86a8a534c1235bf9263db9509eaf8e3569570831fca43029dbc956d1a922c3dc3c796e2252226d458e464823dc36be663d02795df4d2171b92b8e6e057961fa7c1e2d02f1ee7af1348fb58e5df4002bf1d1513a303722d90537a5fa5d8615817339ff69fec1104c4738a851cbb6428146c697d4b86efc20118c43c138a62f5b96a2f588ee1dee18570b91605a49649fb2560ed28fc04894d36f31db8bdfc790690dd0d020cece80f8031f82b993a50b31b34f2a68e42c5bd3dc83078b3d6579c061f104f7c0969a13c17e39cac95802363aba3017da28bfae53878d9998f7b83e06fb840fb63f290bf13b48319f0a12882dbe773adc909c4086a6eec55f928c49a8b3d534b573e40d514bc2e6ca85e21199d109e5272543fb3b0898cfb97430402d7f0a6415c71c0a81744c29fe1266e1d3cabd7ab5230c0f36ad67f9c0c7a3f59ce8b140461e7661035117154a6399af7eb332e332096b16e0f64bc156ff6b3c66090815e1968e4f08fda320dd2460288accc018ffe22bf4d383933f8f5377ea195608361b0a711f3f81c6723ca075d52b66795fcb5d1096c37f7fc54f91132c7786d9b7175c5e321af0f9d3be516fa11f18639eef75072f77a5bccaf1fbb8933730d06a9dff9896a97a946093342da2ffb031845bf43e236a41959bf66660081f33bc6a835b0d58105f2cf3379646d979daaed83bb453dd12fb03455dc55f2f4e191991ee849bd24204f670aecdf38e481bee416da3c843c4f980d6d915a74a1ab1971a0908af596209e8adc538f9859378a76335f6d7394be0db3699045090f6ed0d6e04dfce5b72e07178edf0e587fa5093fba11eb8ab864630d537a07a8a3ca4e6cc0791b1ec356f7563e4c8c276763207ecd1b517942ba7229a239e8364747bc75152a6fe6313cf597878fc820e94c22479901a361eee027c07905e4e673f9b3e8e52d6a2ca64c58cec2bc504717c2ae0abfe1e37eabee6c3047a6684f9cf466b31b404902b18accf1854ae087178357a7629c8613d0c177f6bbc4a40b903b08d330ce27b85b8919cba1349f058d1e1fd0e9c6e1ccb0a99fef7714191db89701c37928108271264ff528beac0fe7a167b33fd11e8680a19ad7d58551aa8ffdd1a4c2a85ee07acd7b116f156eaca7fae1e635f58796873058edd56f05d3847787ca771795f776a2e25188302b9f3775e91010cdb71d5f8866f7220bda116e3e1e2ee3e94a7c7a47962281ae8f804dafe29d8464a4031d7943400df0d9bff6575627116abf34edb43891dd12e52dfc0be75e0aeba34d9be493989355e2349169cd915f4e1d2331ea7e1d26212297c93fce05acb8f8a32f7bffa3784d6c7cf0917c5aadba40884a590306b6916ec20cce9761592a827eb5245dced0029de9b3526a532ee9d2ae566d75ad0968c2e3650cb3d244630c2bbf098f826a40cdb1c1d2e232d8f6288367b33c626b81c19b77803485f437d52b283a61975a2a30b4b3f357a789d1a679f23ae55fc96c54cd220965b222213f1c2a998ba1d88dcc669ce725121cbcb1845be333808874f28b66a3de7e73e773def33eacf26fda155121c16d562f5148271b440e04a6591483c77d751204a12b4996620a18bb18fdd6d5d37becdbfdded61ae8c80450ed2b2ce144462ebca2177bcca3b9f51bdfa02731f19f3a9fe48fd325e3644915367c60273fbd6fbbfa1d697a30f315c26b1867b1b5c217686f09032ca9e52159bf50d6371ccaadf2eb1773fa1b59a9c9d3bb4907ca3fd4938f0d377b4cc833c24746c6b05ebc4079df9057f8dad5c55bc2402653b88d5803f7d039d743d675a51b7c345cb9db72b16803779cf6af934a5af715bfa5487510ab39cb7ab236d0a44ebf136ea8a27497ffd1c7a8d021eadf61af9dd0e4cdf9de7206ae8a3262cece9831e387af8eb868907022001b6fc23e4cfe7d6a51ee9ee1f94083e3d040eb8d52b9bb50c165e8f2675247a4ce1ccfe76629a45c52e3d9f548f8e2c3de077b358535fb8aed9cc82f2a427c0f20b153adf4b117961431b97689dbb86588feefd4b47a719c97ee1b6852466298e5885f172577fa520fed0172587930bc02286629da9ddbca9ac1b169b39e8e56a4630e306466c1374ae8866dafd947736ef5b00f985872224e577dd69fdbcf411e12191b6d3ecf929a375b5d8a7821eff34bdf36077c4c118f36d269abc758b373ec89fd6cbc838777b1140eb4fe04d06e98b4f99185d810725b84f4874e131c09bdb4bc74098b575d4fa70d8acd6f993f248d1abb9ea2d6272621091daa7d717c55c6737336be0d828a454d73340534bd3365528018391d181c4696bf95c7012cf8f80ae1cbf0d73f1125c05ab2d3a07fd3f210fbf94578c863a1071eae100add2bd8e90334b53f453862d4afec294df096c1990da75bc69a9be9c551439b805e54af093d0f50bedde4969cc3fb7048064c4eec8abc3a5d436485df8f67a2c5c74af93614e87739397fcd4eff7b82b82639b9d86d32918d98362391ca2f0192886ecb7d7c52542adc9cb29f5bf2f644d867bf326ddedeff6592b944d358677e8d39ebd3e96d3cb26784b010e23b4f59f6831d393b88a7ec4c236d7caea686ce1c86dd2d3de2454bc16c6e9a08aee57940187369b526f92bfde9b180f8b0c2c66c04b8863c06964a819b8471d4cace1cb71e754031babf1c89c93a1eae8fff7bc7810b893866ec8a629b8a50f33f61ee1c05d6897bdecb408f463fad3c37655fd8735283f1e0fbf5841321327b163484d0e8166095cc2d4a95116d2d2c7095268032e6786c2db3bec54c52f495944d77eae07d8527c38d4088fe850939f99a889382c683d9e9fbc7f8d1e46c677c4cd4a0f2f732cda0601494ba6b4d5a8c06c97bfdbdaba2e4e7c4f39de363f2d2f2eab6d055b212c4222fef628d237394636d832bd545c0a27c56a5bb9129316b462cf1c46077a7339a2f8edb76f025f87195fe676d3a54afd47bec0b60cabcbb609527aed751e2a561c020e3f287d06a166badf2ed6f2efbe8b947ef5a3016b66ad7cc3581960d637aaf980b71ef26761e88e7259400a438b972567d7eb322ac092a405834f2cfc8eb24997f6e1dfdb41304f51d13e3da51cb6e608989f03b83ec8461e44919d816e5be7895ef8fb28ae952fd2fb7786f67fe3595cbfb5b1e27557365bef6b7a5687f9224f8b9f314d664362a2b8e532984df2526eebd74003af748b167a9840bfeff82ffee0d65796678cadeac059965b2e696607def614a91b54d99d12969888b868d1b09753032e2be037f47ef81d898638f4ac6e066bfd58c6f474829daa43f984ee4c77b19629b2951b2cf48db1764cc62ecc74391106cc9629d82461a3507555bbd0d348065d7dead9e2e9eda3f93f0c09d10cf1187e67047f7ec9e8612ba0e38062600be778837133341777c8b76fefab5bda43fba872f20c88292cdf9c463426c33a88f9bbcce15d7bff17479e13e3a12303abe475a3125a30c4b961b44ce08e698d39a1818bde4ab3a7e5aaba37633eead84619d725b4f54ba38b1bdf8ee45d8c7448b33f2549956c95c941b830d60ea605d34b6dc1312018fcf09ae9e3dc48f7b8c5246a60e8ce9247cd4a5b25a4059088c24e88dc73b1b99e74378029096cb85a800fdce8e6e9d2d639d650c3bc50063b1ad42c0a418c983ca05861bd588866d2251f8363ea5af6b5a93c55bead9a2f0a260d038c4eb54d344899ae1e9a3fe874def02eec0a34118bf9d8f6efbd8f53ec3c70a2da01458b538b9c4cc9b58d3632273a7f42c85f530a27e5ddee9bcbe76ce158042f7ac03f9fc490050047ba9f70e3c565835296a1ff2697cc66142e3fa07060d27760543b7da6570a995e59ce51c563c64ef2c76d499a329cc4e92a87589f04c2880bf6727f2dbc722000a586d1fdf04d5129bbbd4ab8e3d4a816c72e5b3ea71681a5bbefbb5f1afbb4f92f38e24ed42e325df89ccbdcbfdc93f32878e7330fb621ec6db867860b5771469ddb08dc4023ca4d1df8b0bb489c80f710fc2c1901a0557ac1f8918ceddd2d56399294432e002497186323e09ea508465fe20cdc6c83b864f198641327fd2ab7ef2a7ed0d23057c145160de85d58c1520f3ade9e7067c1450f29859ce8a46bdd683756dc4f9a9640d846e8f7e326b84dcd86ebd9fd79b4ee1021501e3ea6850fa52113b0fe06d26adf0bfb3447a2fbaf7344e8b5940e9de4c2f38d5421ff68cf93d9a5c5d7b13192f260edf7e59ff917c9e938bbcfe18fdf496b1509da45f367e3e76772760ff5bf54f9b33d51faa1b1f2197a58816c22c98bd01758740f4ce2a3d2f6959911851b3d4eb93cfc878eac7d60bbd4f42f7bd6f0a6f501d81f0ace803482dca7489db3715317b7a29eb8492c4160561cdc2c55fdf851473c04f7008b00ff9ea74fab5ced5682738ca55571377d02a62125d486912db4d012649f4871ce886576e2a158c91bbbd6c85fadd281c7bf02f0502355f961f280748621b62cef49cc6b07e783e4ca608d3d069e19a54a40ceb3b683832f4ce43000370849ac22aa5b9db2013408cc39affc44bd5769a2735cdc59443407594605b61e5a60a257f0332d8f0040f3438fdedcd122343cedb60e35d321b0f524982ae17d4e60bd02d00af23f03d4eeb24e1d9369c06160b107bcabdb8ab9fcb4341411b51292ad04ce65479628e1d3532565a4abd6e92b0c067ebda945430dccaa66d31022b63d06706b27f7c730829ff7e411857cc3da5ca1a86e59fc7d6fdaacd5cc2b32b8daf775100ca2a550119536cdd24e7e03fff29ac084cfb49441946f3a60a0a146f458e238ab62b5fbf29e8315e2859c6626a4141c13f0dfbc8ab3277feb00ed18557b61b4c4b722232bee3255d23b428c2565d80a6d7a361f7eefb1e4e9f072268781960161bf586e213343dd24c25b7afe21704099615001da3c33a3e99ab111c66e8419cd7a256afd506186bab30ca3c4907b16a786ab004bfef3ec7739be2f4674cb59be5b8ed83405cdde700b8a1d4799b4b5a997682281b5cbe75675e01cca5abaf66ddf2df6b3c2da7fba11497b2cddc4c1d073ad3fa8ea5b432b6badfac09413d264fb1d50d0a3d914cd51af384b5ff7c8ccbb2b2921f616fe1d353b2fcf0c89e1ad1fb42b2069c4832a2323bcf3a1657c5f95c00beac7c7c4435a24aaf9201003176f18547c12861d11be1a6ae4d8e6f65afcdebb2fa1c917f3a8c437c9c90d07beaa6e3e4c19a6acde671bca479a0000b2b84d60b3ad5db001e9e49898d997d50ec66d5ec2600615e858cef698554b9f1356c573d61f1526a8c6439b64b94dbae8b4a9b5c11e0131c1c1d77c789252bf178f11c1eb30ba4902b246e7634bc6643c798dbe0c45c96973bf97251d2a515e3d5f7986a7802c631487989869377142b6525239dbe05e46f94fa83c7c2bcf896e4ba6e3cf6cb4c56145d5e852026e573e031f2033eec2e84449766dc4ea5087dc45d954f535415fe532b9c47c3bd7c7f8c513ceed1dfa5ce4b98666f988b266da540cde537ed8fc132840dad252f2053e6ccfbebc73492ad07ec3e23652ea6b28f6aa29e34f1067e93c7ca82bf4558fb95b06d2f215638ff1ffdebc8df992ee146b036e2391f6191b2a651e84e09e259382eb7735bd1a4f89b8d799e42bf8bf9969cac69e31321dc881c00845ddff17f668c4ab6235f1e1d3ba6b0603974e06c6c3e0b2adf32012908eb669950f0f8a2e9f71b63ce0c539aa65994e101fed67479ec7689a174bdd9e7ea7f4aeaf9b2fc605642be8cb6b1504da17881cf295cba2e48ad2c4f30b8a72ed590f5956515f2c4ede148848f6c4c7c46850c30d610b9ef73c7b4a657b87bf3ab87abb684a06f61c5e8257bc6d78bb5e34932dd2230a262bce4484881b4d47531edf0b076b4c692a67644cbbe99814750bd9ccbf6a98997c280795be468e8a8482f28afb138874eca54110692981170c5736bc22039dd159a2f4202ad77ce2be50631faa35168463569e185302789b4bf75ac4205502b53c793dca15a5e0f76a61cc8546be9c412ab96201cea50ba3a8a098604df5dbb0592c69171a8d7d0284de3117733c1c6e7898f7dbbd21e6f065d9e91873e6fa7dbfec7463b5fca9a962dd76f429769d085bb16cbddfc776e39a9ec79e10e9cae8e9ac26c012c7992260d74f56f13a502c59a218eef3fe77643c1870b8e8ebfaf591f9caddbe837107e289e8ae9f55b77d3b25c1125dfb33d5dc3f55034122bbbd9d915bfde2776dd6d377f6db90dd6a0ad7c7fd14361b323c57091a7c1f581e1212dca19d07a7dd62383502519ffea383a05a8ea4326983d7add149023adad7efb708566e5fce37423bd3e2ee0c2e2bf2b69343920db4c6267fc5de988ec9d7f13ad7edebb97e11d6603905e3790e8b361eee6a98e15214658fb6f540dfc23a9bd1de54a86b62a2d442f1342fdf2a967328d0814d4ca5397178a33b60b5886f9031573dbbec53c334e12b39f8725a88e70b22f6ef071f263663416d539898940defea7b802689c261b752d1e49e56a01f71d3a3a51e27a4c111cbd66e3a237032cd93e12ace6eff48f112bf69864d8fe9806b218cc99c927445a6bffef63c23d4fbd799284bb1925467c1de64931794617fefe0ec4cecde6c06e8eca17718dafc9aa1373ebd0f2e64415bc030e5308c61e5a76b51a8c254aae39c5af85e7e9ef08cbb9ea8b2e16afa973e61f2d3dacbb139848ca58304c4189c0925623f1015a910f5cd0dbdd88818ab8b2797d7d60195e165ca5c5ca38b1848dac53b1e5e55ef5bfac4f552e7c3e81e53c9403a9ab9362d8bd337db977b714abd9db6f8113bc4dfd335be1a98299b7f49d08e253aed78ae338654b187352abf899126a71011d7f020dd17405affe3c460106b0e8939ba4982eab3156bcbb3956d1049642d0e84c75dbf4c905faacfff0f81f455ef0ec04f8a25e624b11e8d287c816ea06636e670b8819f647e72ec3cc24916c433df8a989bb07a6d7abb7d3fad36eea628ce4f03df8ad2597eac376508837bb1bba87ee3b23a3fb7de70b63463d0de1b321b144a868873c73b5b8b97a2d47df0b9b79c36ccee6a51fa50b71040a38706462f97f351d16d0e639bf055ef01eb3481ef86ab939afcd7745829f2490c6ab070f081141054ed35678f0e8df33e78fef27145731fe4d8936ff178d2d8a392fb841491559ac0ded9724dfcb956c696dd518fb8d46b05da3b7425d41c04b2ed699081e300b5e8c834085cb7f59b7ad91cde465a7aade60880aa1c7ba12a08cf5ad8a17ba20ee34f9bd9030138ef7ef25568551851316ef610a62060da1f7678916364a5500a316539213d349933e0d991ad40f985ce7f0128d22c6e7c06ea1ce308a1e551ddc71e0e49ef5aaf33209fc3d3ef179149ad10cecfb28f9d31b52ebf0a5abeb98399314a3a90268c10a899b0c52f42ce6d51ca077c57663629dfbb251140a102912289b91bc41d8ab3dbd8235300f83739ed2244e7a34c4395b265a70c99728974526e920c690549c331e04a7fcccac331342452e04648340d5455045ad1f37f958a359d7ae72f9d5430f3813e1fe69117bcfd0ec9f2c911ff656d07c54e0ac2bb17ebaae6ba3334a1bcab8985e2ca28b7274b71ee692fb2d4b9c04d6894358b42a2147c0a3ccf9879961a9401a86054da17e982dff9541743e8bae176132220d14f46f779b5d54527dd4fd99b580713cae83f56538a9390161a381a721a06931b60e8ebbeb77dda8f93e7aa1630b47d541d84493d6d46b74c98954ab0b09db70813d1ccce1db9f0c67eee047bc9d1851f7672c850084d0428887ddda05e764d2ccd067dabf175f1f43039ccd0b99942e99e6c7be36a03ea0c7b6431efdc784029230694c581614fb12bc8e7b2abca8e373ed4f078e15c235e78b5fa062d0f5fc88cf33a7fa73d83d5e2b6400f08295f9462e74b80aacc706fe68dbb901cf1b4b76cf03007f2f05e04971133f0180a0edd8e9ef28490b993b071419074c58aaeccae7c163e24c90c93d3b381a0b8ccc71be783ce5f18d912aabbf23c03a176b454177306299fb9a0dd9e4f4b7a01501f4505867ed33cc31245194461d51d7fef2dcc0b958d7679c468a48ceeb095ad5146d47705083f0531ac432d92fe2f203da69b52c455ba0d0c768cb1aaf8608c4c6a17913f2ba33c7324bff6daeb60317e88b3e1c5942289c57e50295c042d569163fbe8830db85608e91d3064e61dbd5fbaa67cc7b339b67177cf9aee6ddf0b462e2a125ce7c34ef8a0b8f6f34abbeb5ba77c66593fd89bde5d832b6d68e8f688ef5cf3b6db28a73757df266be347509a18595606ec7b7ad8b9cfdbe1c71eaa7b9e17594eccdb29fe7e65759007fb5b93d662a7c6caa7a8fb352da9f7e1df3241ca692f4fec64b0beaffd6a1aa43c4b60a3ab961c2431e4f46dd8437ebcba29f3c6b59b30e791405d9e2fbd893a29f18e6022d82f1789e9af6e393795dce4ada63151e753fe1175101827f2e6861bed82c7080489cce0df03dfd7702e22a74fef853c2dff3b1b64c534e18c6248e3a77d83d9df592a618b38a6e8a2beb9808710bab7915399a7c6149af9014d7b828f3755a348bd3ede0c33e9bf1378586e22c1a689c621e2443bef1a9e7518ff7246ada40c1564555dca615c139c99c9bed45c73d31e2cb269c55312c16e2dac0071ab30bc0de4e2b9d01e7966a765eacfb82cf974aab65d8cf9525e9e5f4763437919b1b729d9b9d1bfe4f8e6b9df9cf99ca012077f3fd42fae6205b0fbb90a61919564e20e5be985df5ef095144c05d532bdcdf1d634e83bde3b6de2c6fdba326e5fffd32249e5fe767ca26d805984b262f9e4778bf2dd8ff03e4ec0c1bb52b5ef829223013f96ae9f23e5fe4415038f5549ceefd4ef3f15a5ef8480d7af59f2c6d970cb509c609522f022938dbf2178371d8c62d3aee00f2567acc8565a83855452592cbaae1c3fbb732cafdd8facaaa7a6d661009e49531eba92d03035545baa6a5dbb4ae2355e4d8cbdcb2b0b086ea23ce29171308a50feeb5dbfd1d3012c2a06f1f764b8abe1c1ec02f1b94dd64e1fc6efccf227910b6855c7ab2df617e3e10257863d903c9f7041a3880fecc7c7efd96d8a2437bcb5e539da7866a69bf9aada9e0ba14263156908e648a0aa32a5945199ce73d8504d491213d07e4b9aaadde95f0b0333060fa6ffabccb653260b039d4952efe8115355d6bd5130591eba9f352f065bddf0635ae5a11cb9855b80e4f825262a69deccd45d065ad273d8359a29f27668b893e49cb83d2ca65a578fdd6098b992c9a95d9a1d98d6ae9d61ef33a68f6f93148378fc86c5639ab16510096d6c0cc7da4ba0d780ff1b8d3680b1ad275bf0a4dfa821de6febeeb44d5d97729395980f46d2fb1af3c59a1eb0ea6d981a82a2dbd08c2da238172f12b7d25f5f674ddba9ea8dffa2f9ef694855f6e96bc0c436df98bef3d2fa18c7e2e379a2a313952a245ac1dbe5de37fd5ce7e53ac68fc796b7b4b41040a5fdbc677398bf10b3a46f10fa5f56e3875ce87c1b54f0213682e3dca2dee6c56369f31fcd69600bcf1714b5ffda3d97c0249275788f3cc08703f08f430cd11917874ded87baa5d68caad918908b3efa10de2975407a448e49f8db4f919d14bf44cb988336ebea4a8a33610fe492ae0f685f7885de07fcdd8e19b7350347798feb000fc7983d75f98d043965f0ce65a87311d2f4da83e584949af49c57b3402a8fdc2d5fca7ae316080d91d924f43dfdaec1d6cd49e9a07868a25155e0c85531870f94b1de80881d7cf486e374633b4ad0aa07bce301988b5e07f0083311925a25d060f0a00316fde1ba99bdaa850d6de6526602a37a8365851a04fe5318b69bd76c1b260435bb8046c74575900521196447bf65f4a0a9de7b11b09da3c8cdf8c2a7efed953046c18131d58126ed59ae3a8308c18750eb9d4e96ddf8b28e99802a18a0a0fa21a7d1ab25aea3a2b2259381d87ca9f3f83b459fd01fa1ad94bfa6b5d2a157d8dd9cdb1326c0edd90fcbc57c0db6e09c42f1c730f7a14501757d35e1fd378085f2b903739db061176195619f465d9e23854ac844e2fa212b901843bedaf6d02332444af027370dc5f9e3472000206f5e8c087718b6d9286fe53d56622208297749d090150bc9ac65db55f0258b32a0f333b66722494bbb4ced9a6eeb79f4f0856356b275b2596d03f6a5e6edd7f407ce1158d25b73aac17a0131a1ce889597171097aa850d9106db2e11517f6dfeeef73c08dabfefa75e48fe43c5d9b8b89ad75943bebef6c861d7ac3c1e739186febd578f847c10d6f87b6845dcc41a734a9c0b992cc57fe3c1bd20d2c55db72a6956939424a5e616cdeee479ca955b2b8d7fe301f8682c1a806eb97fb21ef1fc8be8fb6434a820bed8e4ff3f7d1ebaedaee0ea19e7f090bcaa64a5178c8442c44f826cb48b65c5f06872ffbab7f29788495e40673e877e5f59fee25962880739330c3d68aaacc318e19940793d1456a868f61388f5be701b5c12855c7df3723d2d074646bffb894de773829606a4913b7c90cc1b50adde46355f04f480740330bbfd18d29523173c32b9ac4c628faca74cf2a93d3b078f421b43a69c3233ae6c874fa08f7e232456702e679640461a97fcce234e491b2e16db25a46e908cd5a88f8dfac7128497f4c4d861aac3308b610411d3f58c4e305cc690e67944f8621ea13827dea44c567d6afd04125ef084a774833dd54d7384f917d16ed8c58b2e590286b5cf32b07644d6c60913992cf1f28288f710cea404dc3882cb576324ac82f8dfe8f9634717029d8e376678354901f50df37eeb44ee27d967b6bb2e50bc162c254308799f455d0ec4119248238d64d31543234277b7af3ae77dc4e2fc35e4e0c0973003c9fd1dae0291dea1059b3648568d632b74ad780379d4f97c9cf2daf8a02947b91b482701c529a213985cd3ace0d38ef0ecf3c1095c63baa46c848d97c651e9b18700d31cabfd8f4595dc2bb736bfab044294015b30c5c472c437b976b9182c11fd75522a852fb27c2a23342043e42a41a7fe20578c3813611f3961a582632703f4321301b8c60459f4aef59a9715190801302556fc5220e83e31a2de6c25f9aa3eb85e0bda272acf4831347f179a68c0c20245658745c5efd0f4aef120181fce9f86e771eb1b500f2058413bfea69f14adf267137d5f041f95e807f91c7bf3edac905731bc7c4c9ed05a986deed33d8936ec099b2d1487363ad9bed5ee109c626102cca42cef54d448c33a09d0f9763351d4bd1b9d936c33b65642dc21f8a4ead1743e10b29597586334bfa0bec026702dd91eaead34e97399ed7be7c975630ee6c3322d3700e30c88dbb0b448c78e467dbfcd2aad7d5fd2688e0dc2ddfa551063257e23244d468054bfe65fcb6ed35b4eb34d928bd9570b6671960b547c18b3ae049b00b055358218644432724f74c10d1f5d9f8fe203e79db2a7c8a70197740629355cd49a8c5a82992715e8b08ca83b9bad852d1a8355d5e06da88aa7e5f1b6b9c9d59dfa209c04ffa6f6b4b8eb5d9a5bf2f42cb2ac5953ba28e185f462604ccade98c4efc7af007d16fdf89280556b856dbba4fd0d9fb0cd0f9152a7568bb5e31976a99a3002af190fc9dc207fcfe7a9c3cc5f85fb1e97ec91888c33dbbcfc7bfdc7395dbfe1b1d87e7db32063a3e4c730feb6672f278a84b47ed66f64a1b1670a172ec8248078f1fd0d3362453d2c70f70b49210d587a45c5163988cac2759a300140a3f9ee6ef94c210c21bc233da6aac26370e22983a26787abd2e2b82e224a17e03fabaaf8b33c14db8899de973b85f334f22981f3f90817d7b160245ff54aea8b7a418005a41b864ac2f7c95805dac4e6067eddaf4064ca316e50d879a54b7b19765d2be4d9f107df8252277d64a36dd31512833f6b7b755d634372a73771a5ab200f766e2e35a7814c4748ad317de383bd1e3fcd4c572eac9308f0c81d5c198dad9990c25fd3ce1d21e5a79831e8e4c905703144ca75b8025581707776037f2bac6b0e255be4cb5f9f647512de47b119ad1e6ef2a509d9e4509dceffd21a11f7f9d57fce8bb3e3583826e86f7e8d984f876734391a97fdfaf5751df3a335fe4989bcff9cff936dc2e2a3adfd2568562adbf266321ae6759af670dfc95686594fab14262d76c98523bcf18a9cdef92c554674842be22efec53f790d05cb4aaaf1d4fc3238bd35a58e24e8b83decb5b4d4bded3787a9eb3f878ba03b46b24091a08f73bb92f990ddddf341caf09dddde40fa16de725d7c8afe22339a705512b8d50d01cd9d853574ee4d4017d8ed232711645e9e740e1b0613e7ecb92c7b579206db0f08d0849670a5c3714739bf75511bf7161278376aee1891014bc7df33f276a36b846cceb1429367cbd570758bdb2ed5c6488d9587df732fc221d5b594bc34e6970f3695bffe38853889ad9d12989aac990327a849f313f70f6df490bca2d3089ee9f51783ead7c4df87084e76c1b2dab2627e23745099387158a544316b3151826538736649bc52b1dbf345c9fc409fb887c1b57023675eaaccccf621bcbae7e646ccefefd7c023342f02e46cb9b6c712a72234ccf3f8ac1b1876332d6badf0f31144e568b92585ab33b77f4ba1cc41f137bbca59dd425fcdf080ad67e233e2e0b57e57596c6077aace0489009bbc5a512f8b10096e33dce97b8b918bfd5faf7ae8d3a7a3e8afdac055fb5f7bbf46d556db3db5b634b33301191ceb8ea3f13af16926d4e975497cce443ac84ffced2db71a5f848fc6f6c5669b9e4ee59113581f4d51b5bb935e9dee8b840119ef44997754548270199569d817738f557d2867ee1ff5b1a05ca66b9077cda550ea16ea9dfad430a27020bd6327e33daa7954b82c8a472d888aef17e3d96f6636efb1d7da1c6de79fab917225ceadc2dc5b3f3204acbb88f96015afeaa846208a194e0811c5f12fb1c2c6e80cd39092190dcf912e33fa2a1c3244956d2510da9a8146e7b7b61a47761b0e2135ab65104ded6d164e03d93d12f8570e4eb14255d67a8f3734cd795febdd64d391bad11e931b9fab58e326a0caefc52b2c19155d8c4e5bba6b16d9a96ee6a413ab20e50ab24ce5f778dc88ba66f80ec8466a0ec483cf222ea8df94d2dae2affda1d6b108158cf60f90bf23085b07a21516d2cc60e85df5817fe4220d3f0fa241fc1d41876591a6d1748a695c29eb01bdbfe2f94125b7924d823e17d3f0db866b421642341dfa46aedb5a8bfbc39262eb88b5d06de7ba68e92a478e5e00a5c8f5fe9a471bf1290bb9961ed044f4002fba38bab04dfa5f63000a7f609d4554102c22421eabcabe3cad2dfdb9ffd0a5dab017c2bf8de0d295a4fd6d2ab253cf90d6e3a9f5af9f960aa95bf0248213b7483f4cd23ba68cac4d349c583a679c19ca2b1377e8bd17e50bcee7cbc1d7acbe07810d104e31ed4142c4ab73797fc8f3755d391cb8b52835b997d9937663bc33c5eefedc11f88e8c96e639008ae39f9e10a45e768b0d93be302765a1e221964101688b966ed46fb541f39bc083c58514eaba8b09b647dd14c37671ef30167361dc3d8d90fe52cb8002dcc40594dbe0cc51593af25d2bf5c6002155a1a3a3b8cef3ad0b3195fff01e478ab1b8cb966d518e1c000efe2b34d2107cf1d49a5d97da5212fa2f7bfe5a6af924524a03e26091dba958369564c3edc294e14d10b55c47b6f9f042de254a2eb97684ffa411ed52293cacaacfba7e8f66694ba9555aaa4e7f89cc93073d51092515116fc35c0a5fc9dbcc87e9ceef50696362e3f1063e79f570ca46668614575f4658ec8be0983531b1cc9dfc2d9cf79fefa816e83692b49c99f54400abb54c0905358bd595684a7ed6164f0076c6f0f69d9207ed5df710ec284e0117b4fd88d480ea1a4e4741d85556c5a5c2fd2e3ce57cfc83df8db1442a47ffbafa3dbee520b16e0c7a9439a068194e793dff2f070a268049a04536039c1ac6fd652488b063049611ad779f2f1347fc1166863682c139eb10133b3a35e9c9a418cdba047a54fe869a15bfe7b98b5b6d65ad0326d00dbb1d008651671662dcbbfe99d2d46b4fc06639277246a0400b73fe0f7912d78c9766095d21382653ac70c8a0e137721b74dd4bb63d5271340f11c53e3c9eebba1ea73ba6e1c7ef57ede7fff06f8776d0c2c4f29da24d67ea20f8316add88f0d8a479985a70349cc93aaaf2f5fdd60fb352b4db1d69362321abbf0c45a046e825a3c16c826d62d1c966471b45645056eac65775987329569848f089eabf125130a51e41d19a476bb611b536f65054d0a38be0da54000a55ac9bd887754e5291e09a0a10f4ebdc0c30401ba77373c94b8654e06cb92a60e6a1940943b95c8e5654a09a3ebe2de11bff4ba54fce58a6ac1da8372bb5f3683a3ac1a8c4ef31f0c2de9e95c1283f95d16ea289b6807fb177e940f23dcbcbd24583f2771cd9df68601a57f8418a523bc4be6fbffd5dade5e6722b46750eaa97b41b7647d6847ef92f70c1740bc78f56b1ce1f05a5f7f6283f34c03a310b8da0f57b18c3039f491d79f1070b81c6852598995401af543f0a6f22dff1aae5f441531cf24163fca25adc6d651ed3c12cd28f2d949ed2405bd65cacd7ddfb10e169061529f65ba53d21a15d0e07bc2eefb3fc1735dfe5c8b5755627ece840124bdb57743198005abaa80854a5f40dab61b300ed011602fa1fc18aabccde7a1d0858d21155f54ceac884a90ac82fa1a162cdae8e24dc2392f20dedf8bcb1ddb11638aab1bf768448c79976eb2f935f240b4c16dfb08b0a57682487713f23696ea49586d36f78cb01ae12ca360f82e803aba6a2a87a14a888bd95a314deea03fe50f16fc9b3b786327d87916d091ba768d6f73a08e97f4a6e0c5e4add7e8a9cf5a3505c0b22bfd9db7a3f2fbf4604d67fc26fbd241cd8853b3ef800bb31354d8e05cb495da075bf40b04b0158afdcdefb87e8cf6a6d08afe765936e06a850f15a84a19a2623994b8e945863910f941166791b067a8d3b2d7cd7e9869b6f07109493b2094b98d8512897afa3f01e81b049df6b568868be463c30031126e197f3f96963d2cfe7454f580878ef811651ab02b3216cebdd989724cb348f6961549f87d2f94e1a0d2cad51c25e586239ad3f145a0147bb694440a74a83b9ce413f404341f7414d16dd34998497a2abaaaa1bf89eeecee4f4a350c3412f4bdb4e8ac398ea2c2883a7c7ed3b2fecc4f25d602bf7e0f93affa8c5ec531605539d9afce2946ab2a0458b12b1e62aa822258c809112cf206a35f5a5644f4b0ee98d548d37141b8028c63f283def795a03eb43a4d8c4426ef7982b3c4b84aeffa64a8006967766eb44fc481cb5be269e7a124639696106f311cc6c7bd4b626ced037630d2d0b65de3e73da259c3822db0da586e756cd256960367cb3386387460360d13482dbafb09edc17569e2e4cd867245a7b3e10d5a986a59760c7206357c53ce8846cc7d8ae3a4ba3b6ff9463da19804d9d7585a12b3453fd2ea8d216b77836f5a533999d8ee8bb2c0cf512bbcc4fe24e7e055d0edb65b516ef6f13535ff955228e58e965cb6207cf15e710637b5dc14e81d9bc6571dce189755feda00e22103ea45653950ec862645f04cee192e2918e3ade2c64d3d7064ac4f0847384bb9f373f81910d3358e5ff48c1e8fccf619348100c7d6ab7ba9049bb23c35628b4ce6f197b6fa58a7c3cf95e7392b98e89bc17d87c2b26e6c52ba60f66c8d3e32a6ecb9b4b221ec2e337834c6dd75f526a9b7bbb084f820784eef4508dd1ed904803056ec8b004c66c42db6ab2f0207d7877b6a24132dcb59e17d459792c8a368294893704bff1e07ae3e66e7e6138d1affd22cf132e0355c88349a6ee8fa78f1eb88331af56bd190c576144652819f3124af336be9191efb0fd58bb9c1a1bc296f78da6c01b88d6c41ab7ff7dbc1810dd0365133bc70635dbd1156bd04638850ad2927917d4c750e608c3567bd0eeea8aeee04be996cfeb5a56b0c3825c16af7b9579ebb0fb7581379a44cbbf9425fd33ba5e378aa395904e79af843a4e98be5b76fde2dcffeda6b0a773d1415afcf80d85d45eb90a8fc0216731559091c5fda9b3860ea921c7a1215bb7fd1da4ca9e3ca72918cab519aff00ac412fb7d6ee85671500a4b2250da4f3b33f83c7841168874f2993ad7c529d7a3a79648b99b3ff0a908d15f2287dbf82d3098cdbfd1fbf7b06a2243aeb26644a636092b85b5c9c27c9e42ec5d4e59950d9805bdeea86714e529aa5ffdf15144cfc254a98d84f8df6da66b53f4aef304fac73911cceabbcc989690d91b0d155d367538eb26874ae6dfdc216fd4f009955c56f1f46bda86da60dc7603e06d1e12ec8f9ecdd93b05aa86f42ea43984ea43720b7aeff6ea5ac9fd31385d777172553805f7e61b100746b6cb7945f18e7e042c90538318ab0e5b835ca2c6b83a30f9383ae57c66fc0d9e01952fbd86288a31366b6e0cab9e2503195795307588f30fe436f5ad2ee22899008e6823a76c55421b9debfa126515d6ae1e11f96926d1e0ba183bdae020447e9d09fa98c2f2aa7d8f040f1b13f61b2f10ce5d2a9b9d4abd3c39e0822725060a7403ab50dc1e0f622146779373ead2bbf2d959b1a77c06597e71667c06c7a68f48d7a10534ec1607239963dc88186206366a260cec6fec15dff76d1d303872709fa6b76a981e4d2f827278d384229be402e9718e80c93626838a4c3a94d23e1f3c33587047f27ce7190167e66b6211de03a29bbb948e0812584635035986524dbf37ff06e66cbd38a735c6d27ab90ebc87bb2cdf8d80dc05a7c06e4e3728e18f3e20112a3761b2df776fc460a49893890eacee1c96efd2a1d508afddd93b0da3e4c67e6a8204881ebd5ad776563cc81fe716c5c22ab16d2aa8edd299fc83b65ba7f51fc1de26376b2d69845a38385ec1a0694586c2b5388c75ebde7af39c9a174159b9e0d4f9b567dee7dc4e7c9476da2f0c0665deb1e874524ebc6a84d9b8998f6b21db46ffdd0e610587d21ae8c0e8dc73998c715ac347bb2e1a990b816bb276c8fdda07be4de9651c0b53902f1a1331c402adb6db0b2f9ee704e4df4b09153d8afbb9b6145d9faa82b76bf8d7aa880538e9f42b62b5d5c049b565a35156abdf0fa80f22623156dfd31d1b4fa9ddbe8df74932479d9aa555593590bb9dfb3cea7d1e23f0d02f644caec91ff21b7501e7709b73d0f28a2042538f2e53bb5254953572619164576b983f8916f081a924a789827ced6b069c6c579eaaff2290270d1de336b4b03a85798863066f34e7f5220743088d47aa05fec822ae2917f55abd441365c53f2ea8fddeace532282f3c361c8630f57302eec2b0b4301db07365cbc9795b16169136c79b0ef58daf9b0ca9904fed2b043dd402d92c6ae9695697a105be022a4240b7096e629d13c7b35cdb04ce58eaba2bf03d68c7c588b2d7ba8de8c0c1b5535ab96c9529b34e60ca5522c7d88a657de494bda218d1cbf101b6a71f0f3bad303a0636254a4eda2d7808e59468c328abf45ea5eb9c5d4343ea9e9a5b5b6dde0ddbcdd7f3e0fa8fb88ed35209112fd3ed0f4f052e365842d02317d97b80da865f8c56a60902213ecf09869ea8cf5d2878a71deafa272802f9c553112a0835eb191b4119aaf67e378b3deedce4cf3a64b4e85f9f2f8667a349068e0e528fbe52705f1d14fff3eda64b4d3723bfb9037de216d7964b7d7f9b2f4c8af6c4516438c290d5cb17ba0691ac72acee7690883e56e9a37e856a7c2a27bae137e55140380f5686a2c2d24d6ce1a1cf7418222ae5611f5606c79fc63f4af852bebfd18f726bfad393289b4dc918667ec7d241352e8ee779304b5c1df60c0fdcfc74d8cd63dfab8b7f6a289497572481360dd5827d5f027a5384a375cad3de8abfdeca6e43c5b9460f9805f8afb1562ea718ce6e3b9bb0a7c2615e88674078b565c029c5e6bd71849ece4fa6e569108ac012e377d9acabc39f8c9725264c4821b3e6a50b56b18e84c0caa0f68cea60608b7083a4613dbcba118a289dae970e53fd02ff9f9c47070c381a195e77adad5734ecd97b037a5751c69bd05571e7ce37d112361dae07db06ff45b750ae62539ebd579dea78d9875f0abc547febbed6ec336df48671ace07e2256a11db60f3dac3e742617b7368cdae614cf3ad7437147c07e6be412d52a6c4607d305c8c159a225c735b7e2ba265aaa1db564abd6ef43a3e013fe34f74e0d943bf387bc94bc05627f026a8cdbd8fc2b12debe4d6acfbabdd24dfcec70b039ca57f5546ae5fce11929884ddb22a30eee6af70463c1c59fea658c98fe5630127cd2cff45a6d101d5b478c41d50ffcc247606918e0cad607b9fc093f991fa53d1fb5957a6e52f4384374a600557658ad1a5f967ad10d7d37468d95c3e2573d67806b44557904ff4d98ab7fe1941ba2f236650dd97f707471f0478b683e170d2d7d46e878165cfd06960319e1a06ae3bbbd3f44ee86063c1645a1da81077991f4dee2a09a479ff628dfd5c716fcce2aad6a2f8304e70664682be9a40f1662a12bc9b56bf3d61e9a26261207433b99c6bc3568fc165c35191bde84176a03221e3536abde264aa5b8a42d54f30f77c1714cd3f1e88e7b1f9013cb120367f9c26bdaac8c7308eded12d1240aec21114a51bc9af56eaa842f1927b9795e28ec81d46326e7c49ee0054b5d8f04dc334b64c000ef24cc104b05f3c3f43081fb846c4a5d36577d3d9511caeebbbd79f940a444b5c7ec9331e0a6d83cdd5fddf5436ac3c48b914f7acbf0edc77ba3915b7ff77875d61e95579971dca7deca4a207e07b9421b26eac53598a72ddb83af3e3eb38ef2eaae5456aab767781a6c89895328fbf531e5e50c573c6c43dbb4891535e47d96ad409a5365e8e58bb0fd733db8d71e3234697f7f7954943e5921d464005526a956cce3e1c272b1ad73e6f6f2c3ba9ebd10f8e1d1cd91de80c5ed5bcd38d081855d3a842c2139379e7ce9ed7bb6db19398c230c3e5f30f41b044ca0d00a3af9b22831b97e09c80f961b4c9e7141388bdf0228b69214e45e3a640aa41d642cf1dfc2af54ffc790f510d5b2eb44281795a44a8732af2b4379316e6f0b95e1c5faa418c077da289d51839bfcacdcd6b66d84657d0858711307fb5c397bf18736050189bdf93ac6689cb7ff45edfb3370b493f630e05414062dcce0745b9ca6cd43a2889b6fd45b7fef1df9af11233049b64e57a2bef9abcd17cfab971c3db217f0861d74c7810ba643e7e6792a087c27d1ba93a1feb2d39cd5e048a8783d0bfb684813a4bb83c2b2e8b7e27d20f4510bdc0552dc4ff25f7238ca38a0db4f223760dc45645bad2535b50d30a35fd88fd674c8d653a2b70938e4a88fd53ddff52d84c95b71e885b0a91a4975e1eaa904edff03d7e6ecbdc3a26963ec6b538355ac02cd46b67736486b88ba3b9357203f109e8404fa3776d1342d3ef6697916738ba932784e40179cb5e6f579195c1a7213cd818217828fbaafc514bc4c9a3d21512edf2bc617cf5b4711f943f0048f7deede51b4800085a2e1f177aa8e05d4fba4f0bd3e269b50bdb8514620901594700361cc4c427014d9f35809fa9074b4436d12a67c7edb14ead6362a177cd142ca60485974534429061b412b894420b68a862442aff92f9442d3b2e370f099902996c0b5b389440d5a412b32e91a5df3e4d9e724008923383206a1e8edf15e8b1203b38b5fff7e45e879923a9d50bf420eb99b935733d38f069c8fdeee3b40789fac8de19bac87f60b527425de085dc418115f3375a5f8d909453eeae25d4cc249d89cb77fefc09de3fadc7d24e2a83a7c28c2a7410a71a14c1281ce862fb1c430ed8b8dc2ab58c2f2cbfbd3becccb0f9c65e174911041a6fc72586904bd960444a3392d372c8c60bee7cbbc90eba29f0073099e55cc6366fadc092c638f9f06285db7872bd43e2f54dabbfef83da1c7249907f2d73e699783248c86d01bacf912c4a7dd5575e5f0f748ac1c411fd0c9d6470e0e5e530a6ef448d723ebcde0fcf9085e92271ffd63bca048f23526787b9a01d143695b9d7ba4ac6c47cee8fc24eec401e7e44d6517018558265d5cbf2bc256481845d9422eff354cef11b9c07797155a477de2be41d23fc0623a6ece98a21ad7b0cbbc62744ab949a1734aeea84ec1c9054c6f742fa8657d9af1ef4769a994cb15c79738efac37c1217e109294375d4c891cf337ad3ac4c876ce489bd86b693200e7bd140f4d14b1dea9a69925eaaf96ab361eb06b04abe3fdad8205b9e0f612908bb344a368fc947645e95db0ab2d81b086470b77c99f7e60b7b6ec2ee691c0b5036a362f9d6fd6acebedb816338e8cfc60a65c6bf4b87733a57fc91a36b54fb4886ca5cd338ba225ca6184af744df37e8b94c4407a0342d14b84fdc6c402bdf4ec30733a5b45f45f97c631fe47bca3563b0a111b0e95bf76f44fd0c37d7e857875e625ff841ca21ee67f0fef95e0c6b34d40e07330d97bbe534cbbac027f467e8b9b4e8930eefb0440bee77a6ef0fd268bf97bcfa55c0869d344b751e8edb1635b87bc2ba60444a351deff8bf0bfea559dce1438ebc15c4d0e866ae4cf1c97d05fd069e53dc6539d562b163055d72cf36e2e7d787828d341f15fa5a9fede16d7e95edef909c685d19e8e64d611650d3ae58aa6dbf80ba1a59f3de2dc9a77cf592903d504a17e101b1c90ec347c15bf05339eb8d60f4a50ca4dd3cc8637d1a894c1e1ca6c4d7454cc727a38b01ac81731323521c2e8ccdb90ee827e705764c1366f69407deb586b8b43f256ed73f28efc537d7b5561696e39924431a4f7e74aecf20e70db1d5bd61e27e9fa75b689c32b6efff61579cb8839627fabe58e4aa50fb14f9cceacf2afb3ac4937060675f8e8243331baed7f70b8a735d708e826211c58ba7c0d0a3c7077bd3dc868d8fc8d8d9dd96da3af3cd2d66bc458002847024a40404b3fe5b19e2063a3df87e6a697f7b62a477403f07218f60dd3fae39cef756bc3f248d44f3ddd43e2983fc2cade0de21ead72d9859172c2b1fc8e801600aa4c5a74178e1962c450f5e53f7d722f3be5e909afc9dbc7769e6b69952800e0133338354d981221abe73f49c02e623b40fd3349c56720c8b7711c2c2c4b87665885989ee5895a168ad10bc6cd61e5d6cd59f471002e625cf1303895601f625eea56ba313303b954ff6ce7320cda8c06c9b371bb10c7e484aabfd5ad9d74f80c5943c02874b417dadc8632aff7019c6b7905a8165859088ce2a6b3e2d1382afe56590fda7dd8682be77eed205a90690e73ef05759d386200abd4cdf2ec739b51f43e1f777fb5c1ccd95accb70768bc975d89707f5a14dbb6d65a55f95cead08fd9c2676518030c7fd36a77704be3573a4fc7ee1428fad5be5bc4220260b5e9ff8ec7923def4bbffff3dbba51c6135bf8225150d1408df4f58d04194c3e8a82e7aefc98fcdabecb3746ac1d509267cf37b247df5643dc8b08610c996c4e1096b4a060df95b02cf03ca01657b622bfe5a4ea4aac8dff9cb1860ed60911e8ce93672c21a56c2611241895277bc84afafa6813ae6b1d0ca241cc437170f75b4f5e32c7401a2e80f4a58b734bee0bae64ac725af3a7aa3cbdd0cc7d426722e600a25f24acbd351f5764e5b7d7be58c39be7d2a7f9ebf0b73518d424d6b1fa76e76c5bf4868db1b314783ec123cc812a3b74aa4fdafa9a3a29d0d7b121817f73838edb86ba733d6270f9f9ce63f3f713d1510596642756469d146a258b5504e05b5c023a33a41c511e398ffbf3f64e67e4f03a0bb6d24b9f0303cdeb138ae93241daa523710a98940cc35ba3d9414b443c5ea8a94cbbf945a5087bc351a5210cb8aa36e1bc792b19a725226882ae10a809c53d12f0803242f8eaa098592427f405fa02076619216a65f9f0279f789c12dd9ca7f5de7015379dbddb9caa64b75499e3bc1d3d8c9aad39601bfa341530c301bccc9ca62de028643f14d19939588e631ced0c8858e6c192c101e57e2a1c4b22c7c781d07ff3208d0ae8c797368125b328fae0bb7b45e69dc83766d85ca433e0b5767b4c49097cd9694bdd82929b70e9ac4755a7664c1b027b211a66c399dbc09784fc8f291b6a79b8525138cd67623abe0c8fc79eeefcd7864229aeaf865bc51110775e5372e747064275de437a89f1fcb3268df21eb987dcdbc089464513e12d2c339686537bd25f0abd7b6e6c1e22437adcb3d638dda818d056d4684556f519c2fab0a819e7c639cfcf8e2bb690354e4362b78137671ddd4405e70cad296aa7ec1943a88acbd820a2a6c2e9208a807458084d02263f0700d83771fb79a016f89ec79e770246243d216a35bd664d4aed85b77b28e1aa6e554f6df046f737d44b623acb634d2725d79ce0c319fe438397759cc2481f84f1b3d6cb9cede604c45397bfa9525a7643b511f3b757d01307335fdac3747674e72ffd3031498f8511025f4cefd5f4856b405d71c499f10ce1a893838afa7a06e1369be3dc8a784d8280e9ea4592c1bc9015b80c3768e86feffb080e758685d1e6f298d555869c0a0bbb452f0826269c7a54b6aef835c4ec31a0b03b996420f437f169428eff058aabbf06b17543c14f92d9e07aaec8cae102f438074d3164c9f90e4d6c9809526b654098d64aad4f9ec649ccf0b92da40e4e002f5b9c1c6b6a9c29db5aaebe3952d709b6974d1cb7bd0f4ef656bfe3d9e549c5e511a4e44a52b7c3f29bd15173f610c3ba93eed746090db6d0445df942ef9ac093663a4a6dc502409fcd5468f258606e42be23ba864c9e520556f2cf5fa1b8fc3b4738d0af41306bfd517ba52d7f5154d49e6be3781365a0008ff90d8c715bc8fc8e794c1ccb75341488db4dd1b9ca0512ab962b6c1cde89f9269611689f585fc3b0917216c659f29e4ff6b3a72ef50bcd44673425d62e7a6d8a16c26aa002d076ae82c7ec41f54c94a605358f7e641dba62baf83e78a136bfd0dffe2a3d3cbbd19f370add8646af54c9a949dbfcbb6eec02fa78be117c71d999b9163be346ea5707fb8f5ee272e322726250baa30903596511fb46a0804766d367a06d10a2cb6ab3cf66214531e7015fa6bf91f8cccdc60631f9232a21d07d4f9ecf6a9f97a4d31e21be67da626cc7d64dc20319bc4f60e8258ddfd59e58738b9c446a643675ce320a18e915724b8252bdf164aa2feef0b24c4ed981a2c8147891825cd5fad77dbab1fc356564918623472c890644da949e2456155f2e87c77685a9db52ef4163b17dcb44aa5aa6358b08677fe9b55f9258a21f51228abac75babea8529e978db0177f83d85460d3a8a2ed13ac955b561499de3bb8ea6112f4ea9effaeb845d1b8c7e1420bf68d8223ba471d94849a7b8f895dc18bfa7341a8f83b2db3d0ca35b6cb44cad7229e8bea30fabee09e1500d81d45de6556342d71fae44146d75f61ad38e32990100f73cf008550ffcfbc4ddcb80408f45475aa7a95101d7a24c387b3247dba424f06824129f1674e14223ae543ce686badaacb624340d3440f95c44fd510ddbc247b50de4a96d309ec66ac11e576f551166f538ed9948712c64364560a86316eac8a5479b8a8e3f3b90e489dac7cb5345f7a07c114271040027b7cb489ea8508a401b4b35cfd262ffa6ad6ab3d6aeadea9545eb70b82e240e6f6f40ee467723d6bc8c5e68b57a41460f125f23babe46043249d714b1f0e029b457823f045a20ed1c709181d1a709cc73a2db9d99c1e9c5f20a65f68388d9cd159e100f928eb1dbcc6e21da561f3cc1990d2e4e7e65041a69168bf6c0ab394c1d0cb5ebfa4ed07efb8338837a881bc1c9a5e7fc8056f6db50c8ca90766025354cb019f7aaff927a97599c66cdc3ae36b08ccdab5c52d26747704138cd9e682f9e97d813e7113fb163696632d7e21d7962c45e5ead38610ec0b767509bf4e95598765612069bdd294fbe187d7f889097a3f7b1145917417159a1db4d44f7b24511225388daf0104afda84614ebc3764dfbbcd007476aed72586f8df25d42ec1ebbbf344a33b370f1400903f171d746f64727417d7437776825be38d1b3453f0501586816af7591969f1729043264f91d7a962d6d9f34e20e11dadee45a2592292071f009b8700b22754e54670f664a998a7baa12355de721043dbbaac404d72cd4e7d7a07bbefe872233e7ecf11dcd914cefd2795285d7e010058fff7064a74c768e9f755f26d4059f56b4dee67a6463eaf97562539069a988c9d9df3166e9b4dd7eb34e97e2cad819297e655ca258ce9cc9877bb3218dab99491ec9e48188e7c501d69fd517c393f7fbc4c09c60efc74e9a67a8cf3fb1368a8f17a9209ff71b0bbef06a7279b17c21adbe2ebb7a222784c277fe148626248030c939447362f27e806e6c5c2adf33b1d65768d678029c8aa9155ce2353be3bf62eae226c3bb5a116602a2dfcdf4370075ce8237b892b7cc55deef2e54f166bcf29ca487a092a962c5cd11a0ab34deb8cee752d5e9e26cd64b6974a0cb02746667f0d70f313f8a52b1983f478ea6b771090f584b58bc16b5f669a07a087d94861a8d0da43b8f8a4426cbae2d26fdb71d06e840f6501771abd5562772c9adf079c264d08ad456339e63820129f1d31f22edda3bb65a4dcc5e8f9f41d3f503ea3eb572613ddc2db10a56b97e83e043599ac490a06c085103d9039ff6103202b915bcf777759e2638b42538393ad10397615ad2e78e545cc61d53d17efd75cb50b70926fe7eae202f602269b1a52193e7e175a2bf0bf9756307999712ab134ce872c8eaf006ce98bb6924be7e25a6489a4499d42cdc987eb0216bd8c165221c154ab565edde238100cb7696ed329842c231cb615c96fc71c3be361f444f21b5efac9c341aaa912ebb692e05a467b5439648f53ba522eb82a17b20592ecf1b7dc613d39d6cec7627797ca06074e0562eac006058659f0359f9803dc3056c5a45d140fa77bb457d6ac3db58241505d5071ea728b85f7185a04c857cf22f90caf093272d7c820febfd692a1aad20d98ce04433ab9ad7b7cb7e892bfd187d5f19d300d5edefd0234a2af8613a30510806c10467f9c87b6cbb19e5517f0810d5398455f718937e53200875cce33d1f8ba230121b6f7f98d23133a12db91f92fb7b15f001021d08a653a7d47715ba710ca2704df47d8dbd0e13ba499298d0f5715faaf974782af45188abed3b68a94132497082a54bc4f0e643bfcbc4a297d1ce45d3fbcafeac54615cda4b7cc4100bbed77a28dcaff0ab405ed74e4587d84ddb867417cf34582571a0f3919451a4bbb0360b0488542f310bf0f3c679311e9f5fa7f6f0e829a5c88413ac5355983b90a53086f95ab6a0075bf74438322c4863752bce5f63ffb2c59ad61a21307cfe7c5f49f2b5c38654b1425959dcdf44a7114b0c8b6f55c63c8c86fc1e59c898619bfee46834bc9ae85af7497b8d5e1dc6f68582d985091425f65014c588ed5667ce6bad18b7969369f6afd6dfb2b0afd98a99f186baac4fa2c4812e334fb37b37925e99b150fe23c218481f3c66fbb783504e0e51724f9f33a3125ab6df4d6dc630d8852808cea5ef9a5f3451ef268e6c422a4b665b57b7c1fa4a8c726301e94ed5f87df7e5b19bae1a42870bb3ce8476f18da2affc3905125306db6a5202dc96cd940cdeb17365b684654ea56de7290d5823be80fae5b312de0630db1ce43e30274834de5a91b0da2948986e36f0916ed68abf0172f4c7b9593b20ba2d4d1b4d1698c193766846c73a1f096751001933f750f9b9c07aa70dc4a03956b38d260af6e7bf06124274577f06d82ab73edf84e99a8accba0611a3307af1d0211d870bde63c206c26b43a730249fb506dda8e1c8346ee71f6c9d945d73483be56834118e9ff6475139480091df6b94ddeedf535579cc3d3329a1279e85f6113e222c12c8e2ac0870d4329c1b1497338552c8b6d0e1839684bb3ad148fba624d39c810ee44774d2f69b2693ca4c3d72aba5343f8e52ef1f967cdaaeb588de22b8c2c14831237c72ac18d3b51c409577a8bab4d5c6736b359f500328d222ff47de7ef3ddc9d28bf64ca3bd054c673e7b5f30665b76937360bf64b0896d99218c119c03d30138c5db71c8e285aadb8ea569d2606794db81dad03430305c47204a24fe569447127fc01e716481f4dc7ad8c983e34164ee7fa75fad4d58e5a365df9f4be43f31add2223fda9a6230128cc232926cb25c9eaa2c2e982bce901f76c7d8f0fe0c7d98e0f143a5e129c6d59f7e6dd38d837a665807e0f4656401bd21d7d36ec1a6922393b2e5a5d333343ed85981d9333d998fe78b78df67365b1b30b09e7a6a4134bbf2d9a1646a70c33ebeff9c64a952b9f6375fc17a4270dc9481cdacb58bba9d48ff31fa3a2cdaf6ff512e93b3476f8ac708a46d3ebe7aa2580c5b91343949783432539dc1c8bc84a5312db7ff6884b0e40762403a98b1d389862c13f00985dda350766ac38362f33c44699ffcf086a010fe4bc988130f44dd86902d3a5161179a143981750d7c8f05a0df6596ffea0dcd161533b4b1392d607dbcc9251155fd307d0d90a6e88a766fecac110c97df7af5dbc2460dc00c9e0d7223f6de28ada8a295a0882344b6bf135bffc6fb3ff08729748291c9d5ed4478b6a502afa171b9d91616910eabef4d1d00fd8d852763240fc672e9411bd5f076e7c14a1c15b684b933cec14b16ae4163ea36fe38ce4d3bffc68f0a062f4509b8a097b6c64dcade0a81360da79e9f5c1672b7de1d8365d8f89ab36a31095171527131be0c9319e882c5515eba59becd9ae9f7981889eecf33858f40da49af525f229b13d59c407716f995f03433662ba91559581d2ebe732ed203c5f6794454fe0877128b3e3a15658b1161850bc9dd5e939fda4a0e749ac74f0024c5b4117ff349a7c8cdedbc0b517cf8a33cce1bd106975075822d04df9283f6cb6052909e80db917b172e9f0c0ce7cedc3c20226bd27a7878187a7028fec34240f70e311ed9163afbaebd6ebfe2fc785a880ef6fa75e54afe059c2a73b0edbec1ece827a18b8c7d0d847bb458c72b8068b2964a43f3756a39a59035dc879ac54df2859f44ddbc82f8cd256506ed500f04bedb7278de5c22c315b89060949f6170bc7ddcde27d6c728a1b40d820d4877b84cfb1ce4d74557df3f6cc2b4be4f28a5611f68ea884ceddbc9af04616dc302d26a610207a1cc21a5aa9447d7fd32560fe29064b8de1132cd2974fabaf8cf80150350c6f20ef6a8120eb6e8408acf4fe3fa2deb947888928d355915926a1455b41ede79fa5840a3d156fa4982e232e0d0b98136f7d4128d4505ee8ffe46134692b164ad617d097322b553648626142da4941c5ac72ef91986420725047f4fcc38350815db1d036662d2d647d7a14a01dc3112fa7e418cf377cc3502340fb9fde48d6c56eda441c0829bd9fee3f9419b09b196cafaee051f749d23940cc85d4f9e4f482a8ef871f25472ca51f268feea3f8a748ab9c1dba07da5a5238c8965898397b182fc89f3232026f6abff3e0ad074b62c81c35f8274fe4fa61018f384d9c16638123f05ec8efc5abcad467eb7aad3b5dbc0a385a3eedb046182f18e5d06c84244e42808abe7713deda44e6ace8e46b0b3b8a934e6dc5d93c9364dccbb2caff523ecdbb0930bcea5d2eca42408f012167f1ab68ad5996d74be9bccee8a4412e34f1694536b358a30db918ea21b3f3c2c7a21c71229105746453b696b1d5738f919d9857cf4f94200e5c8bdfec5cd1182a6d5c9c91f6d4b4207015d82db14b35c94c037a26d4e5e6e9911ea2ef5641e51799461e5d63f551562eb6746ecccc9354b16df2478893ac7590c93084c3194168b40262ec9a3b0f420a487acaf9fcbde51e6c5f9f9a582fcec6d79afdff85c02ab090289d11f7108c46718d5f460622d1e5d172a8de1785413be2b0724bb21742e2ab2dce2af3abcd1b8e57078e4b7355f4f7ccf62fecb5e32d9f41af0105e3181a88bcaf0e23dd9cead91f167f95cf9d2c0a4628d955b0f1152a9ded0a51cefdfcdc1f059a7334d5872ad574f65eb673d3cbecf87ad684d0b4215718cd91edd9ea4a97ee3f9fcc145e43bf416900d8d1db3964ba8febc2840fbfd40c2fe1938f233fc960deee6d66dad4ce33656f595cce831c90621bd748e0d01206792925df6823021ad6aa9842f41d2257ee031c42963009241bd06ab8b91c0134cc28b3b3131f74e5a4ac4e832ae739cc2615c3f26c152376346d020723bb93cfe120bcb0dd96c67f3a8da363ad7c7ec6603cb3d5d7c7b16c2f1a3ec873876a2cb7f44f47c74452a4c8192b814f2d1c029eed79d0fb163c26e1ba9995886eec36ccdc3d73823a5e9793836b7d65987e3ad82eaa71e15625f692f1d5e76e0ca2df9cbedde4bc14216b59d8b17bc7c0f761ab2c937b3dd3548b3a3913aa683e95fc312c0489b26931202d48aeeb750ac8a41de71257459fecc81c0bb4c4ebe8a7c09dd9af8cb030bb654eddb7da41da458ec79f6d225de445b4ee6904f4cf1f3b3c0fbf8c48062675f671537d17aa508bcb0fe66ad3f25eeeb4425bf89236e3d30fac2912fe92a29a30f8503c1c237dcb6e778af9f0df900699eab7e3ddb692a891ccfde53c24d176eb25e114159cca186ae28171ed4cc2dfe62582a0957250dfd06cd2c118489822b477b86b167721ea4ba87c2dd4370d31275b3d169276b37a23a4ec422762466d15886fe7a64dd807dcfb55bf258dc7a0088ef18bb25a0f58d8da9a554fb2fc50a536f8ce86a07e4a9ca4bac6c9ac804cd22b7282aa4c5e36768f79660d29b21d6379805da5619861b80b5d7f46e345b0c2511dbc25ed0d3b50c728f012a6b36e3c6bdc1cce70c10bf770a997685ecbf68f6f3428ffaa7e05f1175eeba3892d0f183a7b855928db1289715d21774cc3a2639b59834664ee8ec34bba342233ecd0541287e0deedc4f12e7eddca1ef9f8685e3c018ea3ad48946de42db0d8e92bea3dba4c2810fb48e6563a32351b2a45fcb89879d9d7c8680b08543607f629fe97b3577130112d1cf760449b6d44c1228b0b3ec2f4d8bdf795a12533bf3637c257c53d45c7361201e5814a2cfcd280bbcd2b9028ebe327906dfaffba16c4ec5bf3119d8f3153a8bafa356a41f29ea460e849a818fbd23ff899fe8032f33603564459a4bbc2f611b6c2095cc41ab2312e43801d314e85bef47a58fe71172b4d9583a514ef163ee8aacbb3dc7b664fb113e39e35d8e9db125e3014f6c1ec205723ad800cd37db6e41c0f53e8859e2c5b3fb6d0370fb2a3fc42a6879f8656d532b1402b6a1cf1d2d90b1c4c2e92bbf07d9efd1d040b9adfcb4eb5f85ffb948dc31d07e7d775a4f6b2e192304903ab574694ceb573cd9014f34758a615959305cbe3d1f4065406880393a62f68ab0f20e14064f969f60a0906ab94f30df5508c5a1a815393130bb793f4438d3e772cf4459c6bb86a098bc5a91882bb31b876413a1ce1c083610e2f82df22aefd88d45ae2a978c067bd8248bd9cc09f7f36c42ec365384511d590fca7013071bd0b08f7a337a44e8ee205b01b1c5b54992f402b501382f7078258080c64b4078eb321be35f97201b2177282eae05d46e8781b1a6d53dac28806b1de3e5b7cd18713feac5df87c3b2ec2b7216a87e93507eff94ea899d1c24cc05645c6987565aa97e4ea7bfb02a046a10c79db09f4b5fe0c4cac4aa11c1126e0c717f1625d209e91d1c940c018c2735a25d46573e55a2120ea058981bef4f24f1166d4035ae8cecbb1307433be6a6c7b1cdd1481cf82ac246ccdb4c441703a06016adf7025a1c4c050c663c8bd93814bd9d825fdfcf6b370f5710cbfebddeb2f47c5db68076d135d2597a2970c339fd2ac70ae30b9475f414ac7d9d75233e4fc280c9d48dcc62b9ee5b7b8a0e2a08c177929d6c2ac89eca377b74927495abe464331f010abb504717e17c86192f169e2ca459e9c286f9c82694f7faed8db79f038f2e13bc8e1bb12b60835f92e23336ca95c97fa7228288fc56611b798200bd0e50e123cdfd15a60305b2ed23a1430a50063e702c26017c8a86fdb3009d29761b2e12c446a36182b838c5e7ce9172c93af4f1be2c6a0ce4cdd36cd55d86b3f41e62a56514aec552d984ab78562dc13008c7ece0f4fe7a91dc58fc7eda770d1cc36bf4a2497a20f10c2aabd9b361bf42de7c6a55cfb4343f10d09b8130e10140b97a50cd39048bc0b3c8de35083b38e0b8559ea88ed392ce4335132ee8ee5f82b5f9935245f6043f75e1262d8532e60873620412656e930b2e15b836aee7d0fbcda20b14b694c7676380bd78a55c45d80222b48a7d93a029289f2e2074c0e2ec173c3a5df1d28b6976318bef8bad340f772991d8cc597ee1859cdbd1802c4c3ec268d571b505110ef1b017ae4cdfa36df19b462d1190504da615f610852646cac2487ca8ad3cc34306cc5adc23f0e444589953878c051d4c90c87e0977e3ef150ffa7146364944d45c0103e08f2438bbc3806378658173880836396a4984927eb99dfd2325beca11c9c5d20f092fba9cdad31745999bab7b26cbc3a5e4cfa1be5153ca34f2e26e38549e88b7d0360399d0b4362542799fe4819e25626fc7c79aa77982882bc713d43383fa669216ec36cba4cbcc449a1c2b0549d1522b46dee3ca65b25f1be990fbc8aef630fa197bd16c98a5907d179a32740f1491f6ea9a4c988616ee21a89300a673354ac9a7ea080f3710165d705757cf2daf003dac20409c3eaa872eaaee638d63030ee8eed62fc3cbbc81dce97bf9abcf087c7949feeb0beea91157604cfa5a5e9e77bd96f3d44a1c188ddf65265d592b4991abee30d046e443af08bb5bfc209fa9a50e8e823f1bbcd9d8600caaca4517888be086f64660b218ed9dd8a6eb36317c9f4e395c5b8e9deb9bc0bcba2367fce4f280b87bdba311c3159be95823ca7c800767eedd1cd175e5a9afaeb578f9bd62ac636275456c546447e658857e7fb33405a8b4ad4913d87f24ac3f09c22ff123e5dc95229c09e0b68303c1544cf6392eeafed0d41dc6e7ae6d4ac121d993238090f7cda5cdc7cc37fc2c964f27ac29084db1ef3dde2116de55a2e10cdc126e4c9024ec5291c392dfee4c55ac28fe2625b113ed1a486c38b72f2bc1346314c1ebc1c54b8ed69d886c7258c9c92915889cfae5d728a72fed5d83447e17cea19809a253eff815c61889a0ea9c0caed0e6c7456fa1480d01d54d5f6bf60a8dca09b0de08069429da99977e3d192f85cb916ac61518793706dd6e093e342d5741d9e0109f52f14d1230c6c0f6bcdeadf3c92d1a837b0832353e215dee3a01706ad27c12af37a4341d1fc4c4ee84bc2efc4c5dcac2429e4fdcf376a1ed96e5ed5ac3650563193978efb400c7db58a60a1862638b6d0584d94720248da7f179b920df5979f707682d13e27a8f4fe8887f89ba10223c081b3ed06721bdb76a19e4f1f2e177e129c81f91ede08341aa3f52470587c417388a46bbd58de76a257981ea1a0b60758a95b74f939f834ed4f3e153989ea55ccdcc1c90ac183d01c2acc0199b72a7a016b7ff0aba9666db1a5fa5d9c2d902ae8e0e88ce9a0afbb29f4723a9d520e1b42b8a9cb90355382ad320784b86c4945e4e0f1306215be11a790ec2f8ef7ab1c67b357bb754fa97a1af8be5515c0a7bde80f9c4681282ca052d6349a0f83b0d2537e0103118473a14c6bcb24ee6c6959846b8aca54314d969e9910d56fd2dfcb9d507215be664db753613f0e5218fb23e62b5ae3ce447ca012ae0b59ccd037340fa7b3280c2d29e0bf280d8f037964ba0ce1d99b37ad91c69dfc306be56a5bfd7ca7e7162f6b4c2fa97a71d6beb69e42e5928b86f1b342a71bcfa89ad35781b84f56b9122806a00f669010368e4459dc866114b4bf27eb88d6bbd41a5a4b36a15a37712219019bfbc22c3798bfa44b07647ca39f106cb9e5f16a8a0a869310b2d1cdb028c44168930e34593fccbe9faadf903c1abc00698c7711a64b3d6167b9edc290947f9d99cddaece2074bef91b03d620389a88cd0b75e2317e4e2e48dd6ef869c95f8746504c929d6d50494033e5bc28a0e16a6ee8de858817b1a71c20ebd1ebd2e962bc222236c71e483e7c39f905608e7c2e41fc6a6c3e18696b0e1a426ca0ba9333fd26c7147728aae4354e44b7b7e951d43093b14d83a0db9b1d32d86a2adb042968bff206b339909043d37680909b27533e645f8b24f1cea1e61d8382ca159d7d308c6688119148df9459b1032e02c2b0026cb5d223489664da129434b80f5844144add69c8c71b84259f9c89a482b53b5bd38a47cb6d3cba36a45b1eb72e40b21ce660ab8360550ec254017dcb763673907129f9eb0b7ab846d063e5c861f3766ae6f2e7699fc6bf26f314e7283e03f4a598c7452cd8efbd2a19fe5e2631ccd2536bd3c6436184fbe6f3e6ac04ea7081b24741b0eee37b5a41443e31cccbb1d0cd16289b7eebf6b68159716854c1f234701c7b4d2ff9093d1c95b4d57671a659432b5555e14fd622bad36ed353f9abe55770a5d5dd5bb264e253dcf636f4e6374754f4eea9b9b608694b19b56bf85d33d45a395d6a468058b7ad3e127f9fba3bd1ad5b9be3659b21e97ad6a2a5f628d4c50922b42f8d7fad341af206581f55e85237ac126d1465454baf1cf0cb5ef79a5eb58d177fb79ec210b3501a9282fa84b3ff9c80e00c6bcab44abc6b18e332c113e5ffae046e44e0823b713c4e2d90df953be22e3ad3529b20acce7659c735cf0700cd0ee5956b530a784a64a27dd7130489ebeb82dcf7abc3f729f3137fae2af1b5ac086ed064dd01521ea4e96cc289229d0d058156b0d57edf3c74226cf3026f6a4e1a100fb0c3251190bb069de12a86c2bba79f0aac0eea742d285e0345e06e3defe5007fba2d8f8ff90b5bf4bfbbdd8adec7ebb62746307dec71bb4e0c8043be2d495914f092c5d75db4f1a67d5f41ca04262d6de1b8aa78acfb72b97e6856390c0948e12f6173c04fb00cadc6fcbc40f8dfa311742e2be62dd6fb207c2c6a8a0a36f268016850db59b621bbc651b58d1f9d7e49644c0b6a1e5761612e1f5bf9176f6871d41740a670f8bafedb0db4f8effbef5117d9e0a6cea7e9d2723e65885f65b55b8b38594c24affcef0419ea5916b1fe4a567512d25a21a019f1568949f65d6e9cd66b48f82093c8f4836272c6020320fddd0fb82764d6ac8a40b5b2fbcca14c8d7e639442a2cfc41e4b4b9707cab84e36cb2d6933b135a1cec830c29351ac1385bee92a48ff2213d4de7d8239567c8dae74a3a06268864e7b55c0d6ab38c781f446a54d544f8a6a961c828a2d346ba794e42a046ef459cd2d998497d4bd793087490bbe37e39f08f3bec2e1c104c5c2c040ed081a0be1083e98eabcdf5ae0c2751ea5defca7b7a9ab71421f56be7ea748eebe344123faba8c8a4048f4bb0ebdaa3775b64954eb6834428b55189cca380da322b24cdd32ce6b4c8eb388953698c38caf3aeea2c769bed52db47f24d0d096f27b6dba48f557b0a8e208c25a5dd7636b8a3b59d8551ac230a39fd67fc980fe07f363f97d4f81d2385123f2625fbfeb8a99f1b2a93b80bfd09a242733e051d226356b07c3bfc23bd1f19341a732de7c214b3487ce1f05a055e9fb11c3b6e46757d875eab93d068f64fe45a625e2351f2db63f2d26ad2140164eeae2709913ebe7d8d1362c4db60e69021ac5efdee816a2711d364e8e8b087e9d8b26361a94fb4cb50b351ecb43cdde1ca17027c0829230e58330e9fb9b4e46c937473c82b8fc3265414ac08f934a83ba1a7f51c2770cce66a1859c876be56ec14f8f6019adc6d29c3370bc1aa577d3327c7e3a385823ae01dbc237f2d44231efb25731f6322c6a04536d4e6fba6e2cbf22237fe8e425fc79ec416f51e27cd3c4de6c9a002549627886a60871dd7154151dab0cc14ffd0018f94150eb62f8a0e00a82519f41d56f00f43daed135981f28262fc6688316e6c0c9504a73b09be60a1fda97baf4378810ad9798dcc3756607465ce7fa05938f996022ee6e9552c25243dc6dd7d641cac0ab580cc69b4169b0bcc0d9f9001053d614f94b1eee1f4ceacc3414202a4c25938126faca501db6c3a399eee7ae8538865f3e08289bef6d8671c1adfc5f851ab6a7b8e8f1d3bc591d9e26366acb358d57dd81811a283e3fac3af60d7669a35be5b60355d48e26818d7356bfeacb978c80722759dc6817f290c44e3a4ef1a11adf3c9899f1cbf9f1e864b7cbba88e232675570b93f8ca23b51263701f5ce4c73eb6e7e6ae306408ed367a2cb500c610243ef0eabc027d26a2021fff8ebaefee05f7b995875c00f23259fe130da39b65dfda173bb4a49936934eb19a65c480be99451b1a0f467b20a35f7efdf9ae876966c4c5f48d603b0493f72b59c4290e7d7147530c90577a273bd13b2fe984f3a3a9d6b14bbfba2d0a224b2830a908add8b9fd28e37dea7c8978ec4ce1066494c5b1b84defdd32b6d623cfe2ed2afc6631167eff98c7e929b8c16ae6c02cd57dd791b9f0b428bd56e4be5a3a21953adfc69c63258fdacd163af23d3d18cfdca626d41fa7510685ea22b9fc456d7c893f99944707dba1c89892cfb1fb9b036557c5804f8223023abf887a3307483924fdacc0fb0813d2856264574b943e6596528d408dc733326f68d7ecbfad54601df35aacd60daa7963330604c36bc9f2e1d4a913b6611c68aee46c07cf596be5336a85506f8c5d86bccce2b9d52a33f87a75293b840565ec2f6ccf53f762b120e54a4dd9da030218e3e10f5303c772e3fbc0943a81d5cf8e85596cecfc28726c014ff054c98743582accdc1667618e6eecfc91f393e5136285c2d76e58738e409428be8b3c6603de71805366404fb9b7bd1b2997332672042f451141df55809a066d1cac171285e1a394c116043255fb6a44b50a1b26326e7233d862fd5b1fca8457046a0c7faaf9e5daf53ed9aa3ae59622bc73ddf108e99c08f951465c4ab85bd207a59e3b574acfa52cffbb4a141286be027100aa4dddba0a71218b3e5a3d7eea025172b298a364ac55cdf356dfe323bfa6eaa3294dcf3750c01e255ea5de73734b697c36281bbefa016d7257a4706df704fe641bc6e44dc322d7f4616a07ed4b1c6123e10bd0ee8b93bb9be6ed71a1d726f6f297f209fdffa808494332a1f12bdbdb0623ee6fbc852fc9c96bb014cb27e9d20ed2d43c6e550beb3c90d703406712409f56a69b742bd0a91404f1f62947e0ebdd4aeb5ce08bc5f81afcfef9db38e98133b634d96d46fa103a28496fbde57349cdc29af360163adc30d4ed300a267810842092438066f36bd2eb1ddcd96fc60542a93e7c671e74b7c69253634f33d39078268f69b76772c8df4ed4adffe280a7d110001612fd6001f256ba2a054627e0707653c4f20bfcd80e8934eaaf81d048d0ea4c1b1d0d946e96896c756dc2296bface2bfcadd911a686aa41d6328802249a5f03a0e58ccb140be34cc2ed269d454fadbf0837557fd4472b514f7fb7bf4a258b2d9c4af24e62156c0e044dd002a4c09bb64ae56b7155c85e8376993c8036dbaabd09c168e6dc711822c14b3b00866a2ad61aa0e08990ad55813d0d3dcfbc9297e9594a8dc5adec076fdeff6b5259857946dfbf5218fb965850a0bf1d58f6c5291b23535b4cef5569efeb2fd7465e3a8fcae6944df3db73048ad4abccd125e261d23f645cfced05d7d4282b7be1ccad2be2966d9596bbaa390e1ed5b87a8aee7f259b86aee3b815b376ec480dff3b83b5c67e653d570b8110734b106a3821b0afa6e5f8e1d1cd452030233cbe5c8bd49e30bd9184a57a98b8d4ecd392275a9a4e1b272bc22dfa9c0bdee3e537ed9ddeab3bb27aa6325481d1013b5527897482f8854ca71d3da97b3b5c721033e2d4a531827982c1f06d5326bfdd763954007a78df975c20548647f22ee87f7b9391a0227ba40fb3ba7c8fa5e235408a41e13fafcfbfc1cd66911c264086bb2bf0cefb220caababc1f4fe2b1db48d184fb7634414aeafefee4dab098d8f4ed42fe21ccc7a174617eba6e2e621fba90a10ef6792be7e9dfe398cf3c69ee312d94bb02badddc2b9b9edeac9c9f7ac1ad553472fae869edaf463e0010d28c7066b34f759c4030a714ba4cb3e4fd96f4d7e5582fc6e8f1b681568b5893057073cb351bc7e2e9a982ecf789ec7f3e610202f011541904433a270669c7290a07f7fd00744945be34c72f83e5f3cdf77cafacd5d757b5a2a6b6df87a5aa3b6c7eaa796e9655a3f7db4b041663a0c7e4cb81fff0df4b212b6e2fb850b2b71ff113306127615dc99bc36693c5e0ef4fa0c964a889c7c6111278c3cbc8da1b099e949868ed6d07f37b7408afeb0b8874fcd8f3c39179e4f04fbd7567eaa653461a03360516942c387ba58b98dc710876e24bc699322b18117b27645647e39d19b261a448d140ef4e3b207f78244b3f3389b9f617dfd748f4499f5401296bc1d19b949c45d9de9f2d42726debf68eee834609c4107c8467e00926791781b822eab1f1e0803c90d0023c7ff625ce9f78239e4f304d08e9756d95afcd056b862dbe1525919aadcb2a865ba000e97b0c0cff82ec99097939a56225eed61898ef7b5b18e47f072f48e3742a1d2206c741539db6b0f6b1aaf768741893c882aecdd1ffdaba7484f5dfcf2fa42a883641c83cb556d11f14d6938824777d96f937c401e353b28b0d6a7ea20fcae2c8e3691af07f95b9e10acf4cc3fc226632f180d7d964e1e41bd608608b4880460cb2720b83468a0ae19ebfaeb6aaf7d7dae2ac18deaae5d88bbe01c20ae533969fbc56baf954fda1eaf81f13e039c9a7b0f3a9fa08a33a073c5954244f6702ca1b083e1a5ae9aa62c5fa3b7edf806206744e5361eaf1fe05cb4e37b23864bca2c06226e59c375dbd21aebf28720397d124e7bd88c7b6536c75fafe7bed52a3dd0b54a94d208f322367b3fb8cc32ce2c53da0974f5f9d1e9c37fa9849cdb76cafc955b40fc5a3194cc74b74c6214470e20c923c780afbed2ffa3c92eccc45b12035d341fb6f70534c4acddb7861b72945a99c6b37ade31b175fa1645b11cb4d2496384959fb3483a3d588434aa034037df8ce46e2e875541093c015ff5bd6e1142a58191f41f0af860ee4348eb301f26378ba9dd93a2f14b9224069919301f2249ae86d916c287a0ddab1007a236a66e1073b4f397ce23912550bee1c62f3385d351684dd96a69a9f0f416e127a1365b9762f5e6819fddec423a1e7f5333b95649a25ffd6ef10b818ab9a46faabc3354cd6e92d568bf11310b0487a1244f13b10f2f52186e643dc90c91aa04b7e3df7c01781895eb27637a7685332e38d0dc9caae840bc7e0483665ccc2113c5454dd3f2fe567b5498c09a7173fb4b88bd8d0a115d17ca63e9b0abcf42a112bc9b36d22ef6f51d3e8bb3337ac130d85c8191b978ca6380e4bf7f76739c90efd3e3906ad3a4976885a145f9055dd77845d3bc0ac6b684ebffedab213b8511baf5f8ff3f12d2b43f77803888e6cb634594f480a53cc26d8c806dfae874999e0a07ae1b6781abac7d6d51c13756ec0a78012c6c2aa069b3e05dc0b4a563396956cda1edca8bcc82081b3cf4d02937f8e4fb32eba780c3273cf3f6799656cdfae7b907055c49947a2f9803e2c24acb2cc6c680706e55161a0af9b6b9c2dba1a5cc7d7cb5b416cea66ff5c0d45154a46a0dac8b8aa4c4f3be2e653a65f78680a57f34d73e9c3a6f9d5d23e4aa64742e5e8859f8bcdc9b4de1023399e2c6c2af622b3b18b9454b5da30f25022534d562d0536f8ded49bbe63fa96d4f709e307ee0c441eca2a6fb0c4b8e1e83dbec794f1172f3f91181fff8c8860179f1fb784f5313299128f2341d5085a63ffff6dccf4f26e0b7f531296e1de981beb71f11782c50187a986ac00bd4a9a40f1d96f555389bf9d672cb120c1ba900f47d88bcf413e3c22e6debbe1c63be2ed5cd58e0634611248170fbf64bbacbde75ab70ed25f214c2c44cae66cb547a429a23f4754d474f7e8cc7822ea83906e56fa5816580eb30b3dfe44cfed62db5bbb92c819b6c7c6b6d3933f7b36864580f203049d46c4e46bad020c7016ef75a904399929fb1a15e46fd85d18fc494b0e14082751557360871c8a54089ab493bf11cb2366badbfc7183c8893c9fcb80a82aad5481bf1b1dedfdb4f040731d8eaf5e3ed51563c04c8ea11004d7edcf73a1c4fc4d7c7e2af9ef59467e01ba04da61f4f0fbd493aabaa78e68c0f91467c0c1fb30d528a7cc835e17defe134e2aac823ca2ea7dd40beae9d2d7c47245b7a6a8dc48be1b845fbc8f56a609a50ecde662755d7c299562f860331be28fb7469d42f75dcf8d4e2c4445282fbc1c9fb2a94cf5d77141d36ccd467eb294287299847ca9aa4fb70f2c5c3eb84952b8b0bf3d19a1f925c508191b0395d3603d60ff72498a1a88e0fe46a26cd330b78bcc438bf2540a9bfd4188465ae6f9724bca13f018abcaf2f95d271360453f426d88b92b3fd73a45e1d3adcc06c880fd599f076a1417d705e9c2fb77854d63774ec5d77fcbca1d118dd46ac1e695e66eca89f712aa5bf624edfa9b192c462de61ba55a73e871453c3bea4adfa115d8568cb1471754386ec1a7b2398fa377c3f28bea0fd6fce7c27cc0339c302af9f7e14f9d17ec9e9f1228f6f653e41041a6990d2a638ea934f678d85cde6d7016b5e4b63394d633776888f288bc345f263b99712b58ebb740f3029de6c1d612bf29c3934bce3b307199ec8fd35e6a7846d44409b50c114bf7e1a4855ed1e9eb899e09fed2bd6a0c5d152661e3514296da836c2204152497bdd83bd65fed29049a03dcd97241b10a5506d8f367fd6eda4330f81330805fa36456c395cb00a6484f223cc9d8194d869eda1d82fa10925caf6f4514fbc15f986ae3f3fcd0c31702002462f8f668be7db64c02576810bfee8085e1b5da6a9617ba052addec8abe5dfc2cb0c17d0f7c8459bc0f8bb285520b8a02cc4b5e2f51ed07752edc1598c8591db95802e9240c91eff547793cf5708741cce6425bc7a26ab630e51c29742da2140d97617a1c426d8a97353ec4b297e9ce1d88a6a6f9a173ddc3fa787eb866224903f86bfd1f47eb9d18ce4d9fa92cfebba957ba289088b9ac03570c4bf9ecae6dea9044951793bb65d9028be02c469b726b0712641437f7b2856c67d904aa1bfe4b62cd3a4bd69875f54af080dfcf2b3c2d755a0e5eea32ac5252693be7c965ed33b530ac25ccb4dbe2d233ded1bf9435097165109a88cadf5d4045133f5b0bd403962fc2d74f912a9e4254241852e2734901d63069920700c3645f9b30ba31d3eb0cc1ef2a492a52e41dbb7a168c81d32a9f753e6f9db30d05be17b964485cf5d0e1752120aaa286b0df623a780e4018a54fc2e0e76898d088be3305c473dd5c6aab4546bd944c1df1a2bfae88b8f3401cff304b606d977859a72032e5bc910cd3a5e5223d58e92a4ae500cada49171f10ebc3e24fca5896e81b9816b9ca2754d35665159aec8de065437e9dc749f863120e6dae9d798f8d2ec13d379c274c361d6446d5f5acd0314872e4e4029610889c5fa17a4944e2b07f1ee83185f02b69f2fa0f3b4ef9a47bad3eea5e6f6a1c30ea6f43588294bea93de27cd48c9bfe78edd821d1f90dbd545d371432f04f96bc5688a345baa8487966536a67697ed508648318a427d87eb591e1cd07762a737ccae8a2850a7de2d364f4e48efd4dafe96dafeec3d281686702f0c0b9184094aae889775e487dda45e7381721523ecbba457549299287a484b79237b7e43965f4e5bb93539b6ea33d3743a53d1d76b6f4ae46c59a45b9a9d36eccd249dccc1552928cd9131e90517da6d3f92a0015729b025dd0923710e094262f45476a9ca06ff5576feb407019c1580ddc99515312b9ed1c924c863b6fc68a54be877c84206552957486c151842f01df91f9a01ac72ff0254e0011993eca1e0e4d6b93c0ff5191ef1b62cfeffc6824efda0b63ee6962eb0531ed87c06414e0dcaa8425dbf1974aaac12dd8aff2fb27b38f3bbdd70cfb932437a3dd74415dc39f8e8552ee78d3a6cb80dee2dad62b013f684de44d1def2cd4ab9983879e903e8649142ce1fd8e11f0a23e0b45c96f2e8932dda705f1a7c1670d6cb7d3c6d9df3be68ec38e8f834ed1caa4aff6420ba3f64fae14cbff5852d0ec25a626f9e0cc397e3aaa932136a4a919d7d219d1d2805f8fa801a7e32b8b5afda6cce0d687c514467dda17816d15d5340acfe6a00ae4d3aa155534c91d5e1b552a29fbcb0ee801cd599bc23981cd0a7bba6f8fb190ff79a7d95cef1ae534511e2da8234d4bc34137f7681730259f7ee19ca74285d9e474fda7743f5b7381fc38eaf261e37d11276af0111b4ea18bc02e1b7d71447b2001c0db5d974add20032edff5ca29c233273bc012fc0223563e8c4e2ecd5c33dfd09144e9d92a5b3349e17e80aebc633b04cf2a832f67b2d48aafabe119b2bfebc78096e7a2260777c10e55262ce4c5a69451820523ea725ade7ada09c093a3f012741f2b4a3b13319cad0bff4ba7f26eadd139a3ac10c7e2dd645bfc43e3af385a29500163aaab36099b784766b3f42298765e18f2efec107c8811411ec6af77b261cbfc4bac0de0def902c6bb48bd21ca21759b3a0f4994dd9e0691f391ff0a14477f2e3b0a831dfb4399c21da66542ab549f73bfd2f6faa7974c7a6894b9b50669bf9235dd1a1bb85ab77e26d5f8442e55dc4e1913a1a2ff9a0e4c4ef4e6d74571f03740489c0c1dd7eefb07b18db0264457639f51019d29797aade45da3cbd9f5e9f144749b83c00f260984e27b3671c6cad5166c2f52ee26edf51b8a1eb02a6d6ccb5982877338c1cc8f908425e2c47ab050c7ef76cd6d7394f2d8b0bb23365d5a78d531e1fa084c1e2b41d7f4905edf26d33140ac0d1a4663f529c53774189950b9769f065a1f5043ce703d17e557e6363556740370ce2724794e00438cb9e45cf554ae41d00b6783a73fe96f75f13b3189bca144c18c4399c359b230ba5e7804fcde4842172491a41b56e4d08e9a61a09af4cdf88782405cd914129d19a3c2ed3211ffe53097527f2faf6d5f4512e5b72c2cb80fd96d588d48358d81702200bbf6674f1b767b88bf89f63c84a9fe451be5e96210a57d0ab582633d12d2454a539027b4fb0f90190c12cf68afccd62b80aaa656cad6cec62d302e62b0f3b9e7bd5f9fb50b6c68e96423708a4a0d44943a7571f3351efa4db54caf5b1596da6ca0a837b70d409a2a0ca651574c7c3a261f4729e5f1d8a30182b6db56529a2d182b9e289f7b1cad86961d46e0fc54532467c6bbb6829041cfa3b7cd0c2c343278346d1ee6580699966194b93c6b1297f7fa6eadd71c0368a357bbb9cf7f6ae62d46a6f16ae4f5f0a12cdefc392b0db115441df1aca822f4e10a1f160825f9bcd4f6e7d239dadf3f11180e90e2f4757a563652d7c7ab07aa71ea7291d68597a531cabe0fd68c3c94c179dbae61457c42aa0a3112f6bb0e9519c972768af0286034084e1c5f3e2ff627c6de533b1cef8a0756db6d48e9245a26dceffdd6248a4ebd6a9e7f4ac7f5151a660038ccf98b2c3dc63a7be641324d54b578f98a60f4c7d5d51247110092db511b06f9953cfcae71dfd946c33b867e3a6bc92c7ba0f7fc5f199b54e3f3259e229ed170b445e8e1be3bbe3a18803120363edcbad59c085c1086ec5cc7685bece4ee1606cda307633d83d6fd4b25cec336326af1fb53e3b2549da96f0328909629b318739f898950833af58c882ca4410f724bc4d8c2143de2c379c178124d6e77828bfad8950ca0e446f75724228f319ec531ae3d82e3b79dae393fa800cfd32afddc891dadf093b16a27bf45bf2364ec9250bb2e02f86ffb8a746cab04eceef1acff8d68f48883226bbe832b33b90370a7d0cac6e0d21f16c6fd26e37ffeadb5b894e18fe6befa737a4bde224e9e81abbb7fac5b4cfd626d9acd827e65a6b30944643003317ec3acb0700d79ef161d45f4e005885680e4ceb4c50c34f89edf06ba74df9c4181fb0550bd4c4c1f81ffe49e5ab4f94840781a77fcf3ccfde0117d42eb271f3e5b7df130539163461b1cf5d93c213b33c1b875febde4e04829fbf27ed766961be0ed13c8b179ad2ecd58e3855bc8d668884cf4828b65c04f447302659761487768c1c41074305f2f162e99ff14780e8ff379c04a5a285b820119f4589f973ade9b373d5c072d2d6997432463e54a261549e3e9b49a51a2a739253def90f33b9c7297b1af1ae824dc326e747bee8a180717850320a7ed9d591481d59068d3fb5d360a001cb73e1c279b620ab321afe788daba0b3858d4485d9feea6617ccf1de70167e711fa40279699300097dfa039b1d1350a7d315ca726a090f7e40e747cb58300298e84b0b1d7cf669e62c3422f3d3710e7cc4c3bed39f2da380e9d6505ea0bac9055df6e226976a82904fc0afc3d93b254a7de9992892e7b7a6cf9dd68d2e4cbfaa27bd686ac1dc9be9ddf340a97b325cf87dcfaa335478067263240af6e97b5c2cb0c23e395c2d73606712946bd1015d0650e7a20d7baf24e75e5448be941a271f028b76e1abefb27240f07beccf5b7c3d8fa66afdb6f0ce10e04d374c9f06f86bb458c89c0d75fba23d69899af4ca62867581c93ce22c68b9dcd852bd76ac01dffd07178b93a034764a24b3d4f7b28dda070b7dbbfe25313d31747b6fd4f72511a31b12458e942459965b358bc6f440a2eb3fd5d9fceef6aed1af7ba86f967ded45982759361102b55b3054cc3b5d0c378b302ef04c218119040969e3d12b9d5f031d82e14b9478ba23064caf18126d0c84f6f8352cce15ac2fccb3f1f672665b918312bab6440ade3f0f4eab178e424e31bb6da29d62d7decac1e00481d3052f847de4e3cf2b0cfd24b65ae96c123533688331bcdb9ae823903a1e66df9c048932ec886ba11b666ce9f3117b2ab9b33cf1d767fc7b70e09fa452fdde8e9e3cb08fea482b8b8bfb835701e21c9b9668179b4e2e7b500cdc4cd3a227b8cd2e3e78bfcce0943b9d3df39ea088b26e840f557be0b759cd1941185277f876885daf6267227e898d22f67645ca10cfbc828aad32851adb4946fe108ee01d91a7d70d5ebe858f6eaac33249d00e6b29257548c953de2362563da6efbbc948c8631284995bbb168654b4d7dce555b7015e0c0657482b7f76b68f974312a0dc50c903cdae7cb81278fb777ba70d43e153b61682a41c5066a80bdbe6a75154519c5e05daedc181b0f45d300fdfcb403b8bfa2eaf0eeae542201e59864ef764951c53d913c08e210787607bb9338694de81030487da9f3df5f22d20972f4bc9e78f8e166d445c0336cdb8f2436c455b4e36b3cd9fa25d21368f4676d06a727f5196eeab1fead4029063becdc50bb88094e46fca57c1355525471e99c85bbb975fd5f45a59fdecf14bfcc55926af4c8cd389483b59e290a42243729105d40f4f058692be1a5b29641873c885147707507378e0488faff531b53b3162e8310ad26f2216b298467f42468d8ddb4871ad9656606e3a867661dc53408b070ffc29bc5de26ce6e7bfd99251ccd536814c8a4f04d07276caa7d54a80a0993f134268449d509c19fecdbfe587a381d3a06d26dfd1e35901a3397332763e6c80b23b274ababd1afa9719d3f2b84c5b9463273fddabc0eefe756230cfef47d068836d187b30428e7634179326b7e93cc12a168ba8a25189ac77bda57a56dac325913e0eabe6c119f0f37750d072a7d02ed0a3b46c3b98e4ca50ba6ca263b356eb209b0d324a88e68c68ec2cc503f8e203e1fbaa74f83f965ac8a6e9fe26c7995cb20d876ba7c6c1ef6ca378ab215028d5782742679478fdb28cd10f2151118450cc052b925a36a0d5ccc1a0e07494a11022f989bfc7c141dd6eee0d64416e812e400758782bc8d45c871c7ea7226a5d2e3e929c985184a5f95b617dbaf3a9e065c374055f68d6be2f538db297e9bbb0381fb6fb6a3d733122eec06c6554f6f18c44e28b68f785cba60a68adf6038f764065d4cd2f7172368980b53b4bbf88b157436c9f6a65530b944dcdd9365b7400090f3ebae888e5da4a5109fc0fd7bb20f4cf70ee23f0514c15224d1b0cd2ef0ddffe54b0c2cbc60c553f1b067d24895ee985e87a4ce6c38183bc470fc34049adee82af1a9c4d2644e5c8fbb9a769a973d0efb60589c727323f7612d56ac0c16dbe351520504ff6084ff1ba981da4f9aa89baf71e63fc0ca705bdc7c37b1b617e78f5b778df86d7af31c79e251e50bf4ead9acb77473afc9fe4152c75684aadce35ea65dd3ca969d8e68007cef29dad0468fdf4039b3ef33eea0b77120e3a5be308a2d11add0d317691be07cda77708d3c3de825d5821b339fb6d610bad5a571521939a5c2070dec1429914abedacded97fd50c61d1dd776e33f70ea6c721d431c395ad2562a0e8903d3c14eb07fbe7e7797ec4ccf029e28e60731de80aa8381de94d37eb60f0ae9255c8c4c1d9cf67b6783abb57c7b8fd423aaf5e62f9480b7daca27ca70f866d2d436971c6d2177ab8b9bbdc32e59af597264db0fb8b1ac14614e619fa9ecb9833487d02d1d895b1e56cc121e40bb7e4d4aad678586007b66e265301728ca8b924ac259a1bea85fd805d7bc81828cbbb7cabdf5fee38db4f5219bdedd838616ccf64fe7a87c4c582e9f1fd0b09eeb70a6ddca48e9f671ac68e0cfb56c4c15764a655eeba77b9c5429eaad60a0bfd46e0be98041ca0ecc6152dc55a235b90530f68bca18fc92c10b1e35583b0a7583a0b052f6224018541588b0a1a5d2c259a6a624d5ce417994186508a1c898aa1c51a5bb858aa534de5c387186a33c1996a7b5c0ea51e069667b8e6f0ddd96440d2a9eca9bb674ba2ea17bbe8de8c881f730032bd28114d8add217ea6e52c7d2ffcab3edc076aeded7415cd5593861e869d627855780cb41d63b050d42e51ecf94d6cae6e64f84cf14000c9f07c80cc5be184e4d82bdb29a2192334160131e08b1ec793c83c0b02be2af120bace843c1a067567877a55a3f3dfa5d10d42c9d8bbc04009f756fe3fe7deb86ceab43554892485f11c028cd2949c98a8b9074f955dacab8a22185bd4b12226339883f128e0f0b358fe45bcefeb1870538de80db96c98cb82793d0d0fddc0dc188161b356ca6bade7edbb0511564e727b21fa256afd677bb1b0d1033df232626f629f991766e9d11038f5b2255385e9f7841f783581df2256706b95962976f7d1130e659c7e14eadbf8c77c5326c98efed910c99fb97a338b10de2ff3b72de392bfc96ceddcde1880c83a877db2cd0ddf845b59bc32c9f19c60fd7f4971e0bf3d62aa5b5ce5f89fe968336182f3245c7e12eb9523285e811d1194e1001e3ec9a749f96d3b5aa3656b28261f4796b65551c34350153c0577a523989532a404db5e409e2abc6a3a22a89a0a494a407461af514e59c7176899bf60ac54e414d95afc2fab84e14c70b4d9a611421386e9ce9b465e321b1f38c3f7215e8b6ae8d4b27169cac377a1a39a6b02c613a068cd223d51356a7b1756d91e372d50d3ce8c0c45a0af988c05355c10380e5391f39a0f1c7f916e3ad063da37f43e75e61b0ec1a4abefcf73bfcfe76c1362453cf90d87614a27aaab61ded2ea570e44265117287246ca795bf4ee682ad9ce5d928b2b5c08d58ae1e171f86557b6b28b73cc4409e3263d8689f40a565d642de6e5468a5cc007377d0f50c81added52f839f98ea212e80b5c31356d8c5048b29a52161cb6114b0e4809e87234492295f69bd65df12e432b60ce4b607bb040940bbe7df34da02cf4526bfd0a3d5f45ff510eba8bde5efc423f94240a6c6b9bc440404de06f84a54c5faf3b6247898655930c654c3446f2357316dd45b814ef96630f9068397e0bb3c53251eef6d26fbbd3a124097904e1f993b0b1b8f6727f28677e5f17192b1491ee8dfae49e719e2b0681ac576ad2747832c1540fa71f6a6cec3100d48b1d1b9b240d07df7724fb8497fe4da50259e9f9646833ea5d3791107c31801ff5506d0406f7f0aa235ddbab1f4a488efb31cc693019a77c936bd1a14411eb25eb1c7846a7e2e7f0e085bff9b2d4a2ab587e7a8b23a5b64e1b9d69648dc7f7f93a23ac85dc15213f0b407b4f77d0539685b7831384d388d3bc7aaba707c3d4aa71d33e054ffd80faf9e52eca49715ddbab4ef529899a44ed4c69a05a65a2048820f1948f9ab1febd794340fa66e1e7ab1a7104d48effdef5657285989b15081b3040640dfa95b0aeba894847db100358ef0c65ee8278981c382e3045b3ff2fd1d97ee4ac145ff3d3229fdd6b0e9f4c24fe9760ac9469fb1bd0b723f8453dd414c91540636da968dfa1efab02a52319cbeb09e9ff3a540f3b820d55f2ad5f6ef97661e3a077793d971e0efab7d119d96a708030f47fd7fe280caca21537b956136b7bfdc7a8f036b5b8bae0caf4ca6ff8e131ef284d766b84593426a78defba999f6a26c3a070ed4eebbc3be15c4a6cfe0b70dc8e58e1141c174eef6d42fa38fc4f20a5d0341e6dbc0edb1975d67e2713d3f73f5a8f6802885a2884f5dad341a351d78d333cf79ed6691b2f6fa9ab91dc1e8e720bd10742e3e10efaa961d4563abc7ed2591983648885f854bc9b6c953275ea936e76fd7b3d5a5365284f9fe54ed8b7947343a8936659f0744081a2625f3015fb2141fc48e0582166f3e5283df3b79dfc6f0451ddc7c48c7dbdcd235ce6f90cdbf841b63ab7aa22e31e988ac3c569d15ce094a3f2e31f0b110c08fe0f676c77988ca83fd51f7fed96d22c46baa69355907996410d71315fb001d7e2cc50d1129f28dd63b0f261c4cd9500ec4a7f39e809a004af589b3d6bb579e79b65b63246217e28279e22a5628dd31db6f3b2673e6261f45ecd5029a8513c8cf46e403aa7ae2ebd53059992f8f2c809ccb71c5913d7316f341e0d1d3c6b7c64b58fb36b39022527b4bb28bd5e4d0eeb720494a1f4168e20f9e534476891379bccec99af9b7d66346aa3cadcf7c1b1b1ac5027d9d43a928b23d25f354bc38d65df37a6e81e10c1154dcc84471392e79e6c1197319f506cdd1a1729fc557c6e8e64405eba6fd90a1d794d71f1bdb9f4b831ec011241ecf7ca20524c81cda77bd6a232032f4a7ffe2e43b6d1dab9453466e978e39515e37ea9feff61af972d900d814fca074e42121d8cc3c528279e5d125fd8ab1b8d0e84a02df9abe95b918962e14ce4fe249e43a3195cd6f404a190ae5aee70ab30fb68422327719ce8f8d96121e1596c0b458ac881348a57a9f909be94f617cc64ed99efd3aa4e5f8070048f49a0abe7ba1993ce200126483f8466a67bfa3cf3c143cd79ff8868a89049f13bb594fd1a8a09917716a8707b6980dd5740ce36d8c2deeef1e82ef643d3f7ed5d4c4dffa2106970778f0c5580b47c7c4f3794419de5918dca90a59b7a18621701d3f9f9c4686d9c5e61d1c3b027599cc6c62f1c8f5ea53100f5d5aff0071bca26db0fa3f7f945c226a8087f1e0bbe05fc40d527cb57302fd6e7d505f5ac66f1aead72ac7b15b3a5ebfb912cf6862101923c8eb7f0cfcb562081b405fe5bfa13414884e327ad00bab71caa1a05a2a301a4c66e7f57dd2183a2e467b400d155be56895c5a3a6e51ce982798576968af424b100b51953d06a754f5c1619ced93bfdee49047f67dbcf466a41740678b6e214fa1e40b44498f29359ee06a4d5ae32d0bcaa04f699fe1fc7ce63d2f288c15b6fed13851eb03b05fd1954620a08b16d8da0ecf021c474e75af4b73a211428c48636989d2d7e9dd5391bc9bc62ac8f690026d1356dfc9c54eb44a88c19ba760b4aad81e8d3cc93330bb4d6899d437e88b141897bb27e76cbab2915f3a0c26e156c1b70c2c33227e489cecc4f3846564dc2333eeeb025c3a59e602994e22d821749eb784bcd54c6791e1b79738b154d95c973953ea08072c9993b218f73568ac899e23892f1b8668dd71af95f16d6d90e077ef94422c5da4ebedbcf617baee369f03c330ef443639a2ff371299efb82a198c31002ec2aa73e3a13583e7fcca0b857b5e2d8082980b7ac33da42a4a9d27781b8a68a708a6e12e4438597fd7b5795604c8f89353ee169b545595daa4fa84cb724cccf9bacb20cdf33ed0186c1b2f36d8ee815d0de4019961034c75084d777c010c2e3c3307a8c08e93a81db27ce53e922702c8a5f7c34120d1e6e5566cfa0e817c93a153a5aeafe1e88817ac67f713b032a5fcaec9c5566bf68419079979e16c0a3532d97ccd2ae9781da4446aa33a479054b1a313ff23e9846b093cf26c23b2f0db861991ede5ea3e88f2c5b36589de873e1223608d2f5af8dde84e2840124515ff2561ba765e58854778be0138b7cbc86c1a607e9de9a31d917a83dd70e71d2cf8b659d3bbf4e1ea5ed301e75025c335084f66fce19209cf2606cb4c36b7b1d650b342a04dfbf3e5c2a6b3073c4ef2356928e855a9a5ca422442dc1e5cd8296dbc7867027474658d7336706cb01788c07aa6e858b909ea2f588a4a71b381cf6464c8619d1ee5f846fadab672b343f5171e6f0ff2e25a38c3449d211adfb388d541f6bc4dbadd6a70e01e8dca67bd27ce99a4eaee8503f2e610557c62d7bb27475ae23fdd789bbfbcac64bb0aca256cbbe1e098258134ba3920afffca3ad19b03e8111364f6aac5d300fe13b2c5f6c498cd39979f84a3b162781dfd2f63ab01de21699b0d8996a6fdbdb9cb9721b20da41161ca8abb69b754fd9e27ccd31270f4d78f2a086771a7128fa47b09f95701f6a042cf8bf9419b1c0278c6a5bcef81b56f5830ebc7886efebcfd0989e4ab1b8c1f7f9cce5cc7edfc4b481e160c550ed009849e7df5109d81ddaa8ad7430a26444bc52d1c8835f93a37e7db7fb447433b81e9e63679d349a46409f232c6d73f33c5093809f291af9fdee835fe74a6f0a5bcfb3e5cc8010cc7b465ac45b1fa6876d252423c0d515f0482d3d680071bf6bb77e017fc64aa7391df10baa88c1d262d7bf05ae2e39d963bf4d1735feb6e2a390a0dbb18ecd9d223a06be062a335878ef69bd5bc6cd40d44b41d1cbf40f318ad424223b8f600ccd7348710b36b3e632b9c2efd3d069025c4ec1269c0995a064b7363c75be578faac6386db61590e7a2987a2b77b8f83333403063ffe27c43490a9f2f142db2706aa21ee14e1af1fb33845e04ae47f4e978a30d1aa0de85fc2fffa8dc1ab59535115b218b85f25085f4a2631ccba3b8f3470f95ada2bc3b3990d72524901230dd4b039c0ee52b63fa31a4367f33b433c79bff2161e570a33e25a5be55e598c8725787df539068b767ad5bfdd9bf9fee35878038d75bf713b6161b97bc1bd8724e7680e55f6442924598465adeb6948f62ffe2558d159a3d738eb61e564058ee4b10cf337099a98427e0fcb7df6794de6e5f3363c5d9ee1f3765bdf2f455aa9c27f6b04c51ef5084c9b151cc837e4ababc093b721a18e9ffa4b8b8c51f0ab06df8cea2dd3af255a8b5f54ef4ec7a1c5da88cc567ae33a824da254aea36d7f595e2791e4a5d0173add86f251ee0b26b75eeb6daecb793931e1bc15599ab8eacdfb85b84639c25cac0c3691f121f06b99140a579451e3eff53f2f23ab413a9c16057ab7869851cf7c8ecea8367eba0c0f51b748dc97d08f6f4cd6df47ca93838d1e1beecb2339e320afd2ce165b8311ae7d1458f6f71dff080282e793cf0ba21bbcdd2a482573f6ed58a919a9c489533a917e010b8feb56725e1bc552bd46ff1b26125b1b78fe2824e078f810842aa79caab9c6844baf06f1ff1d4a4748cd7823dd1a8c9a3a7fdb0a6ff70cc074bcbabb202134ecbb3428db7a39621c65c4843ecfb7e0ce671ce1b24bc04936b3ae6b39131c271c3ac8289613c76e8ae125b807955b9cea343da765f8aea89f6efe54460c7a9a3ba04e926ed9f59a4001ef4277c0191481b3fbf2a9200faefff4c481ca4963f957ac54895e2564f79ed694a4ec4a5331ed24170defafae3e5863012a1734f3294648ab4d76bfe5a2854d6ac6429fce27bcd64d5929cdb77a1c6121c64d39ed6a4290ecf7f8c07c712b7a22c17291d9bfe691ddbb8200b78ed69c696a2255dbfd1958909d272e2c80f81e8b41fbe5767565a9b9a9ee1a9d7f28a962e593d2e842b44b2bfda23be5ce39f61b37fa65d8191da84eae3223c6d96cb73dd4862d725cbd63dd97b724feedc79bb1fea65e9891bdb1e2fa1919f9655105e3b2538e2b88dc7e13d1cd6597e15e9505fce61dd1fe9b273db1d3db2d91c13015644a1e473c45b0fbd17807f7bbc44240a5072a73d74401c2fc36d82d36a895fc5cd3e5874d9bae0b48a2cbd9e955d057075f74d861332354f74fe6e1724c05c79b013f09bf72b3bf8208c84842daca7d8a5ea7cbe03597cffe400cf15cf13e5f4a8a5fdc9f577e22d44c731d36d4fc63743a92ff0bd0aef6d14798efad8630ea8455927cea906ebcd438feeda62102182e3cfd7ea06206eb5c7eedfe0acdc6f5d2f92653f309fed088fd838a65cc3232932137e0c8880e034f29925731f6524ff338aed71e1789a5d5f6ef522c6a5fab2b97ce838dd82f080cfd731bf5a662d1373ffb15516e443a6f9d6bcd056161d8f149006833483f3e292523234c67563a3137d95786912cf6b68d542cce7da31192c6cfdc532555a935dd391402740795fd4c6a2dd9665bd88cce1a8f48eaeb32e2862997750f89f92320941f5779a31a37f3789b0620e26eb4b1374ab8be8f85a3c4e56c691489e79df10c0b2fea2d9a2e8922ca950f71592f9936db58d1bbdaf2ae0ea3fe9c9d6554459508fa2cd81956fecc9b1d30d582b8fcf52f0e6ef2aa142033d77aecf82afff65df179d5c0c3169cb4219e3a66116287e93da1011624ebd6d6f21fcaf60a1f7d0395f27a75ba9242263f26379970c7ccc160034ae84f0509b47ad830734cdf4fccc5410825d49aad95447ff88e61f098834038943310f435b442759e44c455d69ae7f1062984316435e11b3b6395c78674d58222b4d20e07d9fdbf470011ef8d7c80c9abb98466d0a609cabc8dc9a43494d395820c59529ab8b1a681f46d7615e75ac200347ffb2791de3a53e9ebc559a1fca616cf63ed3f70597a4ac484b6d9bd1b1ef845dd0564ac4c6bbc136fd451bb1e21938846374343567d74d2ea1328a5b49569291350b0edf66c54993ce3804e840e91b9d0408d35ddb7b431d30eaba052ce79d48a11b25a037d944ef0f977649ec6611c85191366698322a8aedc4e262e46d1c57f3018b5ee86613388223046b0e9d96179ddb1a2a0f7060c931485eded7d8dee14b3d355637ba0dd4dd79960485ab399e191dd8b431cdeb0f033faf6a27d9348cc78c81f0359e9eefffdbc7dcf451fe7e6b43b45149cecd376a7fe5c603e35cd2d4d44dbfd734fd774812f9739883d133cf62ce4ef11a62b52cb1c8b81cb0c4ed02520cf781858a7dd044e7a544d20de9d2d51d733a6b668a318ea8fc791dc595da8ddbaa6ee84428f1bb17946ef4896ca5b5b17f5d12b2c174f9a0e85f754346f45b9664b911fcb82546e9c048f387674a8da9807cfe882113b364fa01ae686bde9860260de4f3483e41feec4ab5692687e9c403e93f710d7749839d08e57182ffeaab61e397e81044ba070622439174b489ec9a899a955e859f83ccc988ca665ba43494594eed2fd36115adc55cabbe4b1f09565d1a1affccfb1a61a7f0bb3ea3a9509ecd1cb413db3ac1ffd1a83ed5f2bd334812bbd824d36abeceac56cda4f3b2d7737689f5e49ee0ccb1ce61a724d820934b6380077fa4599b6fe2d1d8b7cd70d21a838bdd1ba5721d18e8585211ac61c78bdd7bee445654f38659d5e0f3278d5293004f91075bd59fa49befaa098d16f8ca785d7aa004714893799a9d2b1ca4382dcb2f8824d6e6c3cd9e19563d959dcea30c3eb6c7ec630d01c16adf31cb05e8ccb9b4b96e70acb529f61f5325f94fc232241d968501d4390bd65b0dd7aead3e1c889514f63c48f45f3256fd9e609821ef3726bbf2ef722381cb1df5c1852d48d8a45c48d35a1b616617b4ce00625253c4995c984ef6d0f8f3d92940b55407ba36d9db87507e9ae89dc21a4d799f3d7548b689961b92c5257ddd9dfa8d505e71b859969f7ee37d77956f9f3de642ebe83f0f766eebc561621e242b6b35275224ca036a070de587097e70d3cae45733432ee1db4c62a205728055c95d24888e20126c2a45e0190ad43b3c52f9159f5b664340b84a5a91ad9f423d1013468d81b132e909c8f06a45754e32524118218e4486c147542783fc94289d0c5ccb1ea4b23483509e74225e42d25911bd96084295bdc89ab2d4de7259449328b94f8d3b8008c0f66c4e7fe7f1f7f8d43eef3b27b77f747335d2d0b4bc8267fd0d8683073bd7c3e7943f352fec8c9f3782ccef9691867e78edda0bf5276a26db54b018260026b3b15bd639b6401b9273e85ff256250608b10e7e6d48d756b119a636608b65abe34cf6a1e0f8b47b8b0f115b2e5e5cf0df7020756d25a7a795c34fb0219df4f7ebaffd542b96ace31d186747e45050154c486842458583cb35bd199c5e3291951d334360ee14f7b7a8e4f0896b76a74d5d3ae322e607645c6ef7dd4e7c61116100bb8fc7b94fe202a6165b8b5ac3e37ba7a986b534249bb600c212bdb877e2403caecd9c9972a4dd6c1c11506fc20cb06e8f6b9152e8bba99b4169bc0445ee3f384917f38e5335989607ac8723612e5a7cf0cfeb47f0cc0a646e2c30b7a974c69d154b9520c2c048963ee0e6fbec91eb3983b121eca229268e16ae1d3ad1b56e70faff8f4288be02827d1809b6792b7c66515ee0613d4f3804b83f73ba8fdb4546ded636c19f8c578e2f437a24bb4610c31c102d969b241ab17c8929341c90163580564f451c3627266b3908a847495386871e0c23a2c68b8a9da27c213ce31cbf8326504403772012ee64ad75f04055302c17a8588a179c6417820f7e387c58fbea8e5d906882901bf5fbdcddc66a71362630e4b19945f77deac22fa46b41d706858a1f2eeeab6192060147898f19a9b501a3b5484a8734b545544b1ba06ab0db2f101f03b4ef072ccd9461a50d82a6ede54938ba41367c1f8130c1f74f7720f77861cf05168ad1b748de98b0cdff7f41e8d0e94239cc127da90d3c832a3b6ddefc15dc53b5a0cc9170c96a285c44fc89d5864d68be7fa3005655cf16fafaaaf1f0578aa1c56af605afb717a984f8e6267da0886d15d754233bea330a7fc71ff76fdc7f1d4a8fc86314ee485a6896250c5321b71a3ef215465c253e2be66ffb34293b677a130813481d8a8a36be7ee50e9ddd2ffe1dd71126d90b182ab3474e116ce9531c06bb4dea4b2598401c3ff5a0f73a593ba441c26028194f97ea8927dedcf174265e425ae466b2d6aa122a351fbc8ad7d965d6cae7d46a32d2dbd3815289976ba87112b2f24b2c05ec564a799da83852171c842612aa09b522f5eb6615298ffecf7c1b72833ac783ed51dac43367ad1ad7c7bd5824cc2a5f13c502dc68d84a0c58e020a57425c139e8e8846d38b211a22342be73ceb0c1eda76fc07bf1f1d577114e8d201266ebbfae5106c253ce221122820362ecbecae668fb7768d37d32c2ddff47a19878f68ef9c85d76da83ffb82d72ebf8669033744e48e9b036a64e993efdf6f2454a623a2efcd20c7837c4e3b7f2b34343232f743c3351dda8c1fa4203569d008fdc61184d4fdaa13afd6cbe0ac5d92fabe82251bbf2d0327a77d493cb8684587fbdf733b5aa4139ce11c11f9143650a27fe123634b6551892272045647cf34b95e53f0005e6f5fb9a8dc2319b47ce1e6e4099b91ba9b29d4cd76f9883da566aa53e7f217fbd90f37150f6128cc6bed28d39db6ba2df216e1210867cede58b8f3fc0e1ac4fb35ed6e71edaa3fa3802eca0163dde27991b82ab8662e43a89a89b6e48e203a7603c0e7005ec99f1596c0e4d51162de42685c40bc8d63119e23d2ef860cd53f6907b60671dcf54177b6d4f1baef2c1a2cea26c5e7f34d4e44024bbff85561bd33bd41fad4993e489fa0f7525685082b62f1d26f181fe772ed5aa7819bfd0f6b95c2dcc29a670e960bcfd4ba72b4e618a00536e30377202de9e8bd7438d42478b7af95c8e5ce492ef10a966c86359361ba0bee7ac030a95ed87b22f293e0e4638e0c0d5cdf736ad526ae29a898be753bd4f9ba1886166b3b53baac1b5d2e27841dd039431902050c7bcd1e98dcab3252d003dc58da13a3ffdf14d210605dbad0b667c710957ca303c9222e6ecdca066c7e03d8ea6a874013b51385b1763f5ae2d2afc25fed9c8b0270ec23ab18f0a0fcbb324c236c14f900f38015fbd463c1b63f7d6cf26fe6a0ae10d5a90b8c14e0867239e2c14c59d717f55c918e48a920aa49c534a8ce9af01586e8bcf5fc1c12e67a2953e1fbdfb512e148dab5d6e09ca425020a50a2929ba4d2bfd18bf9e263defc4573e723b6889d0e545b89caa82eb2e3f585f1542ae3e102b5e7fcc004479311463dd7b66bdfb67497b92a16bf4ac13ea21c6758bf61a11c3eb0c7b852a2c5554fe0fcb280c7fe864467ac3e0ddb46bbaebd66042a16f52a2da703e909940592f4aed08d3bc84d369926b767cf7f196ebaabc2518d6bb1411178b615c86894e744b4d99f1b0f5a0dee38fdedc75152a5539dd25284d172b582cd20ea24753fcb09bfa280eea9bc5361e46fb19be09e61f00fddcb6779255a36c59a79bea17a59f65b0af4f0e3955a2e84b9e6038af63d8381ec697547acb31ec792b731ea1dc07875cacfcd68e4e28c4ff42039567e238bac3c65dffffa30425c749f4583646695cfc693d97b3e672013122e194d1ce70318e20b7d45bbad5d8602d77aa1773e09a3fc21950f269945eda74b93f8df08f49f87e3e1542bc4e83ced54d5098d94a4a44e03de2320f89ba991bb17d551012b4c70beffb078ff765dd11f17faaa716cdc9b0329df0db1b62fe415fc8d34cc9de4e665788ea0fceee4217224a8d54c0b0a477bd03be15a1900e2355f13eedc70dc52f897520b6bdd1501a554574db914ace25ae5d006f87ca26e3c5a680b50e13e71a489c2936046e22ad09e377a1da5681216f705ea82d3e57d584176b2895dbd10242fa87f842c2c68f8ff880da9518307058ca13a9b94c67481fbfce3bbb5cb288de1713528a860276d5759195468fe6e49ed23111fe1af2a1bee383906696064a28aa035bc99332573d34154d55ac3c9cf3314980a3b8d84d112230519c170de12913598f4c5a90bbd3bf2bf6af3d2d4e39786c64e6b2736d60f8d2c128c1cc1d0d9aa576ffcb0f588cf7af8f5c04ad432b62ead0d7b8a00c4aac0e6ddda1528bb5dd980f258f417c6e50bd40d054fdc1f113740ff49bf134b23efaa684e4e6f91e3b946304181e4c5d6115c482adbd6133b94730bb920289fe02fb6c61932581c77049f971c8085c5790c771af20f43eb180c52233ee5b8bf2eb9b37af36dc47304820b2a8ceba60b0d411900ded2b94ad10bcf99c4c5e3faa2f424ddadeffeb70e877d124dd72229f8ab9a4e67035d0e682132388272b76b47587f82a465aa64928171fd1653bbaca0c4ee5fbcbcddfb8f0c8c66892e27de5034f6c951c12bf4651aa7efeac0b0b1b6cc61780c6652fbc3971a90a3fd6b67db72046554d72e05dfb87d46b6f0da2f4f130216a044955e93ba1d2a0781b870ab38f5ce00ee8b5be717012f01e7186472d3f7cb7419f7a9474a3df59e079c44e49831ef5ba1c3bc0a00582d9133462719c5db1881f5355e2de88e24472214f191a2f716a17140a726450f1df7f5559807ff983442965ac65cbed18738710b2861c912e6070e23923712b7c0cc45b3f0f5b06d2769bc58051ec948904f78bb61aad27348c36e8d1e9aad73a9c70ab0cdc336fa5098dfa430e16bc2919acc100b8ccbac3231961a269821b89d769478ab27c6376e9579cdf59ae1176ad48bbb4c48075b18122e50cd357bde98eca433633c5850e10307e18defbbbd9851af01a9f010cd0e6e2fef8dbfcc4137006cb082bf064b840049568b819a047da026979332d55330e4240b8b9a7b81da5033c1220f4e25dcd13953a221ba5d464ef55200bca6a485d5beb572d404b77d64a5ba8a7af39115d0a503fa0bc88ab43680c05e97ebf47b2351c7b491fab04766ff1da43fb960ddcc6c688a22764d46d5002acb2f5cd4da89b2acfac2328b6eca28b101fa6f4b79816dc744fa60e44d20f498da5f8b8dbf53c46d01fe46b62cc87f3a3813703c8fc484d3889989ae4e1e4803bbefcc6ab4462d47ba1b118e4b399185fcf23bd3dce4b8354e50f94113f27f1df99ab129e0301cfe6c897bc8ba9d1c7e8ee1a8ac83ed466bb4d0f0f3f8e128c01727e538e1ec3c6e9aaa00b34f93caad5ae8422bb2cb255f6df563887f348c0bdba8ada6be8d763fc4d76473ce24cfb09d592fff09ad4636ae0b9374b902cb9c43abf54f82b501c29b5d3c49c972c98d44cc5f0be8217d02e9b6ec2b328c6a453fc7f9bf26b81405abe29b9df54431f121bca9128d7ec2ec8869db80a897c5e0eef364a8d77f75c82f9711b50306dfa626bc523f52bd0f2d50aaa74f70a0d002627e85da5df4bf784269b6eae35a435df57de4f7de7ca6aa4f84078a6b02d3aa20356fc43f92c2be80b827b5d98716855cbd5e620d38f8ef260ac8b1a42409fb5f90cfd8579e3b8c83ec57c8160c09d8b3a9097827daec1e2e0ffb07862faa7835130fb528adb36f0800a2e4b0ddf989d3bf100cbaa905244a7b0396891dd31122f47dc27c86637f9b6c5f6f3bb71d0f9b5d3f9a1dbb4326bf8db78b66d25f7ef66e3c2b937bffe98d3074ff4b71a225908a9fc1339b08b4ead3e7c3fafb263705d3f59f5ab79fb04e6197ed87dda402c4b2f6c717b3454c13d7de059d014aa6255b09e23bc6df970629949e8820b76ff86d0af871dc5acecc20ad523b2d0e9d27e00b265d64b69b25efc8a624703411c100f7025969d638fb36f600acf7998e6715c5c262b8fa8ea85d75d4f9941bb4c43308ba67646f74818a698ce3e60ad0bc7fec3686d6f70dff9927beb23e84565ae7bb432f93b667fee5d4fbbcf2a638205fe404379dc137700bd3c7564bf3476edc748873e66d663c363217a31b8c55307be2131793487879c7456adcc2889c42b33995a1f3d6d23a2c16a558f2da6123f7fdda51ef7903eadb2d21da289aef5000605b230bed80d7d989c67f270a9b9f0305d873890c4b8e7a4d698ae69cdf6f7884755553b31db56fe9a8425fa8eb6482c76be4cf6ff88d07b183f97c2d0c3f92b4c25b9aa95f463cbfc1f5c91fc13d789f54c50146ff297604f8fe7f047bed131703fe45e674c8da1e969c62a12e7ca604b66c88169741e50b1bab7ba0c891f68776c3bfac0ccc28bf4a6c89449d5ab21cff088c40b8a7c5f6ba70d0d7eb2ef5965f132989b7fc8adcf110b20e29bc7de3f176c4f07b570d7fe00cd0d044110e2ff69bde302b2494ff0ade6ba08f21c0c999c3bc7f7fa9444f8acea5bc6e70c1a72a72c1835ac407e040886dd21daea8ccb6b6d7bc371ab800dbaa3c7dd72260b4681948bf9d211ce0049b6004a7a8ffdd02d18b5b83473a0a71689f6d087b93050f72214fbc2394738d46aeeef477c8ea2d23f99f98f2d55065f764356a2d823e1fbba79ab7ac68ac8e1ef84d429890c2ff81a4be093c66d1ce0e46fe85576f271247485842d3d00b019da17702b3eebf8f43273152765567d7a74b6c3622853ebdde81cc4159a92c225b6bdb4b6f046d956b023f3528be954f3f5769a8cdef76e147515428a3125e56dfc84db67c8d35be1571bc2aa3368648b84b5c0302fb0b5268ae9c00a39dea0ce15af4fe4bddfccd35e45ada57995e5a7b48f7b90870ed1d0885be41bc12357cbd2dc73a7fc7a38ffe1c56bfaada8e7e5786ebe0396ac1bb1abf6b0627aca954a467468d1c975bd4703bd6b9cc15565f9ca3811da786539169716dc7e79905f6f77decb63c804ddfb8c9df628f2df05bc4a3515b183d791ea2923f2cc52eb73be2b8042b16f805f031b0a5a3a385c9306bcf778a1d5407c3955a47c50a22b4e71517db3d5d7c7389e3087b43974f448920e6047ec617e20f7d04b39d2f5d58231b8206521d07cae98a4292042d02998c4fe19f88e0cc383b253bbbd7cdea86921a1e680eb434e0c4f49f2186bf230366818f227680e0399ad4a069e2758ce089f58cbf3ea4f0da7ab3008029631d4a85299342e684e150dbf67afc87c2d372ac94f98ce7e14cb360357f92061d5dbe24b5f33ed85d10c4feb062e234fc52b193212f0bce910f307b56b6c4667bacc98dd4079cfa5c87021f9dcfed8ca20b7dedee5d108b52f68db993dc46de2e214bd2cb081c2a8e4cad18838d5e6b4016cad5170d5bd38bffe09e53e6185936436e38729660383f149a20bbb07814b62c11e9046ed41b1fe3b4406432d6edbd251b5fc40f9e39b9ef21e2dafbdb7b2b1b47c41153b0a3e93278355f091de954ed46d27ea4329e194b59581f05b313944ee3bae2b611d69d78794c43b573cffd062e9faa2b35569008881cf4b4ec8d9f350bfab4336354f182311b238d588bac302e327c24f6176533be128d7baa76bc11a18e33b7ebd4b1db79329c7606526196db475bc3f416de12fa0558d551063ddf4cdfdf4b393626ac577af2a190794cd04ce5a3cc64a95a23dd03f3ce1a03b1595b1f645c32f298749dd5dc7f3bc3d06d7a49c6665696b2734cce556c578b27958fb405561b47cd1e499399d0f7d0f417f4edc0d1897956b60260134752842b0f11e5219c615fe1dc3f6f13c3db1f26f261fa4f0b9b5f0daf31317b71c31638b859151b228ad6ecfb07b3ca28b5f1d337057ad1c3c64c0723dc7ee5ba408ca1a9ddcbf16bef94c2550e69fd581dc31e0d1b0c347ed1bd868d4dfc4c9d7dc5c7b591bbd276f17358a59e3597bd1eaa45b1bb9c987eb6d6542b5a95ae86c7522a143fe36215b32891844b598442179fd1ff3d27e789bd2ad77a26388aac1b674ef7be0a95513248c884a9ebf4073ecf2f00769b22bbf5d983c5c7418bf10f5ad9d025e94adb5a604ae295f86c8101251c56712e981f6a6ec6e643013a546bf99441e8d5c93faa9299d1f86907e98f3b095198a07adc4eeab92a9bb37bef996cb47007377c3819c96cbed9592bc9dceaa8459f35e3160b79e37c0246201166c137d780a088381f869c3902f986ecd32026e5a89a7dd0aaefa814fba187c699a079c4873648d7732c533bd6b6546d67c894d60109dbba75928eea954d0a1531c7c146e9891045263321fff27bdf73f039bd75caf4c279f0be6d2571ef0ad03d23a50595d4694cc2b9b23c8e049f110428e259a9a2bdf104e270a320d2923d45cf2a03a24d4bd05ab42e704f37633ef9bca585e5951d77743b5a7e622d77a30225a6610252b3878df6819419dfa91d044fe92c39f379f380f1477aebe6f6d8e8efdd705606b799dac065719be352d38f3b179f20635268700f7d7dff701a2789e218e9e1c6b654e90cb17a7274c72d48a30f2749c0a64fe3ba1af7f018ce3cd79b99783d8a891883f069aeed6d1685711b2f509350bb3147e6e2591380c214e4c72b8df890782b932aa4fc2eb8a843e7a62898778aeae06b11c0bdd16f3c2de666f7da203ee034068ec83f841e0b14b8243bf06b35729fe4c33c731ec1ae21077418338ce2be073fc39347163a54e53bc205037308f164abef934020afeee8ef8f81f2e764c0aea05fd7729c547626ce48ee3049e8b0fe0e90837db9cf07e3545a852033abf7afe66fabf175972e1e4a4583d153a12ed773b228819d190e17472af62d9aef62f53bf8ea6963b9faa45eb0fd9be5ebe089566a9007132780403bcbf5dc00f9edfde68994db6081ab97e002185e7f4feaea2537ee72f0b8c160acb765e07a0d205b4c7d01b50c2fd1fe2e7a3af38ef073ff4436d0018fe5cdaf3f5349092299a8382ea95ca65651b2a437de4dee12e2a31daddf0dff917853edd6b27331f8a3a87f3e8234dcb825f13e2b04ced49d2588ede2953695011a55c57e87fdadcb759ccfd3de40acb160bdde71eecd383725cf677b78f92a21c69ef67e79db49189669f681d5f9ec3504d1dd108c72b3d87832783396c376d19cc1f2c80f6bc4922992bfbe7b63d61eb83432a76353febe6217469fa9e614757c4a04c728db3e16281b9d41e49d2087a87c890135da2aa92f40a1a07f334806d2f01dd3708974d776f58564a55edc358d85550e725c9f141f8ff563721df274d11d47b0d7fd2cec6a9af2cd4950872de3445dfcaef91939d5dea08fa8f78d5a2c7eb2cc68cd9a7d10c7df473c73f8d18462cee1e1a28b9176e17faf44df44df8e075045929c054e830860e25ac318661d7f02513b75520b62c5b49e7c126991463f4236eb29a697db45672c4644c2ddbb1064d53c0ef7350549f198b9235018997159f88aa52274f34bd98cea580b3370e9766a5994fbb5782e317cf79871e8bd7e9edd29c64207f6b3d648fd34f4fbe1ba1236db02d4ab04b08453665893d87bf894d3d728cae9581b16f74f7de81c1eb63879c7e87455157d74b5f230048ad0ab5ba9ff1c1cab5824b168de2ef8a7cc41d33d312ca69b8576d9907f1da85112bc8e8e08e6ff0db016a19173a65e69420547a50533c9ba957eb9bad27683ddde0e9023a51cf6273535fdbe36a9c4cc48f44918661288f652f5a25d722d3e159a30a48f3a904ae77a645632f441066edb7eddaa5a386fd3a1342eb2720943413133e5d1a71d239fcd4b3f3de02c5c93ba715d63b538924452279338aba1534aa1783226647defe169d078604497c01c95782021e359bc6e4cf0b293282f4c2cb5dd985eb73c27e2230540d2ac876555214ff81ac8a87ec4823512c730035d26e8c672fd95d74693267b07c1534b3c7222caf6ad51fbc261f2b61267442312ac9273738f38b4ff41818f7a4d624a55d53031e4cb3a3c6d083adcd82ca51ef00afe3d6a4774436e51b5b24f1a8f18815dc3326444eeba26429d047a3b1604405476fb061c67ca716ed317a11af8f3a87a33fb6d08bbed00b88867f8f38ef4631d329467df7a9a15a197a80a01d8441e637686ed667edd54a12d866e56e34bb8cc301332a9195b6e6d460574fd1e57ac91f03e4928f4c0f83bdba5636efd782d3126564180c2b011c55538bc41767840ed09ee740f4e226f9877997cb5e54167d1006b5c196b4fc23aaa5063859f11a04296c56452236bbe5575e446936106fce19cee8e9a74eac0b757bc9a694f850fb4fd8b4c073bad22efa58ee54089230f7428b1188a4dd9f7ac31595d1bb957ada1b804f0f981622b8a3d4bcc7fc395aa93a6ca9cfa5f350586c64c647738f8ae7c4513e25445d087c537075573efdf4e17cb77c1eac0b055017aec836b5248cd78458ae9c1154a3d6ec5e7e29af8cf7ee7cc5fc7bbbb9b62f2a3bb77fcfe510b137fba4f17b3788d59714d2036b0b96e2c8d7ce67c68eb4b91a086212d9f8f714cb1000639d422c912932f6fb9ad1d987bc054f70dbc1e8c7de91cc67200a3f411db51837986e85703bd41bcee6f4f49533e41bf12abd36f415ac709d5a63cc64cf3a6bf7797e6784c7752ec2cbb459ac8007fb7b8abfc3392c6b22681c32a18cdf561f4c2378628d63dab341800cc2ce7792fa723969365369ec3ab8210af88407923f2a13ce4d33e238c138de6839ce5238e314cc513ba43fe48fdcd783bf294ae28abe83aaee40613fbbbd8541dc319c13ae3454d2311cbc7b59ecf978c8e6786163805c670c8f838c0a9153cac9cf47e9c0d785ca0fb9e0301998a48fd54728750505058dcede93cdd6ca8c90877c1157d2c45f13206afd5351045ae4392ac37d0d72beb10d6b246dbd2938937036bd51f4e8a53d3b43af395c0f83cc342411f6af1c07fac01c3d5361f07fa2ddaa680373aae0c2e7469e3fb941fe36587a58ae28510effecdc45c7883582dbeb220d9f538dea9a3c8639e7e07fbf816b8f87e224b36d1cf27b8ab91905e3b8024fc0811d67bf6188e07fceccf10d50ee00706194275dde0b447e5f519651ce29274c7e24d1fd9fbfd9ab98c926bd8ec1ddd5a8b2daa6ea829c8cfd2f67d193f0f47faf7842924bd605be328ed48e590838e4210758aa94f8edab5fe730631b9c776565a4ed5a885622f8f5cde4d646f0d42e58b2386dad206559f9c70e51895d8c2750bcb7647de90bbb0a1d8dbef5a3c88253cdc621a27744d4ce68eb6f38dab5f40bde6128a35182f89e26ee28d31216bcb6aacabee5d6e41a2a59e68e739eb0049ed23e7fd6e819da9b88af814cb3832da9d5ebff8ecadcca723338493e0f3e50b06f47e52e3bd2b07f212d410fa4f1cc306b09c603e0afccdfbafa1d3db0babdb3a5878ab3afbd8fddc2e9bbd8e294c9b132f9993f347dca82509676c67903dfe12cc1ada7d7402b02ed64ff0803e62f798d855c6da4e59de62d685726d464f01d14a1b8495dd72ccd0c4ffdc3f20900d129f3f9b17ec856b031d0215c18c51a1a670c0f28bf352cb848b4d0d8b253e58b45df6058dcc4486b3bd303df02c8929ad9cb03fb9736cf557502b2b959579b323fd77fcebd0224ff02ccac0cf7ad57d90dc89a260693f3be0003361d31598d192db0136878e733e0786e58119fd80e4eca173fd0b6d3f91b2da7f08a05308dd3d508b9a63aa7a23b04e46eeffc155685c46493ce232acfdb4f277df64d6ff521abfcd2b8ff51932c881d8634ab5fd7f6e4d5e98cd0c8f03ab02011e8f1d175f138b873f573302a7dea6284c71c5e87248c70660a10ca47b79bbfdd705927fb2a21c78f71f571e0d1c02726d789a63ff9235008e44405aa6350e1757644e8f97594245be4c3e37976ce555a162789bc11d27f9f3ba88cb86202c92f9601bed6d093be5077ade8a966861f577b1b11cd7282f81f4d4e02c6acc44495540ac811e1bcde9876b3e09f17c31704948bf2679c58028b2d7e7c1ec55e69fd992025c036c9f54a6850029529b50842162d3c7a1ba91ee246be82d756f9ec328bc94b943aa0fa21b6804e4dc2850b51936ec8a388a88c53697c2b5cf9b41576acc85e0780c3f871fee6e402b062e1bf6ba0cbcbbcca1efb89ae5e7797ced381549ea4fd73906ff65550d50f5ea0954a7d75a4db1e71cc2f9d74c47b45c874b7b51698d54b3da46b972d30b60070cea491d81f91019dac2842bdc2dbb9a857d2c0dcb967847f0d15e053b07fa6573321c1ca07eaa218812961976fbda95d9fed000ca1b9df0a87199d298acb85bf7b8de2172a3c6a575122cae95332c1d949c4a55ce9d79f1f58a399f7c2dc6905168f8fbc36db7580057a05dfe8419567352bcfbd56037071a4366a2ff5454b0fb7b42be5d700e7adecec51e03fe66218be1c23c7d5f8f5f70435bf6a14f320b711ab9d417c45ed6dc2fb944d8f505934f07f436be1ea8b1cd2e97926d99872f0ca31066f9e734de0021d98a0cf7c7665907ddda735e56bca87769b246b0ba12295c81f91b82185000c8dfa085454f6455310e34e021c485dda6364579ecb9739d617ec69587defae9d30d1870bcb550a3c86e53df8decf2ca76307544cffb1f8af52c896f8cf5110fdf3883136feb83566907bfde39754938e642daf1e49c6f60b6756e0ff3a8ea32760033f490e83e7954717d0d80c1f898e4dc18e24e4973d9f0ee07f9b7e1b3f6d92948e0c5888f006a2ed5a17493650b484001212d88e39a2796f5836628e7cc3c00b574f4c6899f27c499c85e7cbb087725e56ae2a53bfcb2e486f054b5fefa49a9e87e2533e50d3831703574a6939fdcad062143459792604d58a39365f33558e7d1d631c125647dea4d1d30e171cd31cf1f0aeffd02b8eaf511b4234ac566ce6597aea6f41f25b498a539fa1e89e6c2cb773ea7835a0b97158b3c1491e010995900b758799dc5288bbbcd76db5ef9478839a80f08fb91519bab07a21b0bf2ca1bb04d68425bfb9e427f55819ca13d9dddfc9d8fe333b9a54874d6cb40786d8847e3e585021f72e25fc0cbd8d3584df19945b38f31490b0bc40dc47a59c20b476df05a04a9080ec8444dc5e4f78d64c886adc8440751164c62133ca9eb12c5802265ec71c6ce3b127b1ff02cdf4503fce673f08165ad830668797617bf028999aa42985f78833d373bc81717992cfc7da404de18a1f71b3ef500da7b5a04f340a47b3008e6b5f6dd6da9eaf6244861e04dea55ac22ab4b8bb9596e5e6845a3618aa7114c073a7b15c90c380401cc530ced8ac33f8b6de60692909d5ba3672c3fecc9a28199124ef73158174887af1cd5ee3682ea34063b703c8acd4d21b5a8487643870b59c0ed78d8b594f9f9e613da87f48d55281a72b7fb0f3c015f422af65efd4991adbca78a78fa6ba2ff620177e4c56817544bfdcf3d2557421cc0a300d01bfc49b987cfc372a02baf7208522e1b09c648868bd7e8cdef05892210c70fd09b1c25b37566770fdd5a63c62ee020b3c43dad4d870f47aa9551ae66dbfad7090d570285fdd9472e09637fc7ec19239ee49682ded4fd8e52f8343b6adbc2b14562addb070ddb2300b888426c2d843723708d3c5da686220f41ce168ab31d1bdde90643ff29753b1c3906ca24cedbad3260485942e76441cb5cbc043cbf03b14cf32752d5336c39aa11a375fa4b187ffd0efeb45f68260970869f8e03ca6ef4543d3983af489c450ce615fe8133b90210b685c4d9d460e59c1a026b4ab981272e48a68fdeb7f666b96badeeb6772c91df2ad8e8197ab4f766df7a6f661f2869a4e77b7e9464f008a081895ad3bfdcd7df808aa77baba634e8c67aef03e4eb0ce5a6f163368bedb762564962e95a1a0820125652f516b10b04b6060e23b2da2f4a075f177f78b4f16de939cf2fac583dbc0e2c1c4e9c8783ec6ba1c12a3f29d3e672068798ae683bbade0a8b6240d2b9d549dca6125c02052ff45f35e303905d19b3a086ad4af2b6b69f759fb40b83640533cbe0c38f8b8f7dc04c658a18f5a23924d0fc1d001cf0941ef7ed760e0f9516db7bf00ca96c081ecfeb82558a1ad22b8183781431dc56c169339b1596e15d1b797a78fd9900c9459cc7a8f7af27f901f2cce43de41d0657134a1c3ee94409b4fe98cd520ef5519353f638797469ac784e1db9067e4fe675a13fc5f9e18649a527505d36260ddebc930b395c8581261bd4eae1c0d66170d31f0323ed97afb923a3c94b3b9c516bcf7268648a3ddd2f96971015f7d0a3a95a52b1753c72713edf3d91c17020da08701757e39a9c658e3767dbf409f40b1d140157c93b32c2e16954ab173507a155aa88e2cebc7f5309ebf1489d08361e41450a86ba94b8dca8fcd58ba160f8ae76f5b746e86f71e37bb6f123ef3ebc2528697b4888e1b983f93d107d57be4bb5b5d306fa601108317d8abf9629dbf955840ebb44c14bbf43792a84f07bc249fed1afa984214150a09ca4a6ddb99b1b1821a23d0b2936cea41ed448c01891ba19a14c09db27fb2e08eb880d03c305e847c741d8cd95ac7505c6224168ba6746b89e45e6cbd4d99617b551759cd8f655b713c79bf4627e1d442f837389d38a9772703dd0925df9fca3baeb115cb584486744a744db82eb76299d2f7c911c342e6b15a61eae329b99c2864a6c47f7ca767425d7101d6ef36c8cd5374ef82b17c95b3149c2fbc55dccd85941ee9f6b826f22a1e6440cd42dc2278da4c6d2ab8359617b052e169cf7d46bb924cac4ba872139b72c737e581279d8c03e57a19e505822985ae5b5a61193be3e8e15409541e357b7898a803c914f7e15fdba250e104fadc75f7d9d4d6bd23c2fa35a29d84dcd2ba1c7581f31903018f9caeea96b6750644515814244f0e11c52fbddc2a965e0ba459253d20af9a736edb581910e498325d7db448896364aaba533e0dc36f7ac95877beeb35c27547c4f9894da690a13a68bae13f207e87bc028ffb5f2dbfffadd13e725d76b22a6f2374827962f157cea48317789a00a3a72ed8e1448c2353ca120d835b9bd211486c5e083d49a83e182ee32fe9b6b615b91bcdd2e9d2df288d07d6cef90b95a387ec9ae7061276bba3b3468b8d23b663f0b8e662485f1dd2b6202c54080a8670ed3c8be43e7a72a12f5f6daba8216abbcd46411c13de244ebe6fdd6fc7926b02836501c3336f56d01f27c4b89944345352a043ad7b1ca909be93869b37a2bd7e0eb00c46cf3e727792ecab6d8afb447640915ef8865283b82a15905d55a1ac70a47448455070cd1e2dde4c85efbd7695f9c827e85a54912ae545f285f71413eb7a77b00e471e058c70f8a20bc38da201bb81ab3ac5f3a865e4e6bd2117f0f71b7760ae3f6687c7e32d6fb27a0075600d72b17588fd6d80a307f74ba657e896af6a89fb24bf32011b4dc0632c62609ba3e5cfa50f7cfae43c0a565422e34f62e3b87991a4daf53dcd0332b76683b2dd3a57d5af6d5397f9ad157bfee9b0e72853b8afbff13332457d1b0435a2bc2d38197cf5c444b99debcff7ffd7e3907d34e281898cccdffaf5d389763058e6995dcd99fa4f1c960f435f108232d63fd7fec768ad90d0b75f101e78fa00dd8435ba0f2c2308a068501d20f1afe4a13d6bb2bdb091439b21bb020701b2fd6a898243154c62a756cefff460e031452c3c04d68d1a160c4d114204ee388c4b1b482c643c12393ade767f0cfea39741fcd18aa4b8357b067e8d45ad229561ab56f7888dcd0e0e3a4e0021b2b3e97f85893ea5e42007fc394771d63c6d4bdef6f53d4b1c0ab5dc23a545a80eefa94b6aad6926d615a3e522ab09ab2bd1863be7ea087161d0a1098e26c43428dacda05d634a40d2f225cc6e853c74633591b79b033c73ebd7342066f3f895f0a4608a1d0abf3851e29d53e47bc84edbc465563f580b136f7593620ecb22ab0c52483da8e1026ae4b213c33e97e83b4ecec86705cf65e92ea37816e27017a302c16b8199acc3c706ce1c9e89b0515f568e0bff8932a2ede077199224a9610a6fb769a38713990caf8be93b9b8cda03738ad8eb851abbf1f4155761eaea1917606dd50d15331e5ee3f7e5ab535310a5d03c311c83be3d2dc335407e3607894a752b80823a697c844ca4f9394a36176d5902f6c36b6f59cb0a63f9670f7dd43b512d66ef0d813119207a4e6473178fdabf77e33bf0ed1514254ced5d15929c9430abfc4208215ce8c2de38bd8a01b5288c3bac304cc96502033fc20561349ad18898875274a0f87bf7cf2b4fc26388d075d4f86649582ecaa3d3dc394b21682f9f4f7aa722f5fe2875a1ab4182172ba6a155f6adc037830fd2cc33dcb7ac8640333a03b72b734a15876a04588f2a30032d94168f019b8dcf64e98a851af0870f1140b8c344714c3cf06af7a4296d7b1e8f61be4037f68b99e5f336d8bd7a88af863a5c6485bbd52151f4d162904c7ca638a35cae7f00064b32fdf6e964e9c7bf7c06abd8fb10b446ac82eaa4960c10c4badb53672087abb7d91a7e4a90f46caadbd5607d778d20ee6fddc418bec9aa8495bd5337c7580720b8422388b6fe8a2464bb3206f7029b6d1e3d16441a1bd329a1a5393d69240d27b972fd2bfe45ac934fbfe14c32f8c292e2ba38460a13ceb92b9e48b629c148aecfaa2280cc1e7b54da0dba218bf997f7ba411ce71ab22efaa05fca9595b040ba0d988ab6051bed2d6a26dde55204861dc4c66b0a37b8062cc4030aef9081617c7c1b38f718bd4933209a548e811e2d63ef8d473797a24b2b70e646020601bd48b7bed30743f8a41e0fe415f3ada8343f97fb67058a4ac72358514afbb63b35640cc0881678a03fb6458217a164da57a6c22934159fe752ab66a9ffb8d5b78aff587bdf2a8c852e99251f6384d53407d975342f5d3d684dbca230cdb2d8ca31c592e6556c159c9775052aca0a9538f7d8a14c53d499756930b2b9412f60cc840219f72779925541c135ed40d120b6f651565384dfe83cf9565c531bd2d3aa56825389640f9694a7fca9c20631a1d6b7907b1cde55bfa088216a0203e7335eb975e6b5a16db5781738354b244c27954e27c942bff7475355c3311a38619aaee40a560cc1dd04bec42d7c2ead3862d884b76961ffa2dd07a4f5b4782718b4d06a1127de0ba19dbc4fdddf5a5eea88e505edec450a026aeabcb5c2240fd78ae8060bd86c3e21c67b25a303767307b15e25e02fa67cda27857a8f618140d1b6a7f5c5139337dffb30ed168cde1aa9695d0494d812adf274d9fb1c2efeb076073a00048ea85384e596e6e6f132a01c68577fe4b1415c5ac4966ca8ee44931a4e2b4d47d499b1fa4ab7acb95d22317a7412fce642eb7898237042da69a369090e6c30983491392dc62645d300af418fd31a149c4a5efe2de2d65d4cea8d6754778a78edfcb4b2711fe7358831f5accb507e6336833d098e80a2fa7c7445b8496befd20047d0692d6fd4529aefd25eb049440c7ee757b88372f8255c1e41440a2647abad3985a00cd5042397585fa17a85d7f670d6a31fba9515c0536e5649c5a2e5fb775467e52033485b68ec661716f70fbec923eb93f0cc4eb634043758a36f5dba02ee4bb93eb13f8428480098cac8f2e8b85cd4ec04cd47aaa1dff39476a1bea104c055b97d40fbbbae994032e4e6cfc31869beab85243f57ddb68eef75bc2b38a90383c873894f092d1fee611ff1342b0cae4d4f517867044ba618cd783f607568ee91d0de6f5ddb56786616a9e3376706063b8022541af3e7054efd2b51179c4e0f010d035bf59d21d43023c769035362fa15ac0c12ab8045ab6784e0598febd3d2d7c03f81c09672ec092a0fc013ac4c83a02efa61aac0097dfab3b5bc259a670468bb6cb4678fd2790f3c228877e0ced50190e15a3ec1a7a6cd35ca6746aac586a9b45877630a77bd37c3dc09c31825753a1415945691b97e956ca9ba537f20c3909e446116a60148bf8298d1d5753a3d43a7eb9fa8c4c38adf618660e3b1ae23046556764002d7707eaedc1677c81d9075440b0a804ee9b7e366ab1537f3a50a1eb88044c92f42ab8d58fec551c7e6a8780c8de1c1442d08f6c488b86445299e395b127918793a672b2cdab5ba7424ff12bf499dd77a6ab20eb4e6f72f68800ce6631df1dce22568ae35b51584c637c379ffaab214678cf3002a596fd3e0427307f2ea73a7b10dd8dfc78488ab7fa3bfdbbdd5ae3e5efed877717b4a75dc0b8e14614c0473cee7ff208b23ed26356b13af3b2f7e4f0f45afa264aaf6a6f0f02b8c13f87cb79bc0d1d37e5b8819df5fde74652135a7fafb4e398c50ee3847f075b3222a65c72d0de75cee76db401183c203d745f056e77d5ff73351c6ea9e77b268d355278776f2355f7ead88a540b29d3d0e52375781ed44cb5871eeeabab76c05a022ac04901d7a953397f484314ae47d97d482a072d2b8793f93888e69b071723fd7aeb90ef39ba4e0038edcee6a8957eec6d33c7d6fc198747f321cc178d40aafef60553bed82bd25f69a3dba36e9a5a54350e243fbae2336b981b915c92571015fe91708d9fea2a9fee8cc808d1273844e884a2cda10bda78f45b0eb80ea4c74a043049e04d06d0e9367b6d174dd2fccd56696ebc8bec52411037bd7a505e0085845b0f3c54437764520267ee09cd565c5627193c692f874a56d1885e7257215d134a72d0ab44a5c0cf746743e7130ed640c1d21a4e80f65699179f9fb436c3d62a3ef9e1f11fb60437082d52375a2e18a3c51f574411220f7c18745db14fa3db3e057f9a701f2ce40d00c89a6c8ee4baf2d9dca092b10c215c253593ca11be83042fbad1d33a0d8d2d4ffe2a6534a8644c3329e3ec0fb2ac8acdc130bf762fb29781aad662b4e99fc0aece022944f51babe90df4456491d8641d799b76ca7a23bba7d05e2b8135e8b8d5d47f6c8ad519313f4f608412922ec9b057c4923857643b20b6af663a43abee6b88f6ecfa729d673d7701942672d15b1ccf7a9c6d56a389410d76de918112bf6b8604c21c919ccc3838edcd63412a3623e67446bff2a40fbc75b7a43d6600c24f6e568eb526067abdcf8861c48fb22493dbd7a9d5143f82cb02685e1eb86d65c2add9b366fd913da7659d65acceff0aae00a6c6151979e7f4433280822cdc4b98dc75feaf76eea32a492f738d270ebf593318315a873e6a31ed26f95bb824633c1792270a4c7f3eff7240da1817e7e98ba3aaf07dd4abb31298894175fa2e58042170931cfdc5117f447c3e9563507c87b57f9d8c3a00a4e421fcaea6eeb4b63f782c799c3f16152c3a2593a1d5e5a81168cc799e60264aa30de86a0c684b02fb72fb33ec97e367041e3c067c685d0dd2ecf191f83bb8277b92b459ce4b7cda3a6de2fe3cb8ed3ef655ae4b4c7499cea585c32d08ca4ba3ddb578c96933cf4f49c1b0c3aa808f0d0f4cdc5e59fda53924744b0259ce8f270448dee75cfc44bc16c7aef058734a03d05eac2f0a2791bb66c768a6fdbb17bb708252e68a1f0397429a6cf1b09ddcb3892e6e9b39606ac6837b78e33db263f543f65bc41fc2cb5761b416eddec783c03365cb3d8d53353586ae1b774aee664e37aae5338fb104e21c3d611dc732a67ac3ad6a6ddfcc51fc34e67c4d7257707fefff41d61e55c9f06e9eed31597c5b85551c053bc62c06b45e9bfc26840e7acd8f63f869b0c78336384b0f7a9b070b7f1c4bfdb5802309d518a2c9a385b80c3f0a2a10df5c964f0a2a49d00d574e0de2fdcd03d728a6813f2d0b989e24065b30e73f741d499dec94b5ce93ea464a7ca2948bc442e63119e35546d98c87971dd9ccb68a4bd45ec4b06c2171c95c8a777c2b28d20b63b3051064f11d9dbfb26181264e4c690812991f01d235e41aa83a34329b4f6901cc19cb236c60cf9bbf2dc63c0ea155af65d25d7b72bc7c2e4c9d5dac2184ddc682cc37ced1b28ead268c8a4de231d6797f18b5696fb17193379bce47f802afc8cfc80349b9b1174a3364ca15e5511041436316a0af1a7ff713a869fcf683ec101172980e5cb7411b9f2557bbd51833c94902111dc0febc7571b1f3dfb263b9b12f835cbdf0417de808aa1e4467d073751c61320fac46df37c13ced913d5ee6785d93ec3863ec2aa53eb886a7515ce64765fa73d7f3d84777432ede330e4f602e614c006cd700ab1e063e9711558243254049e050881e6fcbd375eb43faa164749a9810e6772b5ac0e277702cdc7aa0085208aaddef7973909402cebee19991b15a50ab4230e6039a66fd203241b93a14390a36756fbc039a428f2174a4c797d1b2efc8c8b60d8699c389536bb9385686a1b9c7ae3f40d48dfa8f7fd10f94b8ba4603fb160c921be95279dc3e40c8ed0c70cf17c287ae18ca0ce405cb457f98ad358e9a821e5304c7e0bedd0efc02323a239d34dcb0b252512fd63a2b10a79197144680319587723a19836b5c612566b8f960fd521ac95388a7d5533041f9793a63b27d65cb5565f145b8cdad977966a27d089250938b671efe293df4c598b23d0746961af343da6ebdf3e95b0dc51d7bd6fba276ea0b649b7ae4114ad728c064fce736a2ab629ba24c13fa1621ff65c3b23f735a364583a1f6aca96d9ebbe4b0a54bb7436b1df377619048d52f1841013af91e1b21fac9ed7552db8d68b234d2df379770b89106c7a735c0680e0bd8247ce9ea731c7d6305fae63be6b27f1cd01f05a05dc094555af8498b901179ed8aa3d661ae49fdf6353e3aba9e9392b93317681e15a2da177fe0f9d11afec53431887cc5455832de101e91bc8da435ff399fc17c90cb82fa7edebc9dec5815ebc13da5489b957e68a08d5cecbd1d76d24e00a7589903bac0fccfcc218bda805c84ace3b52974bece75d24077198f1e20bbec1a6f63cc897dfc697aca17e149054fe334a50810dd43f725b5ce31e8b195a9cc8d0641e25eeb700a00f5df8baae46fbfd4e1024db68dc160dbb2d371e2fe12610c915b47ec3f52d83333e4bc497539f55080c6531496d62353b2f91b1494805e195f37cbcdd86e1c00718207daa5709a10ae399d8f01c7834152f345558763c8325be9648690ec5f5ad632c41840be78d0ee1de874dee43f6b011114f30398b7fd70a71ab3f3a209aa6a0b792742d6f8b277fc1d0599df33ae9ecb076864af0933e075327076f30ca03f2d5fe80ce9ce055e4e394493bd6724e7c481ab60c523c93a947f42d8889f9c67e0dbd2bc2f802f06c2914dec5fe2f34ec8713d8ba339cbff3624447a21647937b3846fc20a637139f6c8e25687cd1f9af3756cada461b90b27b15a8d58a779bcd93c91f5f4ee6be7b223cb07484051dee7c2c9c3c43ebeb4ef4f646d3a8203f5b836c735d1e19c30f1dc2b604c3ca180007df2cc045ec1396ccd29c0f982d9391131b02fc4de933627a7fa396e3393d345d0b4d396fea4920b01282439ace0ee9853457ee1b495ba39b7e625652e6512224fc9b6e38db918c6eb6af2646a8d4429d996cf56c1ce22e1eb6b1b036657b5d57a4e712cfbf3793489f9744806552b8292fb81a67225c4d874d93dbebf22885097d8cb74be3abe5365b13a4bc84b9a5a1b7baadba0d95a71fa85ce35668ae928d4c345bb0f3688732f643260df78f24c25691879e759996ba6f526dba3d41a83d9ea472a8d86618a4dcd8fe2280796733f7c71395d4900496afab4deee5884cc4b5f7a66e01d664e9c403f1a2b475ae32d7f5581938b8ed7b5f957b8b50d30277184e5c13794007f6ce324c0d7a27824a1792aca72845d3d6cbcb4fca3cacd56aaf51d708328f317a6902d48acbdd7a01044507fb24020502680d95b88d879eda0c37a5a31253b61d218ae88ce5c6e3849dc63c1457219cafba03a92652ef29013dfa735cba9c172ea1bab20a62d1874583353ca5b37d856d5398ebe052eb54a74d0fa33214f54d0628631149695728d08ac069848135631ee7d2b98aa3cc3ebffa590de05d2092e7304de181743a1804c6a0979d41abe3edd81440d18445e142ee47baeb68aa6322da5ee2051df8fb70adec3dbc3819a14372bdf5573df04d799f8a1441b2bf72c757627757df96006b1bb9652405b96991352902af6e681a2089e8ae7943641099d3ecd41a9450417956fdc9a2c37ef78dc8b75ae4c8ee3b6b7f8b3dea0a646f7ddda6c3377bb400a79f126b8c810e7f9bf3345ad5e8535250a6321497ebf27dd540d85b49a31ec0a8e83b108e648590a58d2def8be231058f167be8baa8cc2be407336a4d95fb849b840c2e9079b29c1498369af054c6a5c75bdcc9e6a1eb44280eccbbb1fa0130158c42f11e7a847748dea552dc0891cd549a4debba80540801bef87f59643482d836eb75ec7542dc363f156e18926a77f416ddb81014d9ec89c341f6b38b3aab8f430d0fe74a1e369bd36a531ee02f203740d145b61e5d58f4b4d7dde11918f2ff332c200c34e828c575ede88158962c8e559f929ea98e544e75f9e021f56661be14dfe2824f5ddab3775a877812952ed525a9d6f38b553cedeafe533e5e19271218de8775bb70ab394a21827d3b57ab439d5d51e58f0cd5f9c2def7cc08a6ea9a74179272e6a89e1c72906caf4ddc91f14c395a5f515320ccaa41eacf7ac8934bbe7a455dbf5eb11407797f420b786a016e7c08e6fe05a50c8c08a6b0483e0620335d681b01e71e2090ac628ed8033f5be3ea4640ba562a316a7810f6cf853cfc3335a0f0a1195398d9aa9d3954c9125b527fd25dd390ced260c2c7857f5a33bb920b8a1e78f740f04f086554984656763ae2a6e19c1fddf5f6e709d87d60fac0bddcff071f2fcb4bcce6e125b29c7f8533b68e33df7f411f01a20cfabc3832d1e036076f3e90df49dfa7a13bbfc68370c0083b5f8811a0b81863fe3a42d3d1a3ca9156c902dc53e78bed30ed46216dd70832124bd72b6e0eff9c1967aaf1773018b6ad5ae6f92140a6e6439e61f653b934798b27bd7723a583652a4cb6efaa98ea93053b61b9a028ac414cb87e7f0c129c20b42ed01e58a293c0b2e5d91570c46dc8e7c1ad468d5ca2496bc9edca060fcf3fe0e0516d5a63d4cbbdfd13ecf13f2497cbc9555b3b5e1229447cf8cf11c5a3ea32e26a881742693bb5490864b8dc14105a38634cfe7bfc56d5d480d81106eecb4712c04f94b9a6e7d53e3948079772c9561af99f1b6a3d956b8274989f7f4404e06fb6374a551ba10b10e84841dcc109c3b1e1f317e019c0b678e71a665c54671a4b67699866dd8abf35ca1d23364d2d248328e127779cd9155ffc570b31956e91541bdddfe16150a07dd1f580e57540515cb80860e26442b187aff29708d30fa3c3f7dd38a814d36c6a762eef0d970c343c9127bb68a4cb549bf60cc418b767b8dc7dd3e44af0ef87c9fd3858aca9774fd73f078b01deab6596dd816185b901d42f733bc43d66d91bffc63fd2dc7a5570d8892e9c72cbbbd61e8c16ee2dc2fabd54a8d942f319fd34664dd9f45fc9b64fd5146ffc28a06f43d62e18baec22005ced4418a5ff9a464c18c208cf9e047b1381f94ee80a46c1ce49f26d6cedfe9b2b9a4bdaed4eda857b84ca8bf9fb79a47bf622d2c9b735fe3f131654187999a853635583357588ea4aeca76565c29cc6058f8ab196b8c11774bb8d9ab5ca7ba3a88ba7e2454a3a9312bbd1f8d8ab2c06e0d8086ec0bac395193292e3d2b0408260b23224452c5a9461d6b409d66d2797f02683bba97402152a92d47bf6800d6fad4ed6c69ddb6231f1d0c0af9e2f13d08d3a7d8927e18a170ef2028f32329531cffb1b0e28a0964e41938fde7c583e9cb32308a5b16aae198a252a6db1d5ec4376e4efc8ba5272a3c4621a72487f2c7c4fba14f3fb902fdc4fecb08e38d50c7ba097fcae998d952d4b999c8f54b7ec6aae86ef7fee9445f280349dfdae7b60b3234d31afcd30ab45010a67b59f3e6886a251cd529e44e4ba687707fddd7557d0a1cdfe2c2df4cf93858fb89b0cfd50ff69dcf832a5513299918a88323657c99f7ee69fa3f7d900386c52c54483cc236be855ac62969a596779fcd7b52f33a61e623458e74d80876876521df20398d22613b6909dc5f9016bf6be79f409fffd84dad473ff3371a4f81ae6fdbfff77051e974ec5e2744cf54f14eea7e3334b9f8fc0bcc42aa749bf86e7c25f03c6b37c2ce8cd9f87f58e53c87d78d09018eb5750b9b7d85781ed116eae0c66e780df201c2339a36a34cf250bb0f07b26a4f2984d4c48671b5c6531ed9c36dcbad26cd0fbb99eaa6c9eeae25068579523fb865b7d480d4cfc07de7bd7fbab15763a3a175142a30d9e98bbf7f729ed919a2b35e38e5aa57945b0280df9580286161388139e6481f1ea0cb9ed8e4a971bf773a6306f482c2b7841573914c9d1dca604c3cdf32a28cd1c5afd9600c07e6a0b9763f28c94d90c86e3bb4fcbfffc9b6161e57fa2e0e7eb052e5971e718b1eadd4c5d33be3748f8d4d8f22d81694d9bc279116d7b397192f7f8988602665513e07f5c539feabe01b513de10f7e314f56edec64b19eab4ec202ae5f47f82238fcbbd09456a95eed0542f265f1d766dd9aa447eff1461716b970083252129b0e36e09105f46b3a45c45eaf02eba748ff619e04319dbe538ae64ee3b78456aabb135af297d0cbf28ef1cd90d8a38563bb785f137caa735e928e7feeb03e72ed3701e7fda4a426d902bfe3486ecdf57a17657afbc3378de0bb4c4565e12c50a6ec9016ba5613d244b80039b2ca815b3def327da3a6fe1cff74203a368f6739f65bbaf2ec2a584f1f943cef30bde23dcf7bed6012b08b1eb2e8b8bfa60daf10ea5f1b42ffba58a0da1fd042c57e89f75ba6447f9e33a99227e033d7d10bed2015afe0cf2d7ac357ef65bb93c0ead1a6cb6e36286633c8eb10e866e3e9e62e18d82b422c0cd4f26edffcd29a2e86a0e2180d037b663e0ed15a7e6fc206afef1a00699dcb41bfd8061e9ab8bd0cbedd72aa3ad79363dc9037749dd3cbba67358d408c15af1632a3c0e426cd7f972bf116089ec04791a67030c28be9b3d1c699b851754c07b244576628e1e98ce168a4447caadea9d0ac27c9ea8766c59107ba6b5b69ba1ac0cde22b45eccadeaf2034d70dcc4eb4241568c1b9f75c21c02916e2249b88f3a4ba9b041a70bf8508919e6802aef88f4581e403e69c0702d8d4c00ad0632b27ae8a3a34c0591f6a5703a7ca10d62e1cbc098edd8d71f9af7015b6fceb0a9af207305c8dcc4560959b420bc935ec7b4535922b51e96d41aec013f3d0f905c380b5c8ba42530f7d23037330b798d47b5bf3664b7a1bd680a4fd2d33151a1f8779968eaca5e4d40fe6b0ef3d90a172e711cc99eb76cb58476c706fff42c9fac7e4c84756e1212db912e1a53db37ad5fc557c4a04714d14ef4adbae15b52889e302bd1c1ebdcf82a874e1d3310294e0125184f3a981705c50c9b52fbb4394b2389125380b9014b3ee61777b3b6429656382460d8ba4504b18eba78a3d6482ed904455d164d48d64b1ad86809ed9d58defb184e973484f50ce6271ad40ebdfeefd7b5a93183226a5198b6d8449785774997440d6b916da8c357a5da7282b8275c7b3914c1478b4eb0623c117fde6b649c0fbb54fb1b629d8a5b6f63ad2159531031c19f490710b1f61de7923c4a962f727758e6902c6f53eea7df48d4aa0d8cea53a38257c49aab8753667ac74cafca714d9ec29ce449a72671f3c707a808bb67119ff4b0a73b2db5fc0f4b822528c2432fbf7176b5e936fe5439140db8bb3ff4f1b53dce401b58bbca85c2b1f0934d9785223c514af839c239bca455163154fc6264538a3d3d090099324493f2f970b88f4b66e62bd1b84aa9e56f036a00a8ac11490ffda7e2719156664eda484906b08ff815a2caaa813273621ba574bc0f8aae31e348516bbadb55d0e06f834e427c88dbf8665f23b58be2a19f26205d7052c87adbc55685c53fe73cc91ebcf1ce6d756c538f1edaa49db78a679828c8133ac085ccff8d1e534870e8af52406ff3a83cb8a01c2e04c0b5053b283813bac01a2b92e8565eb141e91deceeb6db8fa51c6c4f8d4df2fb814cf7ed965e827606715cae6d40fa3d6ffa1d2435c195f8d3e3e1c1baf7040ce9df8cd7fd03d74d667a1922dd1fd9966ea89c6a899254ad8f83afc86a7a02a8b38a14e134183331baf1afbe60710b9061678330ce861f8373bacbc9698a5fe0a27a50621899e74f8f5cbbc4fa14897211f4fbbae82143c9b2a251e11e6397cc63a6513af7743b01bc0251840e901f458ee3be497044afb8dfa6e4ef07193234422d047f2b436fe485fa0c634617486f97b5e4b57fab65294152adb872d5ea8a6e108c5717721ca553024b02b53a13f06be217900999cdeca5a001e067936548d6cf57b0f6e35eaebb63714563759d98e9d75943d302df2c64f89605d43fc492dfc89f7f04f6424d8af90409537b5dac9fb7eaed2ebe9948b0ebeb07123431a13018a084a5564ec928a787406837800ed132930432bc144b30e8ff926242e41d4843f4b4e35436764365f0ee4f0bb65a4c5239424dbb6939e451b8af465a094ca580c72cc13adbb61f7cf4f5415b7ba9b833f4cad244506d4cd205bcf4e81a82654d8e8411cd46e66fbdfaa5cdf49fbf0169e0165f1eaee6f1bed7c7bc59200a5132d4373b6378a71f8baf1693b732ece9293f3dc6b3a3eda0a8f0f6226b8a9ff129910d5ced1100c3ecdf40482d8b1fa61d3ac465cb8b85b330eebea5affd54b09f03b15839af15e386c2037fe01ece5f1c8620816982e3dc0b2d996fbbcfd6208a91b82b574c3723420fa1a3102e7f6e72b8a60b6135fc77c14bebfd4d6ff0e2d0e3db2461005c8dacb1035d5edfd2697115ca7d90106e81d6267dbdf3c6def1e3c7ddef2edd617441d9fe2b81950b7d4f80eb5f26c722c52e591d3fea99d003a978cf2e4beafb97981492b1800cf933bd1115a8748539d336b09b6359d7562960116e747f38e9884dc70037a383cd72d88bbe4d904890207d673094e0e231a55c670cbf8cdccfe1bb03e7ec1785e96d391a7b19485a68613dbd66ca944a2240599cad1bee860f8360b6aa6ccc5cafc7c97c5214682b381eb24641b56de6bff5887c0304cdcf91330732bc92ad0a14de135803d6aa2b94e4ff505d09513de6d7a9ad68c718fe22cb84ec7b9b870c0e08e8b0ac7c95e5081dbd52674640c70911c8a77713cd594eba04fc6462899489a4d97fdd98b34155f42f121fd302804010b7126502846d3513e29d9acb1d518a720dd06cf92b7e36377a857995c7da839f984e439412dfe77dd5f835b218ae82fc091531c5ea02d557b3d40af8b254f29eeb87859127f01924abf712842bf4e450962df9f789977aaa0edfd08ebce53886121960c4961fb6619a934bb00b2c2dbdc7e7b143f759bd89cb89a1d0a54e0e05fd4924f4aa721429fc5e16dbb1d02510ef093dfd5fe8bdd6573e976c9980508978c721049b8d627ab19ed44c21517d0d63e7005d6d4321ca2fc308f30e84ad504d76d486e6cbb3e92de73dd9d68a1ed55413ccb2d3831239a02d0037f6c1dd6bbc8fc72ece0902be11071931d49106d8a67183b06984533b3353e0b67a735b6e137cac9338c2fb272d00d418de3da9a89ab8f22914e91366beb7546b6cda3014cd26e65b8415a226edc89b726c4682e9d73e6483c5235e86f97eb11c03846c202b3b4593d4735f298b37079bb328aaf4a8029e07828d7efb8df546bc20aa4979cb933b12ccc9f3ea4add5169a031f8371ac41e5d1df4b657334962539ddfc34f9c39b8e43966fa94c67b6eb51c23c77ab48b674928b198d452e3303f49d0c1b853a894314ebf1ef769f2a32e8260046e4826d9d09183d61b3c7d8ecd435669862065b5c34d8ed765b56515b92d655ad2d41d44cdd88c5a7dae9955bf4413e6844305fb36567d6ea3135caac3d9b329df98e2d2fcf3bafbfbf07814104770c871c1ec910516daf6a085ad66dfc8abfa59cb1d748cd1b41da198805cf9041f04c73343c4dd2216fc709ba6fd757de8f8b6d43fd48970084d261eb9ccc18f79685a22878d9328c4f4998044ae78e14581b8804224cb60d58f592e2ee935fc94690a765ee7b46981d342c22fe71a0619ee4a33bb551bd4b54a6e5c72419ce2a7e4a41506d03016ccf5cc3be713a172f9029bc48b72a4d13142d58bd3048b349a41225eeef698b1257f9ae91f425ae01bd3e34e1594751322eced151fda8881947f2ba5d7ee2ae065c180f44e0e5edecd0f53c1594ad00c72481b2e5c07cc8fc26effc59603cdcb4221c0dbbe095e165f49a9cd8f564e168201ba79ab83fa23a783e9185006f0f276436cfdf5c836333d318ac3e1314b84ceee7df6897043a0706706f08ac8eb910a3c7b79262ba8f170f88547b114d52a8519be5b77cdeff3ff6dffe7273baf95d606da9bb220434f727fdc231715eb96ca418157a9225181ae8f6f210b5f458a77fed62fbe0d5ae98adf7e2d8a04e60c41d356b29fb9f39d135b098532a32bba579136b0c2343663263c474bce16956bdc58b0921c62fc4f4934ef08db6f8f24d783066bb0a15e384720354e06e8d8f39c58dcaeb97afa0931bb0d68bf6f6440c2e9f833ba88ee36e31ae210948c22a44524a7db2e1022d471cc7b50f17760de12e9b823a22382fdd068e1766f10bd5d27602a38cabdd36aefc5b07afe161c0bba6aa2682bc945ffdda90daf3bc761781db6d6c2ff6bf44150b0d981073d64df28dfd2f36be162985f0adee37901e4f1462535e3b1db98277f261a0a5ee609decd9926b4333e8b215e1c3014d5df8a8e16060b27a40d0790d26eb085b02ad3a7832af9be584587401828e682c78bc5153c3335e64a22fcb0dc73ef7ff3c5694ad7539b4cbab2e51c87fcf33dc49fb91a920e308ba3718cb2fbae2abec4d26a5c2bd6b4a3772daeffd26d9f3f08ee6ec7de525b11bf16ee594abb01f25ed5cb8a7ac56f9bf3b2912c01270c4e6115dc33d434dbc782ad6aaacb67063137c1c26f4a3eb183e847117579cc6108aa8ca82cad16be0e9c6ef2ce8d2783912af97665156eb1f255a8f8f7ba6600f470c0503f07e774307f1924ac9f6d28329c34f087ed0727dab5a692b599c8fe106aa2407df673197779548da965bdb1695664575c37270d9246c0219ad0b05c9e0b3a229b93bc720aff2549e1156150860defd09738ccad5c9b10f154a708704481669abf45f10a1768e4eddec3f0965c093ec42ac6f6a9d2acc34927975d17d38fffeb3e80d12a96db880b93c4fc9f0045ae8d60c4bf42ddc631ab17dd492dca913a5a66eae9f014fd468ac54b335ad67b80c15e7eee159139a52fd5a5854f5bfadb20721155fba35f445822cbda182fa761c0db1e5d2bbea23bc7defb625851133aa092da9a117066807016278806297e287bc5378cb66490760e51308f26ece96f36f15d0bb46b931deb44c7b6fe0363a0c22714379e3459f4a8bf033f01a7d3a4f399d2dbb163f71ac72022a482bcdd9dbe2d0b6121256a92f8fca84ccfa34318163a4fdc08b40c4c96e3ea9524326b1894d9c72ce01671a7f79664c7918a9244d9308bbf590caa5d1f77e32e45b9fbf1f52bb1eccd6e359debf24bb343da75524f21ce381dc4341b38cfcf81c572a02fd53b2e45d07440e26001cf2a9386760afb9b01231bcc393bb33570e9fe489c48783a04e86f8984312f8d5ba4f02e70834b8b18a55f11cf6ec2211656ef7689d6d207c43927dd7df654db0b56e72c03eb6f408ff0815c9a0c4dcfcebe06b34aac229716844c0506a14738a50dfec2e98856c723244c3c39e8b393eb23ba20dabdaa9fe1bfb18b3b128c7f40b86910ee426cc749b5a1be7d490b0eabbd8f01df787088b0c79b146a082859b03acb13d7cd1a584c0df4ea0acc4bdac51b37f7239b63992781cba535620e3b4506bbd3759cb554395e2e4a0efe1d64be4a54fd48e0532d6a26e72a7ba623bd5bfe2d8d8ed0b71dea39341ff2e29da6a4236c80fa2891d3e165eb90b20d76673aacd57dae136276bfff798bdf5388c951832d503f35d9e5c9c309a6a5ae5d111c4f82c810506160904bd874f9c14979f44c9ed1c08a7b113b917a8731a9ca19c9ee855a4f0732608f483f8d9b8f1c93f98da39c198097c3246a144f387ca9f877bb77b628995bb5dc84df05e14c7e171354c6cf7a6cc052ad98d3a5029cf7d3e5061506a0a04bbc3394832b296f911754b4914df0a115420ffbbb8ee2999673c6d9e78c76341447655329b48a588b9c335217404f313ce713fa7dfc5d38e373a312ded8fa6dc66a7967c1245d8cc03da60f0a8c179574eccb1f1cba2e86c653a9487ce06df6dde6122eb39f6a2ba4811625250c7a9a1a8498f8dd1ec0dc1d3f3dc22d2267d92639321813ab8c270da2d841365610922b7016e3c79097abbefe00d290ec30c7a9c9a55e4029781568ce38b523c8cee901c5d7f4184ba62e2ff00dce4efbe7b4c4d361770f376dd1118826abd72cc3a788b0b88900255f66b679a7ba45ea914a5958035d82af414dbc5c6ea55b76d3cbac25a45567fd476c6cec0cdbacbfaecc11ec1e2b525a23c84b62e10fff0ae6dabcfe55ff7e112fd70b1d3e5902920a66d9a9672d6745918e2b126c845a7a0c5edf8eb08aa2e9f0cef45351b602b206b77c96a42f071177c945a86eaffdee6baf7c59d81a4a9e9ebd084e3b32cf6be94185bf53700f5930d5bbb26b69c6229ff38852131d7463a229bf373e5d599f9e0eced9e5f477d5326bda2e448136cf851c55cf2b96f822567eed145eb3fb72c12493279e9b25726a353bb393ed1191e34293942b964c9264ace46409b95da49377c33c5c615892b6ff1b27dee42620844bcd2f7df85ef1feebefc0d591505b2cf4f5d277e575388a7cd18a7ec81ef53e7630a2d5eb15def79574d765fd29e7997effc9a6e116b725f5444d9c0007effef0460759bd97433e1ef7a93ff110428073fe536aad1e89ae98d4e7b8bbe4a40ba970d841cf2823f3a784f97c6001a5ebd777507aea1f232fd1e7064d06e38ecae94e04f113fabd6561843872ef7a2d8b9ee1de68061205927fa782b034461d84fa3226038f8f44771aed1f890729b2e501b51f088ac6e45ce805f6fc9e4dd45d5634ad0c1d9978a2ad2453ef392bedb0abf5f0158be7219eeefe98f37377f88509e52186f7bcb4e1801d731d1722dc673690b06295cd2ac8b06bd79332ec7c45b2d81878c6eacb6033ecf626c13b054643e54c42bcbadef3d1422383350db0bc7c8fb4128df54374255d40ae8b7fc91b58fdf6ff7cd903cc860962355f0e6073795b7091e7ab57451b23c4a43272756cbd0c5c0e1cbc72f7823468bb60b13963b858c867d97491ad5003ed613f18c9316d2fd61f62218fb80d8dd3f066536e1772cde45cf6f81d91de1cca0f9dc41f9a5b99e4a3d3c3da93e96ae01ce8cf39cbf621acbf78b59f0dd52a0c072997399b8131af1722a3ada2f4db53586a695bed559d816d69592dbf0c8f32d7e0a0f1cfe6bb5fe6e0f0f5b2326c38d18b17608e5a6b7975fe723b9722367d8b65b64cd88d47589f737d580f46272d1a1d89c5d38e8b07528fc4a655820aa71f43c8f3168354114dbd779531b35616e69582f12c3487534b80004ba9c492e16511bb5aaaabd24949c43198e0d4066c5fcb2ad46b3d21064fe102b7351c6260a23ce50db26c29e1323e73a1951705627b20185934be02a18b942c05bb6282e8358e72d7969a86e2ac16bc877323b3f896d4931ddb14ec1f5371fdb2a6f71ac34ec06fc047def330bf39d4549904d08e92183c723915140d94a0b41cbe41189ec864c79cc9f69e1a5e90a1beb7470a860e683fff75f337081b566b1d6ef6c4f091fcab39b0efefc3d7be8c3e523ad342d6531aaa9d3b0818fd7a03bfdb0959f7b6d8c8d65cc3571859d6e2d4003259ebfb339d5173a008b69a73b31b279d26a348275bbf463e2631dc3a9ab31eccd98718c3471c20da2400568ad770fbb010c5dc23d36aea34813a60264551161b67f70b5afdc7d06ce3f43eec16f32000ed99b25b6ed599e793d733a53eee8135d86c527b300083c1ae92037e9d612fada975ab93eff2f7d3980b99606184df4a317482ffb947fbb9273791728dff7b3157e3fb8f455af447d2c100b2ebee22509d20fd5a171898c5e78fabd8f5ea3b86cf7cb6652ba159da1ab179c6b831e021d5eae7c7ac32e977251e200143cc5ef7b6e644fd3b23a2d280d0696f123c4ac3e678fc40f4112283509423d0512476c5304be43b6abf476aa30579001f944c11081f952930559bd38cc4da979f3819ff034cdaddebf8ae8413d1a1017c9f1cff231dab4731c6ac077cfe01d086d746c7afed0973b85760a9fe100e89c9f4a528e3432db2d31cb5a20f3368fa33a190f1dbda92b13c8ce90673a766a1f1e4cea10827d658b7061a359a70079b274504e834d5c906ca0634bda2116baa071369c5ba34ec34785ab929a6f3253f10db3bd6815b6d082ad6e27bb412755d652eb7e742d22feb07226ac6dfe5492345b0d32fb0737c326b2017ccd8d443aba5f853a0ec7e2f9c636f9daae3760041f6db019f1b51fb98507494ed0ac8678c801935b6b462f64a67a7e9cf53de2ca977ef1c69c5dae8db453ad0578e699eeb1439c18b3d079178e117181681487ece30d696c7c106db06cb5f4a489f45ca8d96046b3bd0aa394ec42d79b5af356e7480dd215cf83ac6e36b2769f7640402bf3610aa6f2c20ba6606d85048d3cefba9dfb5ae8ca5f7928a89bdf50d44549978b6f8bb78a2870d4afadf3f2ab9b74b1d31d64317f41baf5c5fa4d7d2fb80987166d134fff4be87c03a1e590d501da1c8d830334d931ede39fbfb5e603dfdab7ac81655270f0c4232819d856f33be1c79257e1b23de1dd56302122af24ecbbcdcc054e274de2cf75faaf674ee3f95169f54d74a83c893b0749f0ccda4bd4cba952ade144530b559487cf5f9fb670ccc263af1145423c25c89f2981651692e5726ded57a8e6153c4dc41db0d0d2cb712ef8129e400970a2d2e73819f40ebc6456c8d9f997331e8c62831de75e14a06ed2a91771014af37ec6d1610114b2557cd3b3f9f5f29b3cceae307a81f3c7e5324acf068a47c6b00ca73e763797ed0857ebe7c7cc8f15d7d9024089a454769c66a96d95f75ddc7ea86e8f83de450b225f3b8f42687450d4a4aadc642ca858c18cd20de1bbbfb50cbd6c78f522f9f09c5c8d93d18e7ab014651b35ee6285c260d52def2106b662eca257813beec600b2ccb2132c0b73146363cff42edd5e294c2bb5e01c5907e874b786231ead3b931e44b5c2d020a345d6876d59a2266b81318be640d80fe27ababbc2823240bfca048c3c793f31e3f50220f1dd6831043c50d2de8b9db287842341592fee7c792cb3676a52987ef07e4ef0a3fd2483d6882d7154f49696064529abf45745a1385aa0d58dc67a0d4be851c499ac16b6faeabdb3e1823c761c057214c5ab17f0436c94c3cec55560b082ecb70aa3ac7400a54c0485b5530a7689df9ff1fc0c19e71fad1b1bd051dbfac692a08325dc75721297eb89ca0542755f2f48b712ad0f12b536b808740812279dc982a1a978be631a2405451df0f2c5119dd71270161819ecfc3bc21a2d9728e5406809a4db33ddbe534d2afff63eacb86e7177604efbf4aca9b0e815c9360a858a79a40e9ad4489bba2b50126f9441dbea5c8a256cfa13e030638c9fdfaf3f3dedb456b25d756a0d3397f96c70e3b74c39567074499601aac11b644898b8fb92da9a502d8f7b3232920b99a216ea3998b8387e7df88469321f0db3da04d210bcca26e1ea6e4387b91a161893db5c06805a1990218366b57798932bfd22d70c27e1b8122009533e5cad39bfcbb60226873214c3fef86304ea1741842c757748e22035dcf343c10a1cb32d420c2335bc77f4b0a37f02fa01338ef09b7326860d00562a1c369b8debfb027745849b26f8ba78c81f93ebc29c0c08832f4af77c755a028c2d91ef8d0a0dbe24acb8ec87ee91dfcfbdb1825d11f761cfa36b14da6ad7b92292a2575901e36216981e2f999410162d269c56d8c2d31658a1cdad0bec19fc3715696cd35b25424d5c7ad888fc254a760d7be4f210a773c44f028179a08ab9559fe2e86cfc1d3757acee7305b9c68c9de9b73b0785f28720a2437fa28428d275fc184d33213592062537f8659fadec3bf9c2eb53dec1c7bd7c6d202b0fc2672ce21c31dd2cb04d478c8150be5a9a16b20ec22892981660f7fd07693e3671e43debce2ec9c5b41563cd061feb2358c0ff036e8c5d7b533278671cb5a9d6655ab9b367ae99cfc57a2499d4a5f66c702e2e0108bb6e0f19668a86f053777d9114201c05f9b2182a1bc04110e83862a8181db5888d8e44831f1e657c85bdce3307401297e7dccc72971f563ac65ddd3703541388b2859c0b4b580244b1a8737e98e228a2c2a99a414e230c3ac53227163f4b8ccb5c7b10a8b294df266e2a57cfa03ecea11a8b175fee8259684b909d53d37787d144845c3b9af61bfd549e4f39f729e2cfddaddeb9e413227b4cf819ad811e51d3175709484129e699f35eaa4648853504a6a49651e27cb46b343adfce9f88931880f72c54ac7d32448663f742618c20d0a37711cd9f36bd353c9690d49c6eb4c9bdc731ff0623147104c34a9dbd3a0320819b2d3baad8dd24b87b34c92451874cc7044d72433241954c446f6babeed85444fffdf21d255329096e60e30bf2cf5fd5757ce08ed3fb6e4cd96c128a50d8490a69f9d6011dfb34a452c8bf51a61b4122fc9e80f235b56af174bb71466e4cce9b8815ec8f0d9a79e6ddc0dd69fd07b86af43a28d334f7e83d7ebd633c809016081e6a0588700286e220cdb0b0fd037bbc352da5d1b36d75b6c102d1e2afcbba616e9c769632101e928c35926deda546dd25184da3e057a3b5aa2782eda6a18f08ba39b47859ee861ffab78516289efafb11fa1f87a547b6817c14732a14dcf711b85240ffdb90e0c2bcd7f07d4de69e4add77cc411a054699c43568443ec2215d066a07763b1da8cd27d574e6e1ac714072fc4fce421a40595ca40bbeb38f6be8e4f29f486c305f054ff45eb3b8cf9a57925a08abf96c4e94ad3904bfa39c2a090d399abd7e231e3aed662223d585ca01b457296e196a04bc447a55fa0c652a3fd7a6cb2a4499ed028145e6ccef93a3f7446425e5789d37131bf0d36b061fddd54ee7ed8183015fa874dabf22aa78512534903e3b539f9dbe20d8edfdf8ba1b7e3f2a3775fff98b8f398797503c334050edf8df452a1060a2b6daaeff169682c5b47e1c0c04c88bef2ea31a1655c1fd4c6e8b13cecabf2c1a74409406fa262559673d020ed88cafbe7e5769ca8ad9277b856145a91f72ca603cb3c3cac2ed1fd02f9de07fd5055d1f1457e6d5dfc86147dce722d20af6e1acbadf1a4964a07ebe2cf1a318d77f6110fdee186f2b4cfb32b7a44724110c46d7bb54f8039c614f18c89ed757a410bd34fd3ea6750fbd9f09bf449fe648a97650a6e119bde0b5ae07557f2f717908cf0fddab4dc59010d35aca21320a3398c9a3a56183f3ae303c615c9a168e09ca4367aeb60fd658a87b864e565c1352df678f935129650797d4d879655a41c3efec60ee5d4489e7ba9b6fe6158a98a7962abc20700760a3c125846c28c02edb1e5f1aea1d50196c5cd0fdca058a43f05e45cd2ae16cf121b53445ad2edc0b7a6003cdef59fa0896a5d45dec1b457fa8f6ccc9caada8a4099d6e45711e50a8ebd194fd76c89e6c0fee427380dd1ef268d39f152df3743614d00faa93445853167619c5772d6159db35112fac1220ccfacb0f5316e30a6378e8c966479a1dab8c5e4873c2cbe964c03193cad5dd529e0d4fde30307ccaf7e37c216965d2461e6ef3c1658ce4bb66dfdfe755f114737e3f1e35d6cff1483f6d13364822a9c9dc9526bf04363b6642f5f936f3fd1ff2adf399754b7c3e290ff95da654dad8ac977b4ab0aad3453e8013a844352d3d706e03877eb5d651627b69457e0efa5a278e7b89d00d5486844dabbbb8a0098408a39871a578a5769cdaf91b430a3c9f9b853b58de5aff8c0dbd5038670e52522ae4dd0e8becd0c1ca304f1b65cb202c47614519de1e5f809a1d0b413fdbc7959674378231d6ce0b4a2ef216e05c1d0b257a8e57ba05f8901ede47886ad3f701059ef55e672e79a0996b62753f3f06852d6f33a695d97c4da5d869de9184ce539d255280eaf50be023a390c833c8f060350ba7676492498f9becd33fc1a771afb7100083470253813d8b50f89fc58de24fb1800bc5a6a1c2ea291502b2400573d541a52491ce18aa29fce677059ed21da46df054d3e3e1ad2d9304da4696f986f5019a6a1eed93d2a7f2439972a7961136af13bffdc1dd19c6c42808dc9015c9b4d3c9fc40353f636d8cd256527d5f22b019b1f6243c3bf53d13560165a8302c642fc3f61de539b4b55435dac1f643aafda139f1fd4e3b2d9cabb78fa6eb0ca1fe5f0fcc637da2d3a697178197fd4427c2739c63ac274135481d43739899164933171b7aab3b6f4707f4a2e3a07d06e28424311681e56ff626119c264153f90cd59fd393d044ac87323079c62ff4d12d8b030d515ce31841278294070a1af70c8f241214f132caee06f2b7f08926ddab3190313cd035d7b32f7ec8c2dc92c93e9a52bd10d97926933b0b78f71774515f20790f023a76801eb669019804a4351caaaf87f619cdd0af4267e5b3b3cd81b4ea3ca1cbc1730a04415b142426f184bf685bb2936edfec9b66b118ae99a99b9952fa7f79999c338409e38db46bb07827c73f85cd530a2a4fdca4aaebda072063f656f2352c25f47934beb1a75f85a411fabfdecd7c718e86d5784fd8de2266a39682c3f8e0b5c8fc37d88abbb3841ad92b2268fb896bc01c143803a54772b975ffcce55f3c9689130831c670e859935de1106d77f21ece4eadbcdc97ad6a29f697895a26e683a968a879f64de79748b03bb0d729b3859c32edca551c7c800a3c747f5312e03fd73f2b9272cf5bab03a678ea00371f359f6ca386ed123bc886fc0f156d7799a6f3bfa02329416942ddc179bf5415bda98f6fbeac34a40f5a4a045a94376737f1d347a76993c96320bd74e38094c06c605bd47e3b6b6ca55ce363a2c7a228a81ba5af30066494698b9a0a1e1c66f0e6c0d07f0651c7bea42c3f6fdeff20687052a1fc32a5fc1e21077e0bf38191b3068bd50996328fdc324e3578d11ddd44308d1eb5961fc8c23e2609e70ec2a1b1bf513a224c824954f51b08c0a653a83908a1207b01bf7c320ca8944d767c37cbe16399dceba1d886d7177cdce9476e04e3ddab26448db75663fac6b4ef6c1f7d1359baf5a9692b53bc9562bccb399087aa5b70eb27f0751904563093691c5b474d1480c5b863c340f2c39b6a9ee9e0044cbe048fae5a13caa219e658002fcb3212b871107177682b18c88c83d12ee44cee020132a1125765c51df79c72d4b795f925fb0c9ca13935d0ae9c2819cc80376b24c756399eaa319464520a0aaf4b62a9c37c07ab31af4086a0ad172f23a32c9a153b67ad7af25253ffe367c8f6adc1702d53d2192cdeb81c0f4c78f95352099e8e713efbe75cfb26a03d85f1594d6d8befaf4b1e8adcebe6de03aa00dfb0cf3b90df3774574d45efdde380d92f628c053316c089ec5d510fdb4dfd4987797ce4dfc740cd4c330d6363d7b7bd03a9c27f7024abdb420a9e22165b517ff216949f19acaa7affe34033f04792dd0a8162b4e3a0cacf67d70e9864ba0a01a03aad3370add6e1db531a22e1062a5c1ddc0bd4a27618bb092b59afedfdaf776404eb760483096687427138edf9f3ca0ce9566268b8691e2607a11606dfee69fe856e3422f1270fdded414befb8cd45d6885dc3a1f7610aedc94f783b1c123921b40399b30f4a874cad3424ed0b016752c34fe52146b9e0914e84a8eda01d631a392bbbb754a15e508defd4d26de9344bbeb8ad71503f1e9af98100a6c882ade2228500df9fbfa5e7f2018c00d0fdfb0200830bdecd94e640213354dee31a1cc6e35c3b74682eabb422eb7687c81001c9f0f2acb406961a5593c1d00574cf62c904c2e4f0207277f05df69514b50078ba921ae05707bdf1856620d51945b05bcd1d656fa9d637eadaa1a417b62b2ca14d3076e67d254fcabf034418a997c1d09dc319a0d3ee3287549944b79d009962798181bb0cba42dee97da6f92c50d50e6789ac66e228e29dcb93ad35739d9e99da7da193e0d37472f8cc2b1ab112ea75304864d159a4ed892418cd6083269300ba17c7f2fdb083fc12887f55fee9630b41aa75a1ccd8db9d816e2e28236fb9239f028d54bb7bd95ebfede4311b5a70bc376dd7703072b57e2e264ea3599812bf4acb190fcc87422f426d142d5efa8befe8410ac134199d863808d714174fccc46d3eeedace8cfbbb29a7146332d5345fa3ec9053f6f75c7f151b0bc1a3028f98be6415d3a691b27b1aea5460cb0853a2fc674efc4c710abfb9808a4e54738bab863c5c3afe82514fbbf224b7d350a67ca6a6d5e7a5db52e187f1eb1aca64c29c8f650e280737a03ed164c28a1e550546e2cbf036f29c990cff0d6256b01efede0980593a109ae9eb6079859e4b3e047224a55c9693047d5e438dc499c87315271d8058d6b403f00bf8c6e0a0a0f8a2f10886bd1894b665823fbe096ff0e08ce55f721c978900c92e95888404d3c36536c2e819cf6ff94c408d224816cc19cc4a764c4175d42fab1ff31ae21fc22ec3572c711605b725264103306cbeb1bd8d1f4bfca097538bb2b0520d4860f711b0202065a8b6a5203b27c204ca73c5603355af7684165e1bf4af2849b373f2d9d0d226b0c3affdf15ad8a96b35bb0d737c844dd2cc9429b54771183dd6f8ee1b4f7e5bf09fa8219cbd17d988fd2d756a2d562a7c6709024e4a7c16e27470d6676d31912aefeb05ea2162da431f2bc4a41dcb76cc79c1e60670e7119a2ea108b47c9704037d93393c2563e1f7575c3208f60f893c305d88aa6f570987ceeb60dcb2290df20af32834b66e42efcd51212833cebcba795b26947ff38e6c4254bac068542a49873ba592a4efb4aa7b934c78de7c5a304341f90c8d662813c36e34728edad1d8be6ed3be85b1f3e97b5c60b2296ef9e4b77a49b730ac0625fd7445df15e1a11b56997951975900b0d87c1b7b01672a08dcfe63f3d804ade1c9c0f495f0b4bf1ff73861300a48e2b358c4261be7f8e8fe59c4f2dd2d90b18b363f7dc83b897e963334828b31a308bad083b9eaaa25db139ebbe5abbfc4c81bde53b469762a5f2cce2a78cfd95ae60cb82fa6de0ab27835f66f74c6c83643ff83ab208a92309ee5d2b9ed2f64f931efe898c0ac937a37e0d16073c2d80bd55336535cdd203530b6eca11368a9aff0c55299a54c920944ad0559266a6063d9cfec23baba633368dd1cba92ce764540d079a5dc3d685a0feebd03bb1b413de32778f517f92877950edc96476e815046f17177bd8e3297929bd1d59f96ae2de22e6a42d8d3ba60bec9dcbf26c2c9969547e47a4ec8661babf9f32dd625209958524edcdedb97bbd1925632095df13ee5028bf7a9f2a5bbe6fa1634c20c87c99b2e113cdbc5665b4b293dbd1997e8d961ca18cb2a69bf94ad91b0ecad40c76ae6d3f3808e88a57711aeb730b1416d5a163da915858e7531b4b034abb83fa0eb90860721651e560bee63113439fbb9ab38e0e25bed5a2142b687f3b942b60d0b0d8a86a31923ba42db0241e4efd8d8f51b33ada0705bc972a2025cd6643cfd423e670a3af4522b49dcd89a7632660a4999982ffcfe3e5ec7c25bd4c3ef30244d88db3b569e887d8798f233f710ca103d7045de9472d37604e048aac711dec3c92fec4706475518230897efd1d80c47437cd9ba4facda96f43a4eb1b81697d42700b69e96f34763d9345fd5dfa60dafa1391ed6295d4a5ab55974a9d5ed81cdc04794c755519119f61ca3ee2239aacfea314a8b245a48257f2c68bdf820ba82d0f281f788f2737f60f044ea3879bd7605c7dcc8f926dcb8f5c4cc611cbbdcca7150fe2d081fcc568592fa8d618bd352d9bb4596fd63dbc66501cc43c2d7a238dcba242ecbcce57484658832ea9aebb3942f9b500ea4b34fbabb92848a98764305fa3e955e88997119303ee4104accf3a37c419d1b6a058ce5c9ffc529c036ce8de34e9508126082f8e7e59bba5b404cb12baa6a3397d7b21d7296e4b0270039a2ccc6dbc69f98bb148cdaaee48cfba910927b081df81fd31d1de8d244a5c0ecf445eadb858e5c8f973921b26cd81abfef7e971d592a04aa03533058d554f7ae3b991dedfd29416dd6a125083674c4b85d4b0fe7a967d11f49a2d525060b5624668d915bdd9a8dc2f61459b59d1f1a28548f9cda0d8448279756f1b9e626193fb5533b79d6e8be958255c0ae4e6f2191159ea116087ff10c0e4be8e7ce4a2df62e52c8b751632188988e91f7dcfa1e4655238d4b7d069ff3e4785b8da0b921b4f70e7aea402960087e0418c7e0ff7d59e2ad93d6dc931640f1de756f7eeec3905014c516efcc2887f42e695c27d6d24d6b59910d6c1fae8288bfa01f16646341d593006197e8a82e0aabb0e54461a7190d9b01012c348531c7718a22833e7714df0a85af4c75dd6fdd725f50640cce3e1ab3f98cfad35d0da68f0f3e54ce8e0c7ebe0edee131b000777955dccacb98fa8e2a49380690f94f5a64315dd540dcfcd9f0720c78fc72abe1174a722b632bf1821682438f4db14b2d337727e3ea1abb25fafe59427b6260f0ad3df2aa17f29ad79ee23077679bfc38856d29b093e8325806976abe668eee3054e6de469382dfb72e412f357acebd3ffd793039001423ca9e7b47e0ecd169134f020c4f9d89c286307d3ef157b6b325eb828d4fe08e3885a9aa45c77dd9ac91d38d02a6ca87a38e7fe45c5aa926f30d0a25786ccbdfb785d596fa0eda605e64c554e318ec7fc4de6c07b09bf21f566b5bf1f8c3e9456e502492f6db54813e518a07b9312aa4ce1969cc1efcd9b8bde093cf741c9c768e11c730d5e81c185719a2ef15b1bbefde5681677d0090cd72c1deee61122b6d7de554060abd04999d88ec9e89a9fda1c8e0767ea91a30fc0a00fa4ef28f64a2967fd72954cb68d477c8c7a6733f67d7fae8d0e87cb876d5445505cb2f85f819e2d16256dc68efc48b46b432b28b4230e8b57b966a9a0f079910b474656e26ef337ba56d4b28e3f536fa8878dd700e95dddc9c18206b7adfa513788bcfbfbfed848a54fadcaaa74dd66ef73977fc433e51f406cdeaa812d2568527e5327362b9e4fabe491940897ff04ab6cf08cc8a4daa67552efede83ff9f2b172a3a265f7da87eb849710c2de750373d47e884a83102d8f88a9255170919db306fc8eea6e2292948b8fa049a3d75c14ba12a56753a289f5dddaa5b64c7fd71d6423c85dfcdad8ecf81ca542d92db192a395e1f80153bccc3b7eae97ee114616d5bc1e118d4678ad230e88355854d5adcda1f20a53ac66972d6a74519ed1ba199c445c44563406316ed5a7353ffda65e24d65e9f6d5dec683012578f00b5352a520ee65a6cf582824ce19a0d285c1046f405715aa3bf9b82ff2b14cb445ada05ab7bc33181f613c2e3c8a79c3118d1e50d5ac0f5baa77344a455777ae55204cb113f57f342204ebc54e2bcf30bdd47a6b95e0e11f83fff1ea353bf62ce677c1da9e8f64355737dcdf78494d4645d119540fa185f6d4966aca22d111318e49449140d1cf7e3a191bd8fdcc1a71fb741a3a43341ea640e94ccd321d9fe5f516f9b57d58afcff83d4a14f181f7f8efc1c9a7963acf8668144edc222b1ddd8bfb83e7dea5b2f18f70fadffbd07ac9f051c65ab8c6c3afb0378d2047d28dde36e4c4e52e26198574975ba4cdd311b7a0be1ae4ab76d32bc3ce4bc5cb5f460507bb40d8c10bf63eb073b3b38b7dbf5e88157b2d0cf26d2eb141f9fecc964cc04fea115bf37d2042694bc163d8bf56eebe651dbb72c2a18698e7c5d2e33cc08ebd3163ffbfea40bdfdbe1dee9beff9f6e554625573eb06d83dee856ee3ce0418d9ba716dda65112c218de65c2739a09c6c00318a91e2b6d91662ece71551166aca40736bbc9f15f340e6d3ff4cbe901630e4cd5751913b775c1389b7d0363b82a992203bc75793343c1deedd20ec730503b34a546e6367206b8fd4d56bf18f0f052e61d438c03aa396e0474a6baf0ce93bf62d7c3c19b3c3ffa14adead7556c11129789d7f6109482fc81dbe711e0264196714917a8b5a0f943a1c81ef9938e4692eeecfe95de3742e253c7febfd86b9d2e5ba011604d27a7745b0e3968e7e6b0398951ae8eb414b07cdb51cf7c1a6f0ab7a552880cbdc9dd9b60253cbade37353c22f0ed5fad5cb52ef5b40007ae5b209bbe9e9f2d27af465f2637d641c1fca1a94c0a01944d22eb27e7a7fb46d41d995aec4f0a9c788996fd0ad86fde066729411c9e17e456c6a5f7eeacd2c749ff64475c57e191a483564a0492ebe9d9b281b95fdd5e9bd996640c5a3e0de5e841616f66650e88b35845d9b04e024d4e3dc79e4a51a79f153ea1483ff7c1d7032502ba572da5a963432379ae59e269871b863826f3b830bc3dcc01b0de343147c9ef5242110397b86228ab083202a819508cdf973560e9d89b242a2786122c28e5ac1395f02fb5b13e6281582713de979e1bc22fce6c252468e9037001022f924a8c60a4c528db79a68db06e05554fbaa7971e508d4a316b2c9bca7f8d5a8fca31b808485a98e6688496ced1492b8fc9bbe855cbac964f8749a78e13e3e7df90292e715ba4c5e8f5f69eab002c0b93f39fea5ff3dee0132c8f0ea1dc52988ddd6ff1f2387a521a6c1f1d8549708d08ee2d5adb85d30026a530c7dc28f8edc138bafba5b92d26d96acf60652773fc328ac7f1412d8bc81122799cc40b606b0f8d04b2f2cebecfbc15a54a9dbb7f4afe639967c0fc5e2f95cd14b5167d44f2aaf55c1ad988fb37284715c116d7c5854bfff7ec36b22caafa7ee0acd3cffe36e569d4012179fb76787970c118e54dbd01cabe614ef8f0ddea78218717f0fcb7601e1b1fa3000367a4b2c6d055e87bdeb884932d50aa7e00dae5fea3d95bbe959a357d8333415787d992b839f4eeaaf19fbb68cd69701d2b42830d5bcd5f6359be70337bacd73afc0ed46e285339fd52628a10cad51e62f89a2daa78bdfd9f834bb62e658394f69bc7245b7b8ecee4fa6ee84b683eaed7718ef9dfd899bb6f4879a4956351e0ebf259d5f507956d663e8241f57365353e072b1f3f94c08113de538a3d7348901709d684f9bab3be064692020e50e2c18cdacf9027621cd7fd93a10f051401aa0b86a991cec74bb249b80265f46d6fd8db2fac1e1240885cb5005a65c385e147cf4c7dde434ce361497bc547a2ca636e2373f3d7978fcdcd46f7c0312a2c457e22784f8bf2cd79b8ad38835f94759abf12919ed5623adb638851ea287867b95f5f31063bba5383766bb2004c1ca87f50f0cc2361d94cce8c122d0a88fefd1cc8114df472802b8d4f28f45979b1689e9721bf54fe3670580cfc51e399b5663b6d8451a1e69d812710bf480717f6862f46545045f65b17bd6fdba599709c3a1f279582e77c3cc9886f5f393def05da480d93ceda204273ac8dd3468273f708f3fcd26bef7a5fdee52113ea978f6e7e63b961178561ffb4430a71ceef1f7436e87387e65881e455d908ab42bd89a2cfcf205347402bee9cf3247769037408c28f38c58e8a2c707f213b4b243e62801578eec6b1355a4a0bc92b6880c1210923000d51eea20a7782d1ef3386c61739c3d691108b7c2a352f7340020e2538521f17d777b9e7a2be8689a764918046728f3661092998dd30f35929ee692ad0b06c17685b8b467ecc52cd94a527dfe027f00fde8ee6c1635fd5f1d5f8b8af48911f40c205114fe66d02e5e2ce5b07a8b3587178e5f7aabf16dc4b6fbc3284864f13533798d059855b3af09f9da9a6f4366088f4d78f94b766926fdba48fd3db77c1fefdc65f800c03accb54214c670b3cbda3435c384c34f4c87164945f70fb5f6ffa277213e808260551d4bf13be680e558a3c54a68f0254a8a332feae2d049572d8e8ed75cc24d920507d0d05dab0ea0d4b53ce2cafa0f18a6cf48d2c5d5b78ec94333e0fb7960c771dc36ec917478abe4b5fc4c5fe5379d702e23b13b4ec6c2995440d7f5de802e7d257eac60a19bdcf6e8982056147af33a9349d63b9442d3c420ed02890ea86f422873790285ed13f06b17ff8cb3938f8a7fe0a502df1460432d1c0b4c5fd67266f4302c8708d6fd8cea54d2b2a003dfddf0dc924d4a053f3b425aaa48da4458aef7191f80e89d0705b96ee5b85e6b6191a82cd09f8b73d0205e26e02a20556c558707f6d5cb6043c1cbdeeb7a545ce0a668e2b612882178dba32331b7579a2b24343a4af15c6d23c22ab6372145ba7048cc0e7a457a3ed8d3e70bd578355d5ac9910e76d754c0d46762d38c5ffd23c4b5696273c9eaf2663388ddd3a3a4b4f9b83e7e74081f72d5203db23fa40cf3a98af9e781fb84e2ecf97e583dd7b4cee6760123f55b696ee57e48f7b1f64925198d502833305cfabbbc202e92883fad078f0dbb5aae9c19b85ae39b1fb25b4ffe7a81826c1f2e65f55850bb418c2f09632611109fd99e134d05a489af7c7a07ec3fc581aba5bd792c4c8cdc003d64dcbb890b0faec9f3e6d18f352efabb56b2ac316f5e1800af2e55bf8f8e509eec4520c05cc08ac47dc719481631be50087f187d1693b7b7711efca619b7ee8e0fb6e0234bd65c3838fa71013caf721edef19a8fe37d22b5465e32d17cfa090c90339a54c1a17ec43fc9b1b93cecf0f38d3131a81450fdc440645338886dcaf3207bf2eaa243d263260f90b8fa4fea871c63089ecf7601b8696578a71c81bb24c66e872139ee41ab39786bc8013e666e2dec2e34f59470dcbb237711e13abb23a4957bc3b92aff3e3b814d9d24c6e987903ddc286faac6b156132cab29e9baf1b99e5a198a7e3820c345e95440b2300e1e4ba6b02f318149cd5c4d4d8670a3103cadff5d6ce672037d974fcefcba45ef7c5599a0a28ce20de7fdc157bfd770531b7610daa757a5532b0f002e643a3eafabbdc7bcac717885728422eb97ba4ea87a45ddb300c52193f9c4db17e8cd1d57c3718a69f5f5c130e8d7ee971737425eae2db5947e72ece5ea0a3b58def2a09e5d5f1ae99e47a740506c20c1a2854a3b74eb8210508e855af480c508dbc2add46a3a24d7c429eac6cd79a121fc098e8e44222b5561f66233775b12e08d3e50c7b8aa664cfbe2a95441b5c6cc35a81d6d5c85e69eaffd28a7e4f2223222a6b8fb3f5591bd172d7293057d19152adb630226c9610ac06ebb291b36c39a640fe81e879662298fa379611b6780d4c70d1deab988b64312b84a3312ebdac022055660616410b1c2c85eb67f7ece861f0db618a6e5b6ad2634aaf9e6915445889c7a1a8a89d651e1bc7594e5f6ef8d112b045e23a17d28d7175b8955f3f9010c68624a125bc08ba3245c101e5b7ebe296328ee47f41663967e95d03e31aa3a747fe1a37bd32030ac5d5c15a2dd60ef03762e86d260dc41e1eabc993ec8eed13a2ae13e2eb35e546a5c64ed216cc6de58a7c1382ea1e875e5c95de0625dc091781158f10987dc43abe33f3cece66a3dc94388ebb000836016a942dfc15c1a89b8004ac0fffa8158f7af62663ef8f5a737b87ed6c97d833ba561cf0b190ab7e38f68e196c30e6f734a4c918f5f4faac9ee5372296c0039fdcda3bf2b2f65915175ae058a4bf66877537401919fa8cefa173c545ab0e936691edd3fb0c539eba3b890b32c831c323e08166953af09cfe995cceca110c4407e5e1e15afb633987dbcd78b7c3baa7feba7c4578ede12a6e428f33b0bc293f77a0598524653d1c48cd5935ec74d43c2befbec36fbd710b3a81cb9f8f9fb388518aecbc608128da0d83ff8657c7ee0f5cd249ba0b3bbebbb379ae9de35f6cc12e230cc166ed876954d95206e06a280129bc2eb873730110a47cfdd5af31f8435b012c1b72997cf958560188c21799b7431f0bddc202511af3efec0e700ef182fd4b054104381af9e0e9333b77abb7451d8d7c98cd6757fb9ae5b363268614b94365975499f3c1383a3efd76e7c3147dad0407c9825d03df359c7126958c53641382d02f628b7b6b12523cf16f8bcdc91823c066c8f94d471856591ffe78430f8adae84a3e49d59a3e1f9612f9fe5c37c683d30c1833ca75a4ae45cfee49f9241d23b889d7df4f934d128b1d37c5e6bf9c93d9a93fd3d8cea66e6aedb56e6293057f0974b190e5442e07b0d13a497fabc5f9897d1094d15d3e253357042966eca096d57e48e31f1fa30e02e9eef3d688566df3c65b7ee23c1a539062b0b0d7261c1949c20e5d08adf1b8c8d91d53b8a676cf59755d1e9a3cb1961341fab5e8347adcbe1fd8063de05b8bce8e5548260e5895dcdb1976c33f8d4a00ea7186727cb7642e2d679e68e8e42e2027f2973147756897a2e44849168211f06a9627708f89e7981c57684fd7612dbafbe2dc6f92634491f2146f3e2f5e72e9ea7d83a2ce0cf76498b38d003d3f33e2b5f801e16ca0d96413bd7b9f887cb318cc34a2132813f10e1ac0798da82f982b55c1cc4e323b0681dbd862cac80b8b107ec1562a0eb285443b088f45ce11912310e91af68bf284de846a9b76616437a108fb9b03af84675bdca7b76f709c934b1d1d80c5aa5a61d82d4585822e4718454ed1ee22e62c3da72893121aab05d0a85052688d3e7390cbf2dbb269a779b31882c5d4e7eb3e66a25266cf273a3a30ca51023fe82194b2c6a6d26b93efb26e79bd7b4b45c2dd10fa097466ac968d9a2d18c034caac557359ef073c9ee42198605f99b2077ccbe8794af03c4336877e21d77f4d97e4d1bcc10d1f2a84ec7aca319b8e509ea893d82c718eaf37284a2bd3b94769eb41154e5ca64fabb32740eb4ec44bf5bbe7bf76eaf6fcfd1f42652651277445b92d9845de806ea0600fa295cfa1f9ecf162afa2736ab209bebe2e9ffeb10d44c55ae209986ab96ca32f499bcedacbfee5995fc63a1475b196e28cc2771153432529fa6773343cdcd7381daf04417a1239d6c201c35904a16e7f23981eb8b47e3de728f881d9be5498811ca3b71cb92b0fd2642f41818040d8c582783764c006729e5f10e5dcb9fff72e55357cbb119dbaf0524c26bd73607583075ac8bffd07653510bedd611049db1606d72aa9d85d98f851909399d0765c81020220ebcab8fd4402f353cdb05eafc52cf6dd6d8338c02e1b603a2ec849ec96f0d8131cc031f25f027f30c7baf2bf1c39c0433a39644f74ddcef83384369f08bac77fef6e9cdb0bbe470415a8a3d624170bc807543c06ab17778856860cea20290398b0a7691c0a072cc2063869def763c5462e158a46c05f32a027a3fd9b2156477dfefad76f0a102cbb1a3b70b5547052c2d90b221504003fd78cf6f75f17e86a7c1cc25ec374dd7645d888e257572fa9fd61d16c5b9acf1785d23eccc8a26268bbeb3ef1702f50b8289f02a0ef48439895e5e9d3c81cac6e3752b7bd804eec318421b9813a406e97065674fe2bfea25a140d6e752cad23e7bd3e00281be1878a7db19ddded8ae0ed6744f09bb729328e2346173cdfe7d02e17be0eceb737187432da9b8bd11f098281d958a1b899203a721c0ea7768f1628550e8911f26fb99d7604d59e51c2bd25e3b0e336c308aa8a4037f494bb71a4e164b7bdb4c09e6d539fde2a0369ca5393655ee32cf1a0ae1eefb8d78fbe8bdaece359808285977ffa821e5e3ddb60155f09899cc5cd67847352e51e5811863d9bb78d2611833acf58d4ae6c644d7950e487ef33f0e53bde8f6a5417ab9b8f422a8398606bce06b4b7d71fbfe93c88411d19bd5eb15192b8b760cde8cb983f3a117bc10f55ff463ced8fce88c72dc6f6571b6201365aff6c82e9d416817d5e135d906715f39ab24a655c0ca5c5e52abeaf59acd11692b5094a50d64eb927b384d85f78ab949c449903a288269c3cdb70ab3d2893744489c445164263d0ce4cde5a2684b4f88445e25573cff4f79e196c549476c64134cc56544040a296a563ea5c4afb8fadabd9bbf8eeb1ef59062142008791b5a955bb63e6a31ef7fb41bcd83a72b56a58995d7b5ea0705c51ded81c99567ddee5036ea3ac8fe39027684e2df41ec284f901214c94d94c31e35b595fd33212dfd30cdf85522706a8dfa98ed95c7e6dfe5fc40aa22a08bc04a92c40495ab768b88c9ec784dd00d970ab43decc4fb61d7a35bd6d4a492a2d2bfe47f08ed4cc15959ae6cca9c886d4945d3038d6b49774875389c197ec931fc6e78193032645b3488eeff71f70a35651bebda80f9f5cb49522f28906abfe7ca70e0fb4b059c27913ac7789fab24bed15d587d44a89c133ffc29763a50b78bbb9e684f57eabd124ad52b470e6db62fb39d9e3744affd007dcb9d47906779f42328cb311050816308cd7bcc7e739cd751d61ba9c5901c803f9c365b6b249c089c92f359ec4f62660b20f4d4da45b59ac003bc2cfded5c9e290b9d1be6802655c13c4558e40d1f4339eb697a811dd627da2d328224584f9c3b5fcf47c6afba862438995ccd55c5b066ab499212325dd60ea708d727e0c53d154166edee33a96dabe4c169ed6e5ff605f1b424e455c8050a8b64be23855c24cef57f6b8f4af4eed4ea9c70468af9ea509027285b345fbd9913a2a8d9e82f0225cd2c19b51dba62c20dc75e307c5fc3a02b1358351c7f1220a8a0e30ac0e03b2b51d16864feaa68a7563272e96ffd89dd2c73c10fc562a9e8ee63ac95e422e416df51d53782e551c41a622d2ea03f454aaa13773c1206bd92ba0abae7db2622c07bb43d31736dd6cfc64c258d89bbb6423928cf63d34eee8add98e5bab9aa0cfd15fde50dc69ac313a77bb33c2ddcb4cb3e624f5858f56cf202dd1053b17e98375163f09faebfcaac5fbc5f13f0cbcb3de1cf6be4504d29704674225d0004b450a31e2461cc51ed4d571bdf92b75211516438ad5b060b1b2656df99e08f745df3e6e84d6c6459eacb0b5b4b521d0a4f189832288c8204a858875bd92b27436fabe460d70b68f43b82026eb0cb05e5ca253e4c95d4653fe782d46b731b0d9fe40121e3d0aeafa5520d23692b50d96d263e8f69309ffb8b2ccf6d3041ac3a4a9387147d55db890274a9235e2e2a2b71ce134644e8bcf8208fd798f626bfbfe0aaf393a87fd837624efe0103d5dc897cca0dd1c5a3e5e4606292842562c41e5e64e529add3e5a09daf7f57348d423f8e5fe8f6cb1b9550165294ebab9b921679de74a437041582230ef430446b883ecb26d8c616ea84d19d2b2c61e71e5fedbf7f36a95423c66413fb5ec67934c270c3db61ac31d8bf641c2ce4bc94d25b1512da851c7cd5423d16d130f2118312ae1301020e115d6b0862514d15c915a850b31b792921b9ee69eff42f9095d064af2915102555bba6184a976b2627028c86236e604221fe3f5ed151221a281b8b2755f32168b86ed3247a9c9fa44676918f7e9a4c44089ea14ba7926f50dcb6dbb52e7600948e6038b98421bb7a00976332d2d6419a438d94e4908a11cd0246c92e121c1e86297ae7188c1fa4285e35b0e20f8bf9db8ebe348655f28e9c907bb280848d1d0079c3f1903b666c01c821444814b25cc8ba9673db13894ca804e0d0c70c9fba2e497017752d86d70b46046794279d8d8c86f2d781db7ef32be33b1b99542f9224e2da477498560239c6e24c8c47424f56629c39ef95d978ca86ba033923360061b27f957cf93873277358a1ff354f5eac398fe38d6b4f137a11ba537d3a6cdb69b08ea6d1ca582a6a3ee2fdc7b6ea87f4c9ed66637182b4d1f519bd08a5691b8b74695172800a0c2f6b55d1b03d7eb51cf5b89fcebeacb8838af2300a35fad56fb86dad07a892e729a5b8956ca999c642ec5a333b5ac0c7c4d87a545266c52c04c9439b452095a663167849eb4a9229346ab985d30a0630b689f2b8de220b7d520b2fd15013a0e57cf42485e3b272948eb8eeaa38a7dc1ddb3f883dc3c99e21d035c616ba8c6699ae2e0cf86ae735031473b72052344cad001e99a70f57b106239ce7fd8eb8c4cbc0ee382d0570963bf3a8434702115328a5fb4e3efb8b8a3887129e3a136769fad9ee24de2c8f12cb5635c0787b287ddb5274d8a670f21ab07216a6f89b82edb687f1baca49b24620c60120ff23296cebaa035f61de61e1ded3fc724e8dccb431023a4178806a00a4507ec1ec69567c46d127aebad6ac44b613b3038d096b01f34b41466b196c37667d8e06feb6ce77721ba259e7452d4192bec99ce495e30cb5632dfb776071f2c3e5395f382907ac426af1ddf9102a665b90e7697a2ca91712b28462459a4979f884f01c4d49677ce947029dad3cfb80a7d2c07d2485eeff2db9edb68f07f0ba9cbd95589fd849af12923d44c4b46168e495293db4d7a979152ad3511f74febda8c85a8aa3b340907c4140c5732ea4bcd453192a493ef1094187fe5cc04dd13a04b078499051f74f59ed0d02608548282d92646b26d30f05c4baecf05153bcab6e735be9826178c7bcfb82028c551618e42e1420812ed46e444f00eeff1ff4ebf196a7ea8a0752ea285b6d0b4eaacbdb4f75065cb3b47166610c6db9b23aee237e7bf650fca6adad473497cf3499685efbacf64fc23affa849f407a2e2ee4d3ec0824239537c2de38bc7450fbf5c78cc4ba3b7086945a7980a7923a6399fc711cd87da19fa05e2545158fe2ebd9d216fafd3beffb2cadc3a522680b4cd8e59407683927b1ee6b0e2bbb8d9ff509e7c2d67d32b3c33e53795b50f860aa9abc6077c52381c228ccd801068c0d82397817efd7164196a099e233900478095cd08cfbf9cb40eea2d31deb2ce166facb0d7be24daa24592616bd4fc4d47ab2e96efacf3d9aecd7a6cb76054443f58325c8b1e5ff974b870820e78fa6fdaa892c15367a8f21af614a6989c6c0e8b610cbbc95214399d83d8a34824648e2bc3bb4ed66718ae87869d4d6c05707735f7da4b6382dd8793261490c4d4a6c633b008f3a265705c1f526875f94a3e531c4625a3a4770b72439f20c27f6937fd620f1247bb2d00b6892a4a426ff485cac1634ce12b493655d4e244f992c8e2a7d2148bf22a39fcd0d8cde0ba62366afb1bcc8353ae0c7ced8628674648352a5d8b9cf65e759a3c382c309dfb7e3109f174143e415eec92313d0e312b00c8629b500f7f93f1e7fac024bede2ddd290673ac08f75cd9492bda773e6f5b76fc2bf8b7d76371f3f38a5d5d934bd1e1600dae3e4b76a04b5c8b5c2a256bcac03a7b3cbded7a1734d9b8bc7ee697af281afccee3b71b526e9ae68615d48baa5dc8bbf15792b7a9b96b649897667ba5ad45a69041680610a629f579d8da51d9a59db25bea0e949b00117955af7292f39bd9210c2dfb2fb6fc1ab5b094c8fbd961d4c0373763ac953d8c7d19da96691da6c91213c0eeb5fe736b100b7cdf8c03b1bfbd90743b46d21ace14a27714b4d778425480a15ddd87190667423d1c4be42d6f9be3bd04011a5527992a1259b0e097926c34a3edf15d9e6156c5831e768837f9d3f5968bb8ff7950f93c943a55927ea1b056be6a534325ebf24b35521434ae5d184dbe1c623243eaf129178e7d7e97f772d8c8545fd6e410ce632736d2ed873d797ed164509eed4deb394892475455dc973e47661d3c785afc293053a878d272a491a65460be19d39469d7ad72fde7fec80ed9dc7f736bd2f8e8cdd46cacd9974cb5534090de59dbba9b03590cc3e3b94ba70cd9521d1aa18173a240d3e727abf38c8543a6cc9dcbb3be84df037588c1d69d07ce23a23de467d7a78c656061098a3e82819affe3adc793d592bff06ff2a97acbc24a51d323fec79ff00d410dff4093524339a332d8405cb5095e93e5a06b05f52a7c5d33d6fc3d0eed2ed783f90a5807ec31be37c00a5fa7967f536078dea20c63c1ba6f479a56e9ae19a3e8b28eb9b3ed75c367e4f3bd49a91c112bb750e3444083f32f0073ee41043599eff32bffd30f9d850a842e33abdba7bf1450fac6939948cf6d13477350262864c8423bf878874f04b9898b39c2b14163f3433793c6eb1b2a4d99425123d6760a48546d083d23fe2c406b0348d7d0850ce2e988d2384f1cffab9ae4a9169ab97fdd394034d5ca00651f017296b3733d77a2059ed46cdf714043b23623ea8e9818ec426f49fa5d7db7505900d4d82d60a1ba4cb8d0340a7c2217b9ad33c45288ba8ec36cf3fbe7f5a2d0570332e3f258abb47f1a5f2838f87c00452184aa00ed4827393e1919ffa1abe68f6491b4ca77174a7196ad07d867ff7b2963e3e6fc722045335626fc5e1b60935ea6f1d073655e157532a5a46f360284a17a2dd1796c11c6c7d34cf04c3751180f613b4cdbc4f8da976784ec3e1c15ab5e4975faa2d00bcd5400185236893eb777acb1cbf2351645018a3ef80f479c0c8c29227e29d49e31250a7d5fb1140f3a4e91b4ecd0cc2233e6430244c19c0d8aee3c28704f72dc1132a029ef08c8a01b107acc9f61ca7e9089f93c6e3951bdfbf35bdc1785b579dbac06dd091ea5a4a01c9488439a443f901a845fad4a5c302d34c22dd95fd774d9a2f18b552e894a7c3d5d759875628897809b9efc24ff1aa7055d520d912ab28cfba31d01410ca95f8da45061ed9b86fcb0e1de588d7d3cdeee8eb85f53f83a2a44e50bc11569958a046646980bc19895c81130d40a5c8d4d569403503f9fc5a54bfba0b20ce9cf98d7fe244ea784ea2793946093fa7f0b8ccb95cd3f27df7cf8b2408393e48a4b94414942b47fcb149281747ede83e1eabd4787b5a56477074b15af3da0beda7ddc5da4222f3dbc836248acf0bbcb62ee52034d4d8153c9659fb176cc99c84ad9d253e668b8001db34becedf6f08b7c5398a4297ffb3707b9ce9ba8661cee070dbc1cc233a630d09ab238f89af928d578db077acfcafce78ec324aa685f2bd4c4434d1f004b2e414a59f3a42a1460c4074a97c385892477c8e505f09b424bae2377a393dcf3033d3fc031d3041f5944f78b680a63c090a8dc206e0dd8d5ead5487e2623227aa89a0d225948fdfd2690793573f2c5108d3dd5d231b3f8c25330a70ca6c5013d1950470fe087c3e90e6f946d2b4853b97f7182954d9f9790bc7ab779194efd6a2b3af874e0f3b0e29aaf7a8f3c75af102c7cd82fcf0180a74e6e6c1fb92edad038d8a5fdee49f99621f421200dc45c807eeecd34e0e2e5ec9dbd623698926939087863f442a04e9836df576912b4721dda233b8bc63cd3508e384d799c2e8772b1ce966b90c86ea8cdd14fae82374a3b917cf7f375d007c0634327e27a946dd1f94fcf589c81f0c09692a80eebca9287ead83801b0dd3c2bd66cbc32ae0d8cb0be9226bdcbb466ad730780588f0c62afa3d94c1ad0012a5552f358c50f9e0af4fa2dce5946d8a8cdff5f39fbd56ead1108d7ac76f3205a73e2318fd16f7b1376d9b11cdf9a652e3f75e388f5420607f5450292d537d1eda270ae698ce659bd70e88f48ba8d01e636b115d25ff93d22c5b91a309072e1584407bf7bf2ceea90660d82760e15879cfd992c8470f641a51e99208bd6c03b28a3a7a836ef0d19235857ba5a98a802a55c09b246b41ae17956b154fc7682cda0afad1988545d546c0978903a2858be50184231bdfa93f9df9c114c1845da6ab23ba1640af215ec9fb0ee09043f325d82db63a03e72f3b55a8316ff35797c98ea6d7cc79cf96c08533d09d35100e97c3a3f74f9ea35978fbf0d9ee19488db9bab739514cc1c80ec14a6fa7945041d8b50d0cff6704c2e379e1ad4f79e16674ae311ec1835cd8ba095318a0bec9f493e10f0b4b14b7c04f8a9d418e156c59b4425978d9a47f48dd17c1ad860b43184d93911f443d11c60eee2d16b27e0acccc67ffa19e9dd5d12a1d8ab740e919c201d06ba159ac00082b373d2f3940c1e2a5505a58c853f0047a4d030bf7fdda133b125a790bdcb550b85387830489f12ff620d84cfab54711f832b271fe3b35cacdb2206fba855b928dfb752366d3c962ef5e4b7742b6a77d629ec05cc3fe4e3f82e6ced19895a1329d36794f9daa0880603f6acde0f120b4b49d0f19331547789939d66e71a96b3e901b538762f8bd04faa53a9d037b4bb8b465812bb22599f46274d1ee5d8debc0b20a4b0db79ffe97997a9f0df7927f69a740d8fa8a1e8b5046b8a68bf9c80149c42f7ab22bc09a53bff357e605fe6194c96fb551c6ff3d3ec16acad3cdc49dcb128b7afcda2896d6598136290af424cbc818241dab322f436878bfe7beb398009b2f470db5cb0a3c33c957376fca502cc7d605d4a5af4d312d277884db93b8334b26d6f656f8098c21f88250e47d50c7ab403ee1d9fd6905ac84cf5c506a2567f2b88f4c78db196410eaf2f34fbb26a6664325456e8981f27967c7dcc5d88027229755a82ec743efacbddf260ee0daeff6d9a9401c05e5a85cd17c2361916338d938c4e4d208289d7779b09b664c37c594a35baef20e4c169de98b426ef2d0a67730b17822ec1469f352d7a3980bde798fc86be5d4746241472489273f01b1e59f5bdc4cfc904da8a79e1ec3fed670f636d1fe66be9c302df1a7e6dcaf1bc212583ce34f2f89aea6dc40555e3ec7f6aca4227e61f0921b0baa080fc811b6b8177331b84a514fa138741a557f00d805b33332ad00520137d6b9425242b44980025467ab0723c5391e4075eff30729fd94a39b680edb58a1133afc376a2beff13e9b423a8761e16754c5b95515dc22c3999556ef68853a00ab86843b6d8a8b041bde707c48b7707f70f5156bc940ceb30542af0e07c0d0b900ba39f21405268973a7472692390a430bf4f9d3cc6f2505c898bb47123f757194207ac6ef1757d439ae042cd584dae19d37aa509e2403cde21827a96d443e9057ef9d0034be506721d352855b9d1b27a086215e61f00e8e6c09d75c2fa986cd5c1d98f4284af96f28ab79581c8279f6d9ce16590adc47e77fb47a06191b87a5e64911721fd10748940aa1d53c17cc24d6b901422e933ee087bb26376e59b1306615cfd2d02fdc0016455c25ae0506507b0e807557d7d6cd05b3f45144906cd51e32eac32a64aa928c2a0994ffc443296d1173e1f22d7ac6b6ad87b3a37c93207e4ac5fe5dfbadc14b78b1d2909b427643f74c6cebf09f419ce986e2853b316034468e5068f357b1bc06d6cc66a59ec8d245c7ce0c3a8873d7f31c32e14319f4df6cb3de5847893a95d5bec858adf7aac024fea83fd9e0194990b824faeb0414e84d1a662b1eb9ee0612c3bb2b7865e22b6f2659193e17af41385d05683f6aa38213938160238ac3144fe4406ac78e332cc25db7774385038c12c4bc4dcf42be220b9ca8d51937cf8129282ef9a9f51d417146ee89804977c09e6332221d578e3eb881262cc5541e4807855dccee2261742776acc074980c13e339f354237b3e30f6ac76178de409ab549677f52e30c74bb4f1262ee26abd0db32e9341adb2f8d196a68cd1f88e48757365371594aa961e97b19470883d181e6737069d69cc9a3df17a45b41214c8767fedac3c6026f1d0b4b9664569e24658fe7787151cf90f4e22ea6a3a3cb6667dbbbf762daf8c9c8842c96f6551973e4061cb663bd0c0fa3a90dfef615c91ad7fbcc2388ceacdefd68a4378266e0b35030b31936f57816d7f1b64095ea2ad09d20bf4f1ffbe74cdff2232c1325ddc19f0e6d735215d5d9213cb726e038208ee6c98c35b7d1a4f087e525c4bc79a4be271a8af782b5e049f8bd11ac26552c59f0775b95d5ab75e25b38f4fdae6696c61c458532f42ecff9134b26ae61845856c4dd4460f0a2f84cc189b092d4d1234f809bba647972b8bd99a990fef5fc2ab26726af801b5c5da617621baad00ee2e04ea53157aa6fbf8148e8cbd6f3c8f0a99c9209d271efd6ebbb113dd5bfc0686d74b7e868d3f5ce3789717c643c6476f5690c2878897cb896effb09b222cd269487a8df8373bfb1048d35f4e9d209d49809c6307725400af9318067ee482b21267469dfb3f7d8d7952bb8aa42ae7a0debe2d34578ffa49e27e369ba24f8141004a2cc5b34d0ef9c02ba272821edfc44f7bcdbee5343148ef495d2e2ad2232c80f68ad4479bbae37f21a9fc8aef7e3d40b7a9e460b021ff102b7f7b7f48c7a6d800758b4e6b1bcc88c10ed5a46de952cedb1eb903fd7c5ac1fbd02caa920e36064d7d9fe58605cb2e58d46230f2430d382ce9263a3c7801f17648498d4f428ec4d8509c69574644c6c62b3a7f978e90095281f481f904bbb01e77fc80c1f0ee31c5373837bb9964c3fc219f4daa4021c948bd2fdb0a377f492fa1bf1b8e28d3196e2be2fb52a2fcb29d17bee2efc96733e30ef79de649d62fe528c08cc46df8a06c53d3d88ef9da5724ee4ee338e1ae6c68aca4b6cca380dfd68ddd1a3a5fd3cc0ac167d76da47698e3b0a7ca4d5d3462b926c12187bf1074726a4fb7808cc1ed75a165943c930afe80e0241ec447924ebbb9fae953fb24d3157437fa24ae4f509390941b54a2d46625e5d696d04e5ccb79e672451f2dda5757b47ec7bc19548ac64c2dc98a17c68fd1b2f98e20af1c751b3947be729c008bc13e2d2a6bc8fafc21a92051f960d4a26f8bf80c34f72631c1b8744b5b31e5d646f0905582c3db71ff1092e8ebeb3f21b054fbff1316301adb3a1173aa3654495f43adbf0c0e542841e97567b8902d5f2221aaf3265e0f26ca683cad08966102758c25fa2c9d49470a4783f11574c96740fd139ecb70581f29c367c2594150fd63bfff17cc3a8c0960aad94c7f47d87910fa945bc9ecca854027f0f81070ddaaef5877249028b6c6f21a38099682616629caad20530f35b4f5d38ed55124a8dc9bae7faf2281d65009e91d1a847fc5fd03c671f8c3e8527d0c4901f66855707818026891d06d20ef3626231ebb1dc0bbb9db7a480222c345474e113c42ee78f8dbef23763765c0da12c90b965f53f388215e81ea7079f8acf29fc094157192015789ff7dac441ba9d7cb7ae3d9c9f3a877f88b48df843cd7c41212cb6aeac2da8b22c5acc2e27c4904d500ab4d1572cc19912abbed899eaf2724874813d4c43a9a37ec953c4e6a6887ad125e71aa71193589f9fdf17a36068b483f25fb5242b5d5afdd4c096061679bf2582275c49540e3908f0240655174f842553b29d812e55daa299b798fba070057d90af6ed3b5e25e06fc2b48112675d39a35672a3a55f0725287948b6c0fc517ac904d788a3e2ca97755235cc7eefb4b15ea6380e986064da3f927995f45536fdbb0575e616f12295a5747fc230ba0857af40ff5b8fafc75cc3d6cf78d943fe8126db35f362aadda2a37183dfb6c425f7f70ca074db4c987ec306a6e39581d2613d1c3de0a2e3f2bb9aa7e6a257935d3d573d476d04c65dc97b98dba34e66c55a47d226a41dabc0ef57a907fc7f3e7a2d888b1ef3fb74c42ef499208cafcc89d5bccc016fe3317d4068a4c91a22eca2fd016a409d61c77db512e39d06cd5626b6adc320f35c3e8216dbb00a575cb96ad045f2672f3633cb71469119e174e1ef179491bc76675ce3af64cecca718a7b85a4c12a2ac32fe309002f92c90e8f786dbde8d23111fc71d82e008eeb4a1587f8cb94f34c16a2a05d4716db18d0035006391001acf18c039deb121c5e5920597dc5a9c5fdbae05ae1a5a0cf30410d3749986a034e7275d678c01ad89dc78d140645563bcc3bf99e9302645796ea4a0ddcc5e118e685d954a8c3a62edd24291522da6852b7073ef0c0a8334c1c150dc833d6d9ea558613481189bbdd1ac8c9f35d8502e1bedefc1baf68802a8834666339dc7dbff7cad7400a48e5ac6e27340e8681026aa5f97bf958c24c5fb1933783cf8e5bc870d44a2b37a040a896527848f947901b27502f5bed89942398d9c5a5487a0aa5da14c2c29f3979dde4452e689bd44041d7fc41cc38e9bc093a61797dc2c6aff1bbc888b5dfdec67f938f54cb5b3447d4a20c89de37da85f31411cd7316c462d38731e91dd50f34ffa19196756542be067e15e0efb9218bf725df705a0b21792d6ac63beeeadf8d6cd5a09f294bd88ca302cbddf87999a0c9f41cf21a06c1dff9aa22e1277c22d58e92a90428720c812911a5c314f4afb0952ddc4928a6e96770a02fe1af64b2c73230c22135f55633c821823d5ccdefa081c9d479bc34a59ef063aa017251d1133b05ce6fe773c168542e4278978ab94948bb0ef7886d6ed1a76a310e498bac21c21683fc1ca4c6929354988b7bfeb0a237125773b96763be19b6e3841b56d031fd24e26b3eaeccf244cb05711f4eba9be3574f08356f0353b39e6e58ca22adb04037171a2ddc8397e7f7d86f5ef309ab10382f60564f162e393ee33af5d14a9dc65f2e66511ec057fdd0985c013647eb42f9d13890276e2def63ca810e24dd5742807cbfe53ce306ab07abf6037d017049e9ab805a85b9c031b306c5d3b5e6e91b9e2157ce435896f1f2edd99b826792112fe08ec4a9368488ef5fe137c5e40f6170ca9663e467eab81cdb586d3d988207d525cea305dc3b0cc2eca39fc170635c1ae80903179e438fa6fc278ac4a5680c59c70c8073dfaade5d5629ae682a9a3ede71d7a5e5505fbac768b9a2dc4a55957547164cf5345a5cefb8e0ed7fe9792d447dcdc4e29d46c8c322b6cd481d73e4ea2291128ad6d1726d4900cb95dcd12c7cc4d2474cea90d367440c345100f0c4925ec5db471d0064f436fdbd560d9cf0eadbfafa93ab6176140f485a9f6a2ca25d254ebc49100715d4d90c5cdf8b515d35377e39d4079d0b7707508ca8ac91960fe5528b1a156fcf8b5b3f394721e8cd58c98e5a55d4e58b8538606b00ac4651855bdabf338328297563ae345fe1509b8765daa90f5dd3e5be185aa901c78a73b8fd9eeda05566bb345cd386f64d3feed8cb368aa7ef61195ad6908988b1006eb0bedaa9ad4ec69a1081f60cf57a0abd26322c9ff9966f9d7b3beecedc3841150a93047ab231d71c3fbfaed37348956816578efda9eb3d02019622357a588d275086649960868f10c9494c375f5c73e51442cf08ca32056c3ab1ed858f117b35ba047d00369b6dab60d16430f0a1d2b7f341b2405acbc9654fa2e375f7af19f0b8ae0078026775b5fb0875a5d8201c3c146d30101059f95b2a7c6cda23c0edd2e9a238d4700062ce34e63d176b79aaa6ae28a06926277f3346b4e188a99e860d0868766b5772bda64dca449484ab01014cf697acdbfff310dd072be6c5c85109e661a6e084b20ec57b908b1122a6e011160f77569595cb6475c7a4d8ae2f4e86a54cca128378ac5ae6c663152eff55e35d6a942e1ca1d607e31eba2bc0421d922d7b67d82cfc07eccb05f7bbf97c4414874d547cf643d077084fc822c72a3db274e795142b0734494d9fe2a6424129e28f97739283b5ae9c48c44e7acbb8d8db2a9ae8eab6e5a6a446f72c3e02ac771dac1161810694739bfd91a1e8837fa4eed1a8777f14d788fb4c963a5302c2b1676b5a108e7e2c29b3919ff088a0cc45fc83147eb4462aef2569f838fc256f14c7feed8329712b2a6e13faa90623626aa75c27a99a0edfeef05f25ebbba6ab327af1e5f9f85313679c46832569684dd9545634f7fbbaba20e3aeb0508dc2de940a7538bc6da014f1e18bb6e66409feb453281434bbce5faef71c40fa957617527a14bb6d95b1614801be25616cf24066ef4b6ef5239e1cbaac617bf53ba93d85fac60bf451fef48d6e55ba9ac74868d298fc47d4d70ba910180f7bff1ffe717fe19d33e98c18fa945297bb2a5244aa2513f0c6610bf6c9d0f006405d15e6eefbc2bc12974741ce67eaa0a29bcfed9864259ac21309ef3bd1ec4056d4f3aca9fb5e9000b3ac902614cdb58a4567a9c7f5996f7eed102493951f37260fc51d52a5c11954a120ef5af128071b21a7213db7dcf27fe6f170d2b795d178e9ace3ac1de511690eb12e0de2cee488223350d1fd637f3f9f1048b00c5367810e5597d803cbc5ec67d4155f4c468806a5d6ea39f45e2bc6cf14ad89d9abfe703f0d2945cf0e6e3e33a2f81e64894dd1ea397dde19690a3487311c257dec6ce3564171980948e59be8475b1b3572cec976c4953b128a79955cec74fc5ee40e26aa6ea9683ff5366dfe261828e8edd36c741418dab453a3c89a64b55748d0f595a70d1bf05155e8ae3ce5e82e04227bb4f8d13b97886f8b15578973610a7247218535ddae1c2d1c1d1e42ee2f98e08f44049df67cfa83a29f7d9f211a62cc0c2ae2d67abb7612f01a45fdc0ed7b88d6372cdfec347acb327f2c7f2ebd52515c3b74c3ce16e9cce56b70f9a7bb43bdad72360f3b475e95944b82c12c92118db3e9f0705f1c5544e56f9824e6d01c8f8125b8f47091610d6232d46d834958a1e2c8827d9b0744ead603b98ff451bf12619effc4920234ed1c217d42640ecdde308b1da7827291a0e168f4564febfb147113052d39eb90f56e5ccb87158f810d408465078d06e744d1245d8ad62de051a0a0c6fa820ee5a7bdd03826d24c1fa08d8675cac9fefa6d2522ee462b390b6df3a7b68612c48ab9609bda01d8aff407de0c5cc99f3139231d2fdd4bfb35e3f2699443da42a8de1bce4ab114e15fa8325d176931fe264ee3c4b29d45bc6200092c5e0c6c0645877104dd7ebcf46ca8e3079e4dc79d850ac374dd408ba0080da48be181ce25e2c9cf44897cebc528ded1b8b5826734250a5a67fdb80719ce48ce88f696a616e34c89d8e7fb1c8f498419d84a3bfd4b29315625fe7d787c3158cef16805f0f39d286d238e8d49c22a6418566372aa20320b762a656a9a01880529c9aa8b98245af2159bfc03caf0eff323f04486e70b76e8eddff68e4bf80db7ed60261fe31199d6b019a37d08cdef22f47b195f906bab53665fbc9232a666e325b2be51e22785356fa7c4c37096c4e906a05fff9eb8061e4cf56a06eb54e5a451ab12d718dae06d7453d5d25f1d20415eb68df9754f826f21126c79dd46fc5444396cfc9b852187291a5c49fe6f631bdb3f917922eba549129eb89363856d2fc11f8e29318565ea01d2e4b345846234b00af237eaa35ec3b262655011928294f66ee15ac4ce0c4dc62406af62cee21ac92da1d8b2d3df84ff77dac3d1b9764c7ed5bc1b1e977890e8775be9d7974ca9d576f8d90f55e063b4dce79f013870634f6d128912c61aa76e016ad1c7fd936571a0dabf8fa2264726e2aefb5e3301cab9c2472fe825fa3996aa6a5b59e06e315f2be4f57baa7e2b75c8047a8f6cb39e447999876acb755305f1967e54bff0ee3140eecbe41a612092b8b0cd7f12352e379e13178a0f43a1788e319231dd1a45b613f3d297551d2fc443d451d84d42ec67a1ffaab6f74a97e8cfabe7fec5628345bd084892e11d5854273487964e2fad1935d415d834935cc5bc1a5fc8224d8cfa0c6bc07a748cb276a96133da85650abd01290ee6aff673ba5746f14dfcfe3f1884f79defa9d38017325074ba9ca48b7c09c01bb0ce953b774c1af15c317af73b5a97cb9e2ae14f51f102dc45e5dc8b88a1440f750e5414ec2f3bad571a9ee9a0df99933924a36a561c87c278cea26c11e9eaa2dc3fa5488e900cce902b78b7857b1a7ee569acc62f55dfa329761e2d0240507ab7a604423cc94a1b7e1d06da75f3b0058789c01798e6fcd15652a50bd93ffcfad564ce28a5a7765e205d238641992608ed4a5aed6980b263c5f83e7a30bdf2d8c64212924476e435bd6f586a7ef96726af021880c2de370bb8570ef7d526a4180272727d1e5cda184936f03a9930e90f6961a5759a920acace6367f404113a579e04ada3dfd1fe33a0b98ba4b174bc09d2e2c57f1cf75adaa77f44de0f09d14f95c1a61c1b93a1ed05f8a4d38d15d75d501eb95507f66d4cd1e4d29bc7948d5d6b7eb33d0cb4a764302d2d71701f9879dd458042fd2a16219518c7dd28db5f8832b702f5d94fdee73b235898acf863b4afd904c7cd4fcf3bde706dfd6b745954d3eb90e495d3db5f88b30f6c9a82f67f7aa7b599896948ce8aaa9ae8957070191e463eae58b351c09d1cf30f4465cee08907f5c9ef486b6ab0dac924abb7c59b91570bb1bb1d07a7da58d55f6762f757bdbae5017b84263b7a1b02dc716f7a0c916e217361f533bc0fd4b6a876cd0b700bd71ebee089b7ae833087841edcd456f20ebb7c9a57938f892490c0f212cbc79abce4bc9a87447e1d8ec7a9fa31ee8764a60ee5372d9ec97f77d8caf8855a7cb5b297b12493770e9324ef47d72de2480ed2dd0e1257a559f66f492df42f1f08710160821b2dec901b62e3f9a96bcf36bbd78f0d9932aa41a59608bf636aabf88e1554cb1630c4db1a0077b93dbcf1f76ec11922b43ead77adcd0e91c2f2682174ecc7dd10a65dcab14d3aea5596c66d865bd6d2e931cde212187c393911fa3d89f0fd928c608fffed3e365f356000b82882603cace21ea427136ecabf220a6a87e56219ae77540218a35a5a85ecc57d2d721ed88eee75189f023eb67a4d972c24fdde456dc8b9d5ca2d05a34864eeedca3302a26909ffb093483316ff7669fc906aba765077b64a2d429adaa6309c82611c1e840787779dd91bcec082bd514b2d30aa850f62bb01d6e8498717c35e4e4422ff9dfe525ba54cabd43ec479678b52d0320172c167bc7dc581cb4878d72cf669fe173a86b44bd0a8f926425170bb6f5558ad59e5737bc5fe9f6c934ae8b22aa9cd1ff0085c8d6eb70dd0fae47054644b53ff51f935a21e7ab1ee7302f0a0769cb044fc3b07ba50710fc3f58db212c5c212ee35519c627988deef6401e30359e930ab03274a830113bc43e11499a3b454c7cc7205d8ee218b07f305045b53104f92ec1440c0536741781123ef37813831dea557d8bfc5c174fabf356e5310c1c58977c91d9414e9101752c7c3bbca0d20da02ac52f2239c46e31f9e3cd6a0ca0df5be19b70e7b08fecd098fbc5a82601d7612ab0ee1d41722d115d3a42904ecac071305ea7b2a59567540814608c4de19b567f2be2ad69875f597211a124a72de151ddd51b6590fdf2d301a835e0064a9ad200879a8cd01bf6f628177ba7ba4ec9cf38b1b45905b3d8d506efd3aff65264063818933c148e36a0e6352894e7d8bd3508b11060b32042f682afdab26b33f8c3f7eb1604ad8ed45d59546369f86aa9c43111713be9da9da69ce8b0a541cb1985bb0e2f2fdceac7bdedf8f2e981e096293993ab60fa8fd05a63e65e66dc3db27fa4892fb5653e07fdc8863c324698ed060fcc450ec148a9dda32f739215e59f5ecabc5bde954dac453df0a31e688dd675cd37848166e315789523556d7175f579411f3511fc4e9961e8d5f3b0e530d0b9595ffc84121cc313be7e1bc98b5f6d5640419d3ab80ddb9b19a6f88f11881e1e316328f4caefdf38c45346acca74c843aa7a7470a4416ba9a38d9298b1d571707c233c4df1ae172f037e3055c95a68b2f52a0c39fd2815c30a23be8a829bb8c0b0e28c96265914f5b6f51a768468808ba667936f877845c184f798431b2d4f812a23c0f4d287a430702bbdfe049163d62d8466f9b81dbf42a3fc7d71783c8d7b65cf65595c89b19618dfa34b7d90535eaae6ba1fc46bd5663414327c9d790f8ffd282a67e3a64b0c1fa9782750d3322336ddd613038a5c37e8771d0b03106ed2787cab9cdcfb0c8cb253f359b9df973183c8193cea8fff3bc13476290d7c81e166188f694c01455f9d58fd772222ecc25431ce3260e94d110e6f6336ba3c9a0e7cbcf892781441b96eccedd2ed06c359331a1c3f23c2dada4e5a3e4486617150b23ec695d03ffb3d464095b0ee0ffd57c404e82a237b38c040c27cf29b01c99ad03421c5382ab0586861f2589268917fd6b857e0af1f1aac6f4edb75d29f49b815495fa336f5052b65e3ec8125d7b8c050f2ceab573655268595e03d0090656e8806163c9c1a0e729bece2ed296a776417be3d9652aadec484a2c462ba6408800ede47acf1eb1242e3685151a7f6606e5675877fa7724118f6f8f57f4af549dd6b43b3f43c97d6c5fa4e16c7a3fe1bc9298a8a82f439691608b982af92bf798076a8f7853da20dc23b2d7851abfc8550e28c9e0bf04b6a2e0d43b48df45ad518b063230ba68a0ca139bdfdeace0935143fb2fa18b745873f276ed587a085eb544a58effcad66dd7dcc9ca5da079dcb9dc87802ff92701a4863c1889109a8050349883fcda56d316b6c40e5ef2807bd68fba9a6ed19dd8cac1206a406c80f9d526687e09f45af5a9e5ee961fda669db705ca4cc4d87bc563d8f295b83b3d36abe4f19a5453a3d2394e9f87bfc963605c1fcfd37186fc7b80ada9aa4e18235a010b0b09e15d54932d001263bd081b2fb69a6d3a5df36da7f384ad36fd7de526872fa4f1cc4e0eb860d09b80a4afdb7b796597f9a6db34f0d30a8b37d4458b124ec6665db5781a9951565e05218082b05230008a6fd8bfe518dc2c1a0831b3c5638846fef724a9a23d51ed9b0fcb81f0e144e4c0fb6b4f3b05ef9c3de6cfa10cb53d96fae9997f668bdefaf7fb2b38266bbd4efdcd79d90154dedc3220631f36e412497cf45ac06f4f7f0371cc86e0430209f12b2bdc7c8bc49946e6329af2f807eeeb92cb978558492150362d5ce841a4737dadb16de6dcfd6d0766375616741d97cf0d3ec8b870e9ac1e425c299939640b24b547087869f351fdea4975903d26a3ce03a79118a875ac1a008c8d9bdace5ccd1293bdc8dcdaeda36add871fc8025fec8c1d923807905a1bb91e75c3f610c42fa44ba854761243a53ff4c18ed0b10db2567cfa7422368e8b8ae5f8590d52882a686fb9dedb547731c97f844b37a47589476597b332c759ee04c48d90b3bc7d36bc5bfc9ec1fe12fc31e011fb0301ad70820c148998a6fddd950b9a19cdbb40a2cfe62de2ae276d945fb51be443c6ae923c4f5140460f81f252f306bcf12485360160c17d4b174ce8a09fbc66100caaeb0dc6fe659e752c278991449aa37ea4ca45e733d67d7e91e514c53c085f5c7ac53ed278e2b9d07a2159b64dca1a438441405f45ea222f404cbe15c883902ed18fe60b2ddc7251c0a63251eb4d632dbf0e960d5c0ec7ee81fed4a7abde3c2b74fcc82bd0a40cd60f310f206f30cecb84a0347e15d90438e69801910f929c85ce0630b0ddd09df177559b4c85e93d316e575e702c57fd9b57f28603ed5c27f68e3cb2fec9c80e2d31b2495f64910798ce73dc303596d790e262f4abc7c5c5bb5e1dfa7c14039f094ab78b85087df05c0d33ee4f4691666ade446c174f90caafe8c4df8c48190ab214b458d1f297534ce91fcbbd741d8efff40e8258a4e1270d5a42976ef518535bdb5f80ec65e467f63c3ac95eaf927543ae3830a2cbb6d83f1cbbf2bde62696f49856ba965f3c554fccf7072fedd446c08596663ed6e3e4b3df5369a330d9734541008eba8ad9acdce5e84c8891a3e2ba5331330331589bbfb5c213df60bdbcb6d9d8259a7c96385a5c2bd2eb97bb74d7911959294e878146e147926a2a100fb8021714cb2f198e1e1fbf73350542e0ca8e14b6b4651ac93a4ba38a28e26c0f75762957ea38e3570577e6ae11f13cdf4cdb7266441de554f67b52bfcca0ed4df47f1635528558fc2a4ccea901a39bd50d55d41a47bd283a9b757fc5b0f08865ea7155ae11147018b3f794aa17d4e424d7ac732af0a50bb101305cdc257010fe7f49a7573b9828a8adf7cde5f5f679f2a8e5b70a09e45d784afc32403369f7c45c15e05bb099b20c44f08f9bc3b74c85edfe451c0423150c9a50ce7e3b830e8c58af6a59d9dac5955fec1612a4f99d5f3188edb739f6db68dc2d935c8144b7c431fe2ef7cfdb90de41b2bec9b719a8551a914578947fc757d55e1644447d1eec8e6f7b075c244e8481272b11418586228efba8ca35bf800f58447c41143dff9e4a4ce499d065e030a4ae4310c4b4fb9603409c1f3c124245d955263babc44e5305b1fcb9a37176041a3ea73ef1bbbee8b7ee47f55aba159c5fbdcc2b30bf45978eb0437602fd4d60e0153a3b5d9be37923164092966b8ae92adab9ab14d99bd0b7cae2fc24a08c36e759d2c5351349ca2bbf253e17f3a752597183032bb6dbb037add00de23b60055010658cf77ac015cccaaa19f32f57af0183042a317a79913fefa346a18a7f5d7f994472a24838cee1fe152ebcc9765658122b651b9de4762573d7784b2dac75d910c153cd8620ed87da7cb4e693a627426045c0abae0cd6195c96004f7e4816843e0f4bc514ecba918e3dd206c9471cd20175294a1b31cb2e459dd3311411b068f2ed3bfbaac0a08944769f33e3e6f9cb3fc226a82ed7bc8de9996db708b20372dc924cffc41f8497c1a47dc4a52580541b12c820b3b017f33955d6d7680ddfa2ed16511bc965afe2075b19bfda429c854f9332f32a92510c703197f235f6aeb00245b04234087883f4f466648f10f2ecae9960f002827bf72c7995c41e9124bc2077989c0d8666b7eef2c245a5e9598134bb443e8879b0c8bed48bbbd15815da89905bbc6c8febd3f270712024bc0ebffe58db6e81643486c30e2462da5259984175fdad7593d4e335c93af0a3b33404ed87f5e69c50ced56e4933b301a16384102fda480fa954107a922ecd99d9619049e35040bd1a618561872fa4a0bc5a39558863d7e5a817b1c42a47dbba08ccf4774cb3d3ba86a549b5b1bb70a6570659949d91d0083178ab7688e796aafb75842a7e62564978acff8909d265574d42e69f2842d5a5b2ab87bbc7a81a65d85de7ca9bed2c0b7f13941fe0bfc597786f1ad536ea5d3f1311888eb72b7142fd7ac8b3643ca562c87587019326054d811413e3600f585063cf61dc72a59c0a5916b9010ba62c5606cf1130351dc087a685b3f2272da9533e6c901cb05cac7cebf3a3879b65eaa77319c8ce0def3dbaf081a13713d75ca1ee8656a8f2c722af7865c041a7687518413aa27e709dd76f0c2f804756cb9504d9b07a338b9cf4d3e395fc523b45bbaaa46bdefb467095ccc9077ee85868f297277fb5a8817a21a1c5ca60444c362df528bfc2051c27bb4c81cb3daf835fe9ee0cb99c39b361edca83b3757ac235d125841ec188b8935fa4794634cbf24b7404f014fbadc13ae170c7e6c286e46422d6b3cd3880bea7b137cb548e0d8d3cd675caa67f0bc1a0ebe992efa2651ae6b4531dc82c3faf71c7a7f4f137e6edef340826e8fdc33216e800b0533309c2d8410efe47f8c5fb96d131456d3020f8bfedb56ae6ba79ca986f642ac324c5105d73500eceb065a32d5bdfda51c18d08b717bbe001b65f9eea89af24e188a75bafffb013f9b52095b3fdde8d7cb3827a5eb7af4bc24a1fd0a603c74a410edab8402e0086d0f8b3c128d99a67feeed0d26e9de930407763a6b75fee0ba8a0406441af13ad6801463b54f80e06122dd348255b7f7d6c44b32498002d9f0a2d5407d413fb81851ae84d068dc56543f06f21d7fa4c4da639ac3a785607cfea6d3536741fa1c2079cb8e04914414df7b463f66a40eec3b4b726fd5affe3cfd7dd1b83623af59aade4930917a9de03ee30c01e8a19af611f48ee67702da031b2acd8647c1ff7087c366ca621ed61f8a731152665af713b07146a3b1639427a4c30961c8ff6fe8b3f7f5b972fae5c0e78ca6f358688f526b3caf710ada9e5521f2f0cfacb8c59970d1a8fa595e3f4d00a3ee3cc622afd44fae06a50234e1e6cea00f42c6a31a64b06d0881adf3a5b2f7ef15a49b41de95296e34216830a400721370964e82c68c115809c20f7f86443e1f6371c85117d911ac61b4e6c18403741c0128be2ecfd56f1480aeb1d85f8c720137a4cb74bb017d176288f72497f61bc5bd6418fc928192a9f175c49bd45dc0896ce727d118cbd98f0e19347348b09128f59a4adfad12a7c6294411ab90d347f7a649123c4cb3ae421907754c5503f7acca6cd2733a225447df1db371e6300a3b70ca8b4d0fc4b0239dae7ca8f5d2e78153946ec69098f808a786c3c539ba513a5c59e0b3cfc2d9adb2c7e0a9b470713eaa7a27c759911f23fc83c5c7af8c7475ba9ac2ee07eee4832c8800c1cd52c2e04c684a031360b6cb112933fbba4a02d0224b02139156147bdcfa9ef7ea9b1e1c3801525a730ee49013c4cd4dbadbe1ff053867ece3f8c0db2fcaf3de5a3c1c6814f2964c562ffd3990d949e770b6a11d1fea3684885537511cb5ccc42cfc3f0837ea821a437bee6b12ca5226a5aad677e8b7adce3baad678f8d194fa375f37bc576f7a58f9adaff39e316a5d8be218c1cadc04a552ea0ad82f2669265b929d4f77bc6cdccaffcfcdec5bb8539758e781bb44038fe6aef6a24bf91dcfb18749b19a0add5ee24c15f05cebba2450a0b5cb488b900e3431bf2d1ee61d6049bd394777f855e6c90065a9c083c4fb0e54e7042c5a7070f59c2a5291cbceeef5573605bde2c6dec13cc5bd13f42efe5f0269c8783d88d41eb3558448b6d088899ab7118788d297470b9095ffe5bc0fcf0ea383692e398b3ba6cd7fe6149d6916099f42763d78e59f3761ca354a0f1ec792cfeba2b16e47e69f617336fec38dd848b3250d5ea0b1bd5be9b93827c268da998dfad224fc0acb4574d2780bfcc66df05e6bf47698ccf424b91feaf14925de972e6b9419b21fb97807e118140936e4d2c33d9845c1250872c6cd6da5f2424d6bb7f531f4828a984543793ebd93cf028087ad8e2afc484a7337396a34376b2fb8c8f1023f18b7010f739566c15249f30fd9c9bc00f101725b14ef2c972f90265d5a6562aca71c1857b99ea2294fff59de59fa71d9de13ca32fe49338f8db523f7898480c096530e482d31c4a046ed10242013a9240e100d9092b6874686eea4d81e8bee1570b60fc6c6ea78211919b8b614ac4ed3485fbd3c36e49eba21cbc15d96e8335e46db3be2b3ae29f74883ac0565695c7346c7986cb94e67412389793f3f12357d73923b9c8f3b59718b99029dfe785843de30a503c41a54c001382983ff72616456d47941250550b83a0b5237b5168935f2fe5ea648a638ecfdc11216c324b12e5a7f829f8eabacf594dfa5fc7abcf5a592d0abfab0afa607321ff1a400d77bf2355af5b3f13c998f5a7a0bb7122603ff97bf74c647e3b754a3ccb2b489e6b09bbed7fe84a675f4ef66d5019160d467190fc7db1cf2e16c339c9561e9d671f8bb57654caad1330b7ecbac83be7b75d2910b60c6a443eb79b1a4e199de9c72aa9ae0ee73df80ad0fe3be0844fadc695cd5a54699cfaeea2e9eac11f3cf69d04343a481f2035078c110008a85fa6313d9be64b5f7b92c87e2ab5ba7cb386cb6cdacf88e5023411f689c36b27cf69a14cabf0e62551e13882948036c1bd73f9291e75c6e6870c5a83f89898cd8852342320cfe6ec85e38d00182f80133049229783cd8322537342000a54041a3c07645f43de2aa249d0cf2638dbb6f5c9f7d59a16544e706efc42b14a1ed9aeaa3deb86f9d6cdad10a486d02c405647ce6f77a9557afa49b5843b525bb364430673c1cbc22bab55826a9d6f874629b9327686c88be757bac5f24dc174210ebf42674a9ebf151fc44e1a1a6f6f743c1a3fd3c4e75a13f40859ad7025268de3b869a50b39f6cfcf3c1bd0255c37b53f743e99f65bb884ec060c3f8625c6a1da9127d6f41575b1865b727bcf7aa9f12290f6fd35d9c180ca530079e412789879205ada9db97db766a65fdb960c2a1e4772af48b34bbadd72712fea0654be97edeb67ce8a1efd0c136a8ecf0dd8410803ddb60f9014a3f70edd2b0b7582e1e781a2d3234479f5b7862a5fe269300bb78ee16ed78defcd513db02f90f6fc43a95bdcb58c840996f489cf386ba172043145719563b4c298975339994f8172f8de7245a17c76cbd01b296c91337944551e7192f21b6db1a5db934e5545aea4296b88561d6300654744bb91e837316d503fe98ba395fdf3321be279e28f07c397f0639c2508eff2d4f6341812991950b677112619eb23cf1708cc66e35abcfe924e1b9f623d0764c6ca73cb5a4c44f7187a8fa21d65ebfa92a8997939da992d6688124de78d8069dd9d7edf4dae20d8d17d86df37ca8e1eb15996612b4ddb28c8c345132a657efad2f54083808a66180e8472b36be6953c5694906149bd8e123a0d75994057aa2f3018ed02ae1056728c07348b419e11e974a39671aa06e395661d1c3a5bb57759d36793129c35a16abce451e57de059fcac0d5feacb678de41419a657ebcd6061e60e89175617c5dd70dea3bba011832dd5de35872bc108e99ff84f69b1f707e8fd41d7004fed475595e47bb9252dbd7c14115ca9580adcc8c510dae0c07d41f9a70a02f5b9befe4823203bca078f2f64fbce1e66059cac2bd034b6c65637d56b0012e806b857116bdc755689c0301b5e7d76bd0819c89b20019ab700ec78e778f2389f6dc9de115fe482424f41189695c5d3e4a1d6b36e52ebe99d7a6175a5367d05a16d9f112bbd3bd2c942ca9733bd3b88caf62efbb130a7eee320b96acf10f762ac45830d5829eeb6487b6bbe59666b9157cc94de1f9da7efe87e5272ac987d3a62342d496ef215b2c25b4a0a004e2698b03265224e64d325c266b16bd938b79e2cc02400f0598076ca5fd17ea0c33f655bab3df5c4811c761a808e7c19a47e2990861bac318c192451fcb2d9308f572662c2d26a6a7345a257596343ca182b18920ed49c11f1980bbf427ea2c8825a61ea3c8a2fe099f97df2084a0b9a7c2211b3f2a7c3660f63e04cb634cd4a7a568b4f5bf7c4324e4268ad5452e2c93f8384717002a19b015cbd1956b21f8a12c305287f5eb457edf2b38e0c9cb5c2b68314d85048613a554303c1687ab458b7d58f4a11a26ffa3504e1f8b51d86195d170c34b1f0a034486146240ff0de626e6c31f405cf5430f71b27648d4c7670d31cc78fcdceb19b34779e2e11a7652f733e677983aa0babcddd789cefaec3c9e333c88659fc30f4905f450285cb7b1a7280608c33bac5da99cbb44b073240d6ce486ce111e831fa630c0cbb362b1500004c63705b450a077dbcd2622602c66d1235cad97541ba8b04c2e42eeb4b510fa80fb1fec417173e2f509bd0dc903504f07f982e9ced1364061e2135ac28afe19d19348f7bbe112ead9dab80b4bc5005b63db9f41951bd2cee8c9f95eba87702fcc82ef153cacc69376b65d643394f227512aa60ac3d8a4ce1c8cba7270c12639a8924a58474bb099823e361839f3a16942405b6abebf7aeb17690f96d6e10475eff6316c44b6641ff6eea02ffe7377aa436269f3c9218eee70192a8ac7e24c7688ffcf1f39388e6131cac1b9d36ae76899efb479dc027544172541ace32cedf6418bbe101c9f416415760209e3a51da4c9640f64bcbcfa9e36bc50784faf60708ed19133d62f68c18bae136c30daa5e8ec78ad77f5dd70997762d7913eef7e62ae840ecf40a8a991204ba84f617fc4e3c7b0f01d4327d9b83baf944f9f2ebc0bdf26da7467e2ce72dd567e552d86b414616689ab60d9a204a903b139ef832788bfe30b3829d0762ad08dfcb17e76bcb40e96863a2b4b8749bf7b82e65baeab56eeade947894cd34ee014e6fa91e4eca70854e3c48a83f40b89910b030d5723d398ff776624e8834a975fa0b5ca7041dc8583dfa0d69ead734ac5ac6c524bdc182ae97040ac7363835ee10aaa1d9d3973c1261c0b50f019221374014ef7fb85381833a4c5b98040248f29d99887cf99002b5171d33d7011d8387cda46bfbf580c0601834116b21a177f42c7a0d36f43c7236c81573a989398bb9012a9753c9b19d570a9f396a15ff8c595f2647862186bc1243c8d4944c1e8a89f42535be3306ff08361e11c3d8b52f3a911baca249f64eda1106de77735f2e3482cf903234b1d8d00963ece176776b8ae3159b08d8278b27396363cf87bfe6501d19ba6e03bf3f291ae43dd8406044f348825addc808222d19bd3f436d74da58868840de94a361544bbc939310a8e844b9c72634006bfade2d82e341b1c8b04e60ece900e3af4df2d01cb4c875502270b6963340879ed1349794f0f8c43be416a7fdcc06567713f44e53102150f809971ceaf6499f5e42086cde693e2dce05f5d6460139b3ba00bef8fbe82f3fe6bd748fdf04f1551b31962ce29edd7f8d00ae2d78ad3b5484d14651e3785188276b6a12f3db7016c701f9f2cd317028142039f9d923dc4474d23247b31e319a6b7e60c928a7f43aeaeb5f233d506cb54e13e7aab461846ee8436ec3c03ba78b1a9c0aaf224a5fde140c4a8b5f63dfd87a92ef18642b7cbd2cbd3eb6208fa9b8cbc9aefa212f621b7b678237338fce97f6f6eb14c0c716e34de54808573e805d1d4ad456c4891900a9de2d9f39f89813f1543cab6efccd5c96da2dc9468b5d115d96b8d79a84b9a9a6c47a5b4cfc841d84c4eb4622d8ccad9933fc3f27284bf0bb224ec74399373f3e6172ccce49e4e45997623b0b5078657161794cafb2be26c2e3c655c30402925b37d547a03b281a6031fe5cd407b47bb4d0ae6d17bd83ccfe57c4b6a9d8040f76c69b3760a84cbd229f94e1f7b233827473e6872972e458a749e97e338a1f7c48e1747810f2813486dce37c64dec33be408d1072ccae682af3ae906dbe6febfd46e436ec193e4651c5862d1e768f20012b4e6d3016b7211a1b87b34872606ccc5b9e39aa62fa353e0ec3dbd2829ee67fcd432001a32c2534a198bc7858858f2692cc58f0634472edf7a61b0897de7e84bb5e29b07153f8d9adf0d67d227ba37989ca81b5c0c452545cf4c1fd08684f8520757a8353855cd8c2b62c481f7f9b41a1b7da1d96a3e06454a50a78a62b63934697f6a11022737f6fe7d939055baf3cf3fbbc8ceb9b6097a5f529e09bf34cd6c984cc63f21160a9dd17d825932637ce28a3b2796256ce2f7012cb0497deced016411de02a0668ab3d3c7784bccbc5baf1b54f615d042f5fbb210288d06ba8f64b5cd3178165f3112ca533377214b1aa8ab5a6d8410edfb6a1fa018e01265f29d7f75a45aa4628715404c668270952666cc0f2083c039faa08ebade6eb7e93db9f53f5583f150fb1190bef263ee8eeaa99cb062ea8c113a49a049335fb3c643b9b495de82f6a8c250d04b8f07b0cad259184897d22a455d5471d03eba4c77ad47bd5bf9c8129663a803bc537d9441612a4764109cbd10e393cf37eac97b88bab625832e4f14a1beb4deca329dc2b091c18e8853ae484beaafa579122e9ea28b61a5348659c1db0fdacca0b7ac26a8a4a212e1fdad912ad558c480ed97846f37f5c350f6cd4f28cdc217b871430e6cc0b99e3557e9530a2996c3bd6874f950481e8b9f039accea97715dad966ed469092e132d4cb4769a8a0c2a0ec2685f7a05ae3abb842ed1cd35afbc02a316d3cef80492a7954abd184a424aa84dbd891c27599d7d82914509fb1160a66e9b97c763a5cf6d3c75365b1b3e0537ef1bcff0a6b4588923dcee80268bf02077fd25d4f8f86fbea1e66b76b9130a9bd8e31f21879c9fc67c481cef6ed881f364965c40689d1452d448cbb48951401aca5b452222f8f26af9bd1248033332d2409673e5acb6e3e67bba1e23e656959a9d3e733737f50d97c514cd5c79479c49cf7ef2e1cd641d95de671c9d4785f6e29d26abc809ba3d6108fbcc5379f85095edc19e26e6daece4c660e7138e42b11c4280d53fe356e699593650708d62d059c3c22e84414840234a956889f29130f9a2305b704530eb8b83c6f36cb84fd521c07781e3c740efd2ef128f8dffbd7777611343cd65f067b03c30e62326cd589f29dd2dda225f2b89ebcedbc2257fd6107f4e856f3ee23451e71b2bd30a21ecc70bea58ca22b554a7fbc1b5947b2c98501e1b5bff31fb426f981a4fdfc11f65e5fcaf5011405d5ffc0003afc517ad2a036a1574613e68152a2617b36667f9b5921252a6f475f940da714e99b224123d32460debad10f717d3fd20afbc525965c471932edd6f448056fe5fb6a1052aef654b9bd5f6d2a3a8d6d3506357908f2ab88e54b883b85d1b0018be3a91507f0e4ebf8588b4f18a40245ceb21247041e5c033ae478ba46f386537daa17be2ea80e8dd000a31e7fc62a0c50f768007c7ff7c26d3510704dd698ca5f2edcc668d8ac8e833d12eb53583ee6e3e794098a30991e55cd8e23176f42c6a1c0a8eae8c398879540db9e66baee4163dcb3546c07d1f3df0695c8ad18e36661d2a44c2f520a4cd5547bdad0e088b83231d4f552bb44ef23000afa87df65c6854ca609f4821203f2d8ffaf563cc01dcda101006701079fce5b2c718bfc1a527ebf2104819719a5f19b120e598d14641d2bb14c0bd7f334fbe54e707dee4860aaec2ab83136332e42eb9c07b1eace8e8025d733d32fecf908fd186a9ce23e5dc28a2aae71771b2892d91a2e20fe8335e71d01bb546e2f8596536d8956c18b469ca59abf84a89ef64926db77835e4fc057a26f78a331928366351f84a5f59e524d5969f705e06fa30fbc6d943c5fc48e18870be69512063fb29010795cee14e298d563bf666804cea380edf9e081a68f105398d4e777601bf65aa308947ce00baea14dfac250134a3d4e21355aa2ad530734300fc7f4dfe97e09e89a6fd6e6926ca8669bee53afbf3942ab00d4e89639fbd0c447e166df5f1a3480cf6d8a6729d13deaa30f4ef18e454d251e4fa1cf655d10182f1ebfbc25fa4fb75030ff69008e7277e638e9df37b84324a65d1cfd11bbc64f67152c54163a500c7fd34079ef5b434cb8e8e33bd98dfe46e22d848ac0202328548f8b62c5b5dbb06a784628150812f49bd61f7b875cf175a7e902ff2fea45d280d55990bfeb1002b6358b7c351ac53ff95de671a4e6b6c7165ddd1876b3580d887f1c7faeec358eb8e5ce628a59ab8e54e2d208e69df6747d69559f802c15b078b652247fa19e6e7bf7b72259afe315d2b6d148ad16594ef66bd3e0b71187e9fe14b9c3fe1309e29f8aeb9f97a312d3e9b4cf8842d2379ffaa9c02b40a70c17ecd21a41ad1507ade7aced7aa819ca7f3e1fc6cdcd003f20c81739314718039b15c180caddc63b9e9468ffe26a5a2de01e73b23657892a709c3c37fb34989636b94fc9e5e0a983bca8a97d49250abf20ed05a9fb1a6d630d5cd8695c9cbc820c29418f8f003f5c6038275653ecb629bb02a6403868e4bbf79e1f257be5af94c5d2c3df7b7e1f1e64e615143cb79407f9659cf033f502bd7f1e672e67d13b88a6650b162d6b551f98debaa22451206f8d7a725bf1b49ddccfb1ac75d3c13a995c6829047dfc62e2062ad05153bcd3e2a6d65cb4546f1cdc5cef263344f776d21dd65a892f9f29f059162eb3e0c19cb5ab9c2351df6b49523286da457b632a973267ddd81b85791ca7969c93faf7abe9f42f3918076fae498de15eee8660ba39631ef2d8eafb91447e7aab402a3d16798f229c96fc07a4ef243f8ed4cf8ccb0421104ecc88f353ca521e3fd720e0e0dcf0df51822dad6a271e34654879604d3d8a7c69e25974e274a6e7459cc32e7aecab8a5881130c6a454faec9373d57536ea20b08d8c12c2a8a78dbbdbd98b0476bf9891d653efb6a48274de66d971094fa8541bc3170f63df4266337ad9b1e286f051a400eae52b492263742809afdbf0a1315b72c98e4abcad85e7fa7a73e2467c353bcddfa6af53b29ff5ab483cb9d7e1bf144aaa89cabe22182f91136026e82f6ebea9d2dd8a80f7bc18e65f0c3ce6a47b4a998625c5356e99ecaad2682a6c7631e553a39e762584f51d4ae0741d13dd2f36d86b4531e92ea261296a8b3ea929d981007c6f1e32c55fbd24608de6b8d7fc483757d14d162e55c3a01c9f6d4b6bccbe04c905df8f89e37c279ad4dc1ce80f5d7ecf513c462f2323fc0a295d790978b6b9cc900d4c8a39c6b5142b3d4350a0b33662e4c118a7e1b1179c136867cffa18afd5dcbfcb8c0cc6de23cca32bb95e5ab47e1b443191f232a647508b885d5299b695861b5b04d7b9e7db146dfc4d2ec05f6dffef4dea368c953cadd23a80120fa21e9b4b07ef8095c5da75461bb7acc2c6e6b809fd68a7962513a2e4462a7b68118744fb628e0f78f50b391bf4f133aba4e23c81e23b80d0ccb5583be1831638a7b289b3b3c70af18e80df6edefacb0437cb3a2b47b6b547afc2c2eca1c4d5e6a0fe7911e05543e6f37c510c61da3c18aef2820d1a94d9b75f3dea68197d468b1e9e866a222f8a019dca5aa7e672db81293638e143170ec6b71982a964841fbc558d7e59b62d7d12b664375a30d97142b64128c4cb338532cdb68772b226f3968c2b76182840febac234f1f2a7c0d57ca2da7d3c1ca79d3612eda0acb22d3f8046c00f53d7be6f416ec9dedbb750e1f1d2cb1454f7d206edc395656d19653680b298c0f713bbce460fd193e1e18fee7629d4552e26376aa1c84e03b753617d2efd19d721524e6918157eed0bd2acbc3a0ed36e360bdd25ae101a5a323db031ef04d8a8d18ebf4dcb64a7db8dca5de42e5e48d71635525cbdcc73f8331c2772d536855e1a5a289093ea373a052dc8b781de71405b9b6256098dfdb2d9b636c5a6eb0d39ccee701c60564d5d3f427f245a7d4f097d4c923db8959159fd90e51a8340aebb915d36db37cb1370b15bcc0f75aa744ae9c5dba6abca72519cae29b3603af9cbd9705377fbaaeec41f29a542a4dc034eb80dd7c1956f7d44da48d94b4d7d342ef602016fd246f43e2497d02b7d03626a25183390a4e3d1bc6700c77df2603af645c03bd4941df052491382ef399908745e92acd1b4a2830e2193d7a34a3c4ebe4491b65d7cd920bfe2950310dab0b4ab578fcbead982ce11a4809e4adcf529f879dcf809a4b9f0dcb990f6b4fab7d3053cacd7eafb110f90d49b94c40a1b072972b88927dfc01923543813a451453e4b8085f3cad873ebd725e29ba26b0b127a2e1debe3385bd5f3c49aff1b989c2c4a5fdd2f2b55ceb973b51b4a2858114f79e6fe40d9adc8294759f25aa94c1951d12e947a6ea733369d48cacf44f7bab2d33728a84223a4a0de3d56f560d9cb0a5c995f46d49078d93ad06d40027c19d31f217deeb8fcc5bdbe4fbe10e003add4d0ef2482ddafe8cefa2f21ae51c3cda4a2eedebd5510683008fd4e0bf4f2e41f26577c9124c2bffc9ad1f5e8168b3fec5ffd82cf4ccd9a009494e873a4d4abe4f973762e3932a212d64af8a9ab2cbc94308dd2276a0bb8ca46815a33c9d9bf2aa3f7886b3082ce03a92690b65846a9cd920910ea59909a44f86489252878af48ba59e1001faa16d048e03ec2e81f8f499a7839b2953ddee59f27abc583701cc934f37b47d60d6ec5b9b785b4e3121ae087f8067af7d90bdc0410a3188b931ec3a8fa66e095966cc3230a2f0b087c66bcb33b0b7615fb46e5a6d6559fbe2aeb815ea004b5acbaf44c9f60f242795ff12b76975986d2ea875a4752dd0266ae2a1e289b2306c595a0eb0dd14fe10888b6eb7753c9bb7eae0c9da96d455680cc03be0ea7587c63dbad9aacc050f736745c52c0c5fc1fd0bf6f7504cb409811938f94c90ce856e3a2025eeffc890903e3dae8e07e8c2eaf87cb1f4221a351540058bdb6ab99fcfea68744cfc30d233652cae603c3095929d41a74c8ba6467a596a947618a44f79f1700be151a082c78692399c7dc9a6093dfd386feaee3ff70175af33273027fd30315e182825ae9325c55c58df1174772f4ba27430dc4ad9711668293ad061909a6e80fbd41890c27c19f20b1e174034449ee07c13af493a6b0aeeeed01b7e6db3c98eca17fee0dede05bc56e131e057928afbb6342f135d7c7cf9cff4497b17c1ad88c4d62bc7df868ac7c495495e9741c3f86219f92dcf4c48c6ecd4ac6c5f6896e9a394cc209cda9895f46366c1e3fa35fd1b81a9f0a3c9db6cf728572838a49b30939969d56e56097d3f7fbc9ee3f3ee6b656c4b84598fa12b724ed83d0e778b1d9a547760015fb7f76ab89e2a8e20ed6be1f1f6fcec2a3910bb580a78b51a0e5c20af42b037077c11bdfff62e0b3a2af5ce16bd9271152de0d9fdc37b0353c504f29d60e5cdd917ca19062c5f1a8722a423218133a9a9745b2b415f5e69ba1478d3fa3c48ca6cf0c9ed844992e0e71e031f6dd54000d9c9c345b89efff6b2d479e2dd2fbda4291876e6f93c430427abf68a773adf17055fc34e97d7ee9174232fea2329234de65b98dd3c638fb3f5403437069d34848b6e1797644e2b2778986ed2f8f28e131d80f565cb5635192dd6e52bae9805b59ee90736fdd24273948acbb9e9d2ee8a4b3382ba639cbed4d6065442da1692b6137b38b23a57aa61ddf056c559aa43e408adca1ad0cfeaa79e37c165ba21530e2267a1353347af265164ba85c37817f7920ff99a2e5f39dba267ca1f285393a7831a1a0e5217ed0d9f19e6383306cebf672442faeac0a995accf8d73a13a191706308b93d93ff951bbc7cd5d14a2beffa8c545c90b78192e1898a527b4a806b87d54d45b4e649aa959ed4ff88e9745fac0262750ec90adc93dd352452308888c1fee7e5e3be50ff1d0bb2944b99848325bf6cfaea031a9f47234395f976256053b4ca9d93c55022863c515ba5f708407d0a5a2c4d41d1e4499a89635a1bb1af98cf75e50f7700824dac27a19ee7c43394a6a440aab1611f5a08a0a3e9994821050af1c1c3168a2c55a801340e2297fedbebef9b4a443904d45566e1026949ce423455f621be02a5e9977b2f4a138244f365161a8275d04e59beb373af7d9421358d80fe489fbf76100c4706a1943ceed2e348bf8822d7141381a80cc44827cc9bc196ec32ca0b62330c1343b8daec0f42abec3be25db63a03c6f831c55dcdd740806348b41e2930b8b6d66002568fa25f5dffb6eb493101ff67e2a1e3c079365543492d9916fc8cffd9c3505e63384574046d4dcf923e88b2f663d9fb52d46e09865c6328b1aee220d0e641d3bd930fa5f67cf07551ca8ca082d0d14cf163d3e1fb3c86d35db20c5342fc227351f2f0f84011de1fc7389afc0304129ee3c0dda38c8cc23a4ce10c62bf0f28efce362b3e4888cc92b0145ed9d2edf8af35233c3124eb77181d347c72f62201bb18b8e0377d70ec0099535bcb63a61210e92eab4311af01454651eb396b23bc84bd66d9c695346f6996f4bd7fe9f26e92002613041952508ffe3583496f1f4824e414f401c397e71ed921889c80f1b0ccdba762d0d88b9ca76e044ca8a42f7c072668de48dbc676b843fd7c472e1edc46aa1f5f73c51f1c5ad919af29e66c4704e33b8f0b3d7ce90367a8339eb7d989d2047bf5f3868356a63ae84694f64e5d22458eb7bec5056694795154ad672a9b31765d0752b459c6e0c2bc47ae586256fb4663a77f5b5bffedfb8a1b4026762ba8e49e7828383b49855db757c025d7af8a853fa83769d591e405005998e0009cdb41855b9a7a4589f351c0c8644cca526c1d26ac444a5bb1cadaf0c87d332448af15cc81f791b7e93c425302565a40144c8c7b25e3c2a28f6aefbe5ccb165252ee9db23f10b3e330d0365022b8e8e464ccec1969b6f89b33e95b1cfaa1ded2272558112b72d2e5a86e8a4f39d8c19e1b7d5904b3b44f60edaa1c8fda5724bf3e02203a5ced2cb7faf6302c3543af0faa24f72ef513880e99eac1eb9919f50f7dd58b25fc507a518d7e14db7d1b2450e47f130804f554c2cb311e608041ce970976f893837c367c5d41424ed0a4ce824eae53e9499e7dd61d54f4a6bba73bd4ff6799e8b005c8a40d27789fe497b22a794a553aafe6c0ea40ef1832a2a3e223bedaff24ddd1be6fbcb2aba04e8e8fa53f7db6538a51a6c763fa15814c622f968b398b740874c1f0764e029f250259f4b3cac1a3c9ea7c17795ae2c5c316c2f31975712ca97cd34fce06260f082899368995a73a26441c3265d047d0541bcea66f5d6c7d3501c937265ba1e2a77d738331d759868f8c79ad2d82a6701a41499280d4099e409bfa441e39da98d9b4b6498c0f8c4633920659e1e8b460b5645b52d675ab1a85cf7bb50ecc1a4da8f1d735db872d358068d044b6399d5f4aab1650370056affb412b6f1d7fbb2a9e1399efdeb6a69a41b6a84d307a37e5d8cd4dd3c103b1b02f422e40e76a3aaf3d0b3caae6b7b70c72f25f1717dc0b91b551f4a8f5c18ed66e4178cd75e1f9fcd15e4326f6c82b8d99f9f88cc7fc08849b0007e788c5c9f2dbe0d06b77092c9ac9bc778e1374f360f50498459031c98449c29ee7cb2c7cdb9a55f9b1a5f776ca3d4794d9505b171175963bda2e6ba00bde442dba789f793fec09a3de7fda53a639bd69f76975ee615a93a735d3702a6d0ec2dd79422ece865dd75a3801c77836629cd827b86a2b3e214a02214c951657d6137f0a99e7ad531ba812d753ec8418855c697ada85f3ca7f36d28876ce4350f6f04b05281c9df08f65af3cfd6d52368d1319dd2151a690c44a0ed454eb6a1e3e8c762e2b61394324bf0b46077b2bcaf75bb8bdaf154b8c682b66a8d53d6d5623a0ba4a7e9df23bba9df3cb2fc134560059e0f3ad6c3a4cdbb2f2698e1c88c56f797a6313b2981764fc91220b5c0e930d76e5e9841963e71b62ff63723c3f1dbc9cc2c8093ff2b162920f7f2a72e496f5441b0c05692cd9ae91d4220f572fc9f98a1071ce16de4e16d0f359a394dfc487dfb843b7d0efc67e21c8edb7808cb158b4961aee7d2f321e741d9a55fd31934d72644bca32d5d5bec705e3aacb767eab39703d00b09502c9dc54502f7d15e47cca84f1a147ea093a123bf76caeb467d4b8f2e3824509681f7d65cd14dace977aeddbc6608b6d334c1a73e0a92fdaa97e7a68b3cd554ea50696d5acbd1c16d64396715a20d6df31da14763350bc0a8f389fff2866efca39e3f2f3b45b5915c22185e6fadde19fcda2ec5cfb14687e03aa160ae77b3dc1f8434d20e29456948a48004edaecdbffb4f84a029223d2373716dff5e080fdba4ab5ae4ec9ae6433b9ed270153c3a51745e6da0b30d05357511097a5dec3e21f789c2a8dfdaf200b321a8417f69b8bbeccf82a7e855878edf15fcf88f4e8615f95e949730c2705fb3a37917e15cdc04767f726afc437d621bbe87525dafc8ea71f4403d6ac75168461e566286a1ead78ad26fc037321c1be256b8c8955240feaa8ff38064ad23d9ad63db2bc57bcea3d253cef129062a57ad8a549e38ee0a38da2284e14ac4ba5f076951fbfccd9220f7bf24e7eba5a255c6512638cfa1e6e471a1fd428d2b8e59273ef70b2089b9473c25d25cddbbabf272d4f60b35bf1da5724cfbd716e6f7d0d0624c00533e007c9ae7801e9086678376aa1653bd538491dadff70d17c9ddeb2250e49b36aa0cdafac8a7202b7751bc1e329851ec27b701e76372eabd241380e567662ac788e0b3198f5d9c0a6ffdff95ac5f4b3e19c9ac5ed8801618ec928009a2be77e38e7286da931e88faf8798692e4324b5a015b66d9bf661706fc187678e94cea82c41e80c00caebe0f118aaa168d78188cdc10fcf9ce2af9575fdde709bd437da98fb4924944d03ee6f41785305e6922ed2e14c37d9cc84fff2936d1657868d77937275d842eb87e99b63162f1230b4bf758b3268dc3dbab1ad424415bc1b4dd829fe9e709ba279f49c79dcd5c239deb7e782fa566ad3ecea32af0bf86defe464db3e5cc3c5cfd8c40ed748b9d4bbdc03937df079d35d0dbcdf51b6a32efa57dc25542959343ca26f1071982233299086d9dd357ad4fadd63cdf7e01ae7c2a967c79b8e36b7a9226650839240a8e44df4d9a243a7a16ffa98ded5dc53b48e884b27259f8042fc36e5b9ef07f5cab19c15dfa4cc65f238777951b34f5170015210c59c8e2de65d9461ed7bfe3bcfa7f7fbe1734af62e50b6bb18e259ae2f4f6f002e0bfd8b7faf0ede440603700479ece940a449cdd055b351a552aaba7b2f52249c36c4225bcd140b7b191150a9fc5f99bdde42e5e6b0770209fb3d8d3994fe12ae04bf404b35008efa2be94057ce9b309b6acb683c699173ee597d43ab6e33508798e26bb9b41e4556ea3e0ac6e83dc486b3666dd99902394f1e103128665357f0fb89cdf38be8cbeea0eda96362e58b2ab54b34609ccc783bbefeeb0b577506a99e57a7ddd7f11c00fd14e64b8a308a1ee57f8be1d6161fec2390154e642a600f39799a9259809d91ba3fb872c0578ec38e2b8b90aa494d747990b279c46b708d193eb52bfca004ed3a79205835339474360edae91a94b1a842b57dc93168425c216c0e95215dd0dc659d6117901e6897df0cc5b6edb46faa0ea701b68d386122223f5a5370fc7c4df697fbd5b1099f7b885f5470c2878fc1b779c82e60f5603126868aa3a9481508a584f74a4e7f1f4d7623f5d6a6002cc2ab39b7210bd927b94d34370bc3adfb267fe00a97764b8f2e5c380bc97ed32f981fd1986bcfa0af9620b1f8e6444f7bff01bbb56f1b21b8b8038beba2af19b5e2c08175f30fdc4a47555990c72b13ed83bbf0593e262968d60b8b04fd1483ba4bf1526abdbfab260db0ec6af3ec444a73637260a0050fd951620b938485ef71d9da4b314c787b46b2a50bd575cd802ff2bb553a9fb319b7ce586bff2880955a491bb5326792e4c4d169a6bcdc50177a9b99792ef539c0027864ae86a53ac261cd1bb643ca12867aa4898f85ed8be9e8016b10e3b8fbae714c6b0c32104fe34fb69cf6f70a324c2f3d86ced357f3f8318a7907be3497cb0a1ad2aad422d88447a660c6d4b8fab55787058669b61d862ea31e23ad11f3e6ea18c03d6421d5c93737fccc7dff1b79ca2daea2897593e49578f66f66c7dd49ee0b77d664ff2d1e96ede41ac8c93cb68c9f183a2a4d835cafc5899b4a93958ff3502176121d4f5d361c66bf4a97b16f4979504f577a2cc1e369ffe0830aa966b3f75f094106f2dcd7a63ddebe56a5b854a3b0ca0b7970af02d27035258f58eb1d25024368f13f910a3ce1d63139cc373f6f795e0c13f9d36c87a17cebe6e18e8e77334682823fb3fa715ac051289a5f141a57c9e711b246110ae920376f2d23f1f149e6faca2e00ef3bb0f478c34bf51e7d5e3b9c0a051183018874cffa39fa17907769c2682d659381a2b893c8208d7fdb8896f44031f81de6c150f64cbb35c311d345c5973e4c162e3a5cb0baafe4f05d078da9b727ddb8b3dec2e3bca5847bde7d1677dfb75e221e4029d27846edde9e5bc0f637628c7aeb07497c98fd5a168f904109cbd99d3cc034f9cbcd23e63f0828f8e21077cd464bc047482780fc1a495d273e53a5e8a79e76fab4615734998e002ebaa34f20a06f6ce4e3ef31014e00a11c5a5a06ca3e79deff680043f81b14127c8a0b42993e98fc85bc34bde205693c7461e1275d370c0befc780deda61c6917730eaf27c9fc4e7e055f565ef39de63c40529df2d4156058f95037aba00e893129feeddb56c1aa3f1e8c040e83aebcd4c2358a1e1649e2266bc3ae3dd4534338036bbbe8acbdc938961b2caf172174ce23da88ad420e54dfc37f55ad2fa0bdc8ad9c04447cfa5571f0323f73d7ac5c517392b7f97aaab404e6edfb31cc4676cbcd477264480e99998f592029680cea96ca56dcd781b7b5f0077ed4909b3f041d196a955fe202d371735f39692e4486fec351f179afe7faa223d7a808c3cb404478dbb99d1167e6ccff5ffe139b5f157721d52559ccb315fd0142e7fc4de3f7b6f3b39ac8da748df0ff5cdf5e563f43082223dad804be2e9dae91157e43990923cc2c87f0d51429e2322c80d8f481d4f8997d4ab3f1b12bd284269a9cc40ec9cadd293dcce78c69cb49f929456b36082102578882f53fc1424c373b60db2aa712cb346ea1b4e6953385fef3e4e563432b772b404c0eeab748f14e4317280b811e9c782caa79f77243c2930fabbba6dc73c87935f3b2b51da260ca3b0cdbcd9bf90a82ce88ef215dae04da607b59aa1a35286e1ccbe534e6e4e3460a74e78ac3cbea0a89de4af305e7d5069141ad7f682dbb5d311ef8d037ad37eeaaae9ab9ff825e21ea42df28e707a18d2c77f10e3249d0f0ab9fd250227da2c046c17bc202416f435a6bf8c66b2a458a9f26418b2f42d0018943c2ca7945852af91a97b0d4b571c2ba49e98fffcc6e3c782ba51769723ecaaf8909e585c45671bda6c3fc60eaf033cc1eaf56422a3c57b647e2e47158e4620ddd50abb986c63d2b1b2bd17b9d3e3877ac5e92b133959a05162043692189aa1ea304ce9a0378ca96762ffc02d494539221edabf99713c684d58affc329bd4b0a4768d6d1a69e4472f016f6b5a5548a93781daa70454298406e7ec922fd3fb646e2cf4e3bb51bbdaadc5a90d9cf41bbd8d91fecf8a45f0132fa7a4a5d643bc0bcedb85dee3de5b874742b0860e178f18a7c16e3dd941dc3c48211321ddbb0426949c308045baf7f32107773cd98f088b98437a8b0e921047bb7b95c45cdac9c46e8c1ace8ebd3a6c1e8d69c0cf7e3f5e1d8fb73e93c8820569fe087c9bd955d7bad80edf4648cd7a81b6b7cc6b263d98bc78ea5c79ee7839e5507d13f7a3f1ff3ab02b28fb6e249ff7d75497359338335054f11facb31e34012c2d9a0649b1e4dc5a960e4856263d8ca5fcccdef5eb40ffe83ab046105a7c441d7d34183340c9d0dcdd15f4452af1d490c0df5557f6a0a322040ac264c554fcac004db8d69b84dcc1caa4776bb7072d059f95599c9435c1f02535cbec2085823589aa177d1f6b51c661d7b6a5e53fc5eae762e69e83a15abfa16b54bba56a96ab532c85938aa7db274d0cf243ad2558513bb85b8f735752154f7c2d6d80389ad8b693c50c083e791c753a7e98f80b5333ec92fe112e71b7737ce0219634ca1a6fc8ca9441868ce77a0a1cc9ec7e17ca4faf3f6b0db53a14237108907cde6edc6fd023ea1166355f6c36c40096e16577b094969d1ba0519b19e387a3785d1140c8863ed723b14191aec3c07d0380b0ea2ecef8db6f16cbccc1fd314e83b36765b85332ab99e81365b98484b3c3713d9c971863829f7c291a5019664caddd1a63ae5225977b22a2ee5abc1ad70919dc28d60f86c1cae1c48a2da6cf1ecc7476a8411098f92c95405a9619463c77583c5880ae664f9ac91d7db2c71dbd9988ff4350497b8e0f840704372289f4fffb7fed9983c408ea0f3fc85b8719240174f12f5bc380949551516adbeb3b7f01e0c60083b3e09e0f93da890b0713e2dec56dcf4bf8d067ce026f2a3ba6afb24bbc61de2abf28daeeeda569d7fd337f3750937580690d380916147e25074a18be01c35b4085f581209fff285ca5e71495384a93c634575ad37ef8ccb83a27391a3cd5976e6a4a1aafa74e61d4849b2864506795cb80b88557046d9592c67d0cbad9036d7037cc2ab3ce2153ef4c57388d438dadedc7fc68098293fcc85e3b5a551219b403b4c0c930ec89da40ff2ceb5320e0965ece0b1123eb5392878082ab96bbb71cd861550c8a2f07df46c403e5bd3bbed5462f7e349d3360b9c9293e9dd98c11f23e9de54e9127022f53c6d1bd34f4d5eced986434296410526e3b3448053eb1a5201000c6907f808707b003fd7934af472d3fddeeb2fcd9f002d828ff43aa78d45391e583920a5b06caeb90e2cfbef5ad29fb92c914702ee61b2c686a248fd9fdfde114babacfa4d7ee51dad4fb2feab57b553b977ed2c3826133a549d1f8f92a419fb19b6657efe4dac8e7f03d609661cd0b1dd7703749c6611ea16ea3f1cf929741b59db6938793d577fa3aae8c219334cf7bf180ce228bec287657018cbdd6281d24d0ef2a7fa6d88db3fdd4b9ec9f12d15b81542f0e75dbcf4380294a9aea1d4e31d28522d6974b46aba71ccbb132b0dd25845c17b20b233f717ff25b6b0f5f3e9f3428122a907a4fe68d703ce1f679d04007ccc140baa2c83ad79012ccb53e7133d005bd2c72d496e64cee12461d6a4fd7c8690c77cf54fe2c12934359e0bd4f0b88e817eb5d07b05b448120eb6e82b237bcb055d6a844beb7169999712df1917e7ba18415e64c0e53d88938d10ce4014ae852de1c8c8b7ff169aafaff0f48b7842e03d66f52d9ecd142d7b4f272d2cc84e7bad2d2842ac076d7f70385b9747fb7939bbbe889aea966e8dcb45cac50d9ac3feec19343130ea4b4a26b79493d45e6d80d4cd963bfbe628cdfc05a5e95efad9fdddac5e930c8e989d47ed12cbfeeffa109b69afaec5909eb68a2f0ed3504fbbce0c046e50962d38227b32244854a59382d72928e9637133fb423715cc0d02a4e64c1722d55d4257a5ceac87b26ed6ae7de0ed1d2eb8add7e9e172ccb800b5a4b608d5ea709b2de053d95ba48cc411e7d50fd903327c8df749450a483d8ce371d96b3fc5898d921d3b425cc1bffca997d23ce4a2d4d1c48e2a8a406544da850b51982204f75a32860b66ed0b46dfed4f21e52f31f78fd6fa306b4368d6eda7cbe38fbc8f1b477db8aac7c9627cde9d7abce1c53362aaeb0a31305e7508b5a8c89305e95bd82a428f41b476368c058ec89c987d912466ec5afa91378eb58e6c2de9de2c08deef3ec26cb23239633e87364e5812f658c9571a0495e1f58882957239a1717299feb920791e0be5b4f595788a99adfd8aac9bc39551d9275a09b58253a4cd015f5a446a6fe5a9ca5ee03a4d24cfeeccbd9bf0961f09e4e86cfcc7924eec77b832e945228b4ad9061ade439f75d64eb207dbc981d2c6b5e5f73e8878414bef86a273f3eb1db9e26e06b73582c47650db1f7ed996025936b44987d4cdb7c8390fc651c19e744c461e4544690f9d7563d117c4b1a9926483bf8741ff7b6a47236825fba34ba970865015c71be7896204955ea31a108631e77f8d5075a351240e6a854ca60d36a367b1d007df81913701b80f35a670826216b60bb6c6fb5f469cd9216b579bd765337161d5be7bc458e53bc8c0bb9f1f6b4cbbd028fa1406dcae208983b199f55f6ddd63f642a9550d043ebc925eab502496a5d4e7dde0bb7971ce8894657b0a8bfb8779036c3bcfb98bfba62787ad925ee927b381b390189dcb9016122b33fcf3a4f3232c64869f23e529441bdf7cbc9a855a9059ae9b3f6d1526fe90fd31a4832525f61807280e66f0ec61315f02096b3e4946a2c6cbbedad6bd16d3d443467e3b901146cad5c38bf12ccbf34f950e9fc4f1d59e3a3279247207b3dedaf372db10c971594711b821967c2308bc98ff633e7e3f0eecc6dc91a0e8d2bc082c4fe2b6c90e5e7eb81235e6b3b91c754fd8ab4c009c5d2dc82cf43bc7d20c22d59cbdde4c122cdd9a86900438faa48cd2d82e1068deeee6143d96a64e0b3f749d18616b2bbd8ae664e72b9a0c876d121275fad8dcc771c616491ac223480820b3d0fbdbaec13e419c90f0345353d346d1041f8ca2017e2c55d5aed588cefa8461bf383d5d6372d37ace23d4a4a288d517b16988578bdf6e53f8c3cee47680d920a0e64709dad03713b8b2716c18ed93ce572a57efa8c3530ce0f8852abe9f6a91bf357f75535c786b33a3f27ec0198de690fe25e15ed3ca63b6c7b78d446831d9356deed6137e61e5f6de91680227c6a094f5b8cd69ad64121704c00ff56dfbbf2e96a2bbf811f7357c56360492e81d9aae6372227b23a1ced159a2be16ba9a410dda8c9b2e0e27081eed6c141744c9f3448ba88345287138f9fc130eea0c720b03c18b1738a2e6262425f327b05598e0c1ac7a264aa9c1722c03bad1171eaca283eed525c6967d32d6eedabef46ce2073da2fed68949030fa1c4c9dc3463cd142e50ebcdbf5878d167a74e5d3a53caed7d5ef14aca2ed1a8c3f53444242c3d41a59b1059a68e770eb6e4faa0985c2721ce0a3bbffa6ae9e4a82f340784edeea168a2c178d5ff19068a7153b67f86502dc0980fd3610a945aaf1476ddebd0d8b46ec44a135f3bfe3c35902411c69497632670748ed42662436081b198f2268f272fb9c9f13982f835603982855f331ada5fa9ccdea8197a12d73c12923a09f5187637ea9c401e843309c2310ba7fab2046076bbe822dcc334cabdf139048158fd48feb4c578002be11df6f1ad36f46ff641868ae5acd05c39b154e05c2b3cad2a48e1d1f9b08aeb14b76bb3945000f30082c599ef6463ba1407ccf454a10fb2655d97fa11e121ec6521ee34befe3d233b0b5169d6864956ce8fae383f07356a0bca52c161ffdebb0ff9cfa4cbc624bd6fe446e73b356de3687c5b461609213a45070aca7209d9a7f8ee4923aadfcd52fe111b97c541101ea271de4ecc61f326a16195de61f45a2c31ba5c6871537645a8b15b7d01a174284917fc5f2e091f23941d121fe3dc406f9603cf3206a90eb5c48fea9f682ac6433695c775dca6a424ae79e2f1a9cef423ee92be144c45827824079424919905bbb977c389a57d0ef4e387da6e3acbbb4bde2a1774c55228005fe08e539d27a95ba1917be5b9372fbb470cd836c1a454376deabbdd79b16788e073f64f683bf2cdd0264e11d8bdad1b9ad63d70e2d1db58e68f406f6a8e698fd7b4eb256a59dc1863b70c74039957a5ed38616d4d74b1e950ff32141802c91ca394ac323783c501395fa2e08db121e4953f9f3aba202a491080fd182053552b4266af73a284431f3bb8053b2b82c7b4939f37e131729cdb8e07e3fd18cf7bf0fb91bd2b3b1ef90222fb7a517b641cdf0a2b6231128846a68ec68ba2e4a024315aab692368804d278abf60acf957b825e1634441f90e72cb0b44a1ed0e0d92c0b295a3e76c0923f1ed33770f93a38f964556744e116779ce018e231045aef4e0245d438bcc420a532eed7c625c7f3140da3173012fa4a8a79ae99bcd5f86f6dd6d8e9ea909ca7b041110ae574af9940adfbeaadfd701d30a6f89655320de9021f91012f7270aa26fbb3054a7e894a33b55f1e5380c6c5e42af2c661dff7b6ea95901f76c0de1ce7079cf853cc752deafd90dae645db8144eeb89b25075949f217966f1103d12e8f449b8c880199e92385b35ddc3fb291a861f8d5f1199bbe293ccbca8afef7656c330bca9e270a800089ca89e6945de6d22fc820cce7d1f4239b7707524115866fb2592736834263d825cc1e73c5b446254f7af3b693860bc18e4f726f1bd3c88e38ea359fddf237eddc99e5874b715d95e014b57541cba89bd9302867f7814e2bfedb57275cd3a488633684a8adb2b3631347a66e6cbafdabfa45bd9a81c723d61e7f455b4eee79552d14262b255408329e1b24c2bfee899a1a4e06f06728c1897fdaf425a8367a2ccc3b079ed13d6d395d6864649c10a6ac0e695f507dda1031c408d746fee8171252cb79cd59b19e78e62d3a309e55dae03a9fd03ceea4a6b3509252b0ab03d437c602480d6f9522e5182b9e87209705154f41933b17ff8081f1912bfb3cef022aba69eeab37a83878005543e523c585b6cc09fc370fe50b2fe4810a46a79facdb5d76f657124168b774ff416a7c09524bcf324f588b4d47d72296ea5dd1bddd2f926800e1bc4170f12b5de8639678eaa02ee508aef9f9b35c198db0de6030c31b6dac73d47c5b49baca5fb8c596c83eafca94b0e0e54c676d5b4c009b4122ff2eda0fe01b1dbffad6bce063450ef6c4a20b4f61f2a8dda78bd3fc7786541f8a16b3046958d0d5121c7a0e87635b33c3698d00dce3e62f3eee1bb147800a47ec01bbe6584aad9e4fbd3c2234c1892d8a69f33c26404e080cbf43fb94db12f440ac33097f61078b10ee95395393c3d8a5908f1feb003873bbfbad6f4da3f48fea2a14e71372519d1a7c5407c7d22af185f5996e237c8d4d87b7f1563096979a71950a7d6d5cd0fec3eca8db69a5f1bbbad2bc738f66174eaad36366ce624131aa151329cd09b0dd984bcf8c7ee4426aa1769708ec34e590a390c31908cec63fbe2e2d0c3da9622c310f2026b7a13055efba58af04b1244831555e3257c94a0311c818d8dc780c1cadb4ca405e459672d2ae384611ec7b57c05e4ef7951e2ed0fe54213e16874f7349bd9aa00801548e8717cd7c7dcda6deec80f55a97c3c67ba94ccbb3df118edf19adee2b0e1a49d0abc3465f41c534e567c825a04c76f2bf986efef4adb1e4eff23622c86a9e138140997b70b41043b7092299c5c1f9749c6358917cd3498c1ad4bcf2a92ce082add91231369d58040ec97b7ee4002e9e7b178c2f952983963ac3a287e5e58e6125f735621d871ea5c05b289aaf929bb0d764fb1f154e1d406f73f75a9569bfaefee05611e56036f409062d38d5f014b878f0c16c539c8c9d17412a9e13eb4f7bcc1409bcb9e3d1a578a9151e8a083f0c571cd1e70e4e16ddd2cdd8836c0ed8c893fb368d110c5bc0b7ee92c75f1ab74f4912b2e3f81c0fe133ddb07b782ff36a693fe65ea6f0461e00667bb5d35ff7d639983c510c396c4f1d6ee5392458abc5111c69f835f6b5cc9c984024c9c1c6579f55b0d30f292642501b7aad6a149b91b3dd067eaa38c9f9daff3562e1a594163de7a6ab1d8d5fbc4030ba90222d132dd8f5b3ca76dae28cd53de3c42044f028cff4c3654dc3ca580c6b38c2c926d5131fb9a09fbadf3d9743e563afcb16e6ecd1bd73b653c32bd70c87b8f54e685c49148ead2430c2a238010722f93c8b3e044e903559a85eb5f386eb018a0f4c282e8131a1ffd187418cbef53965b8bc6b333664e6c668c43076f71caed311e6d1841b6b432929fb1f5edb94975b834fa095ce5b841d4074d2e2b817c4b332469f825c79df66a12699b555a4a1ac381125a52068ef8859abcb4eae5357d4a3edc0e388695f1b3f02df574df179d3a158373a3c080e3560e5e5f6f427a6ae9338cb64beed02f29c27383118a5f3eb5e3aca50ba5771c3a993f16f0b22983eaad53aace8509e97cf896810b38bfa291e47bbe955b25dcdda99ca098c8496bee500640004ddeed4ff07e1469623bb94aa9351329e74bc026b34431e704e6f103d49f9cd3b10e21b39e9976ff40c614bf40452a7af54506ee82bd6f59b5d0db18f20638d0009fbc1482d24238a4c49231448dc5c920787d4da44b4a05eb2a1f7bb4911d03cee7bc31a27e71aa0b9be550865be21dc34c4d81131fe787cff1ef7d24c2157792ad06727c05f75c0a791ff1fcc56ca866b75c004b578b69a37da2e0af744e75e42122f446858bfe51ee7d463cbd52fddf9a55a5693e4a109a4d76040554b7d1ecd28e4e42a8c569e0807d2041b27f99765aa01057452be6eee33751348b53fe7583e1001fbd04b7d026c39e5c5ef2b1f5db888625e8ef27a16d3256a53c677b9547be9b623716c98807470aec55cc50525f5e34e2b221e876eb089a8ed1a61258e693516943dce9fa517f130392700fc196761f0e9c9dd21d3695729b117c2a8cc89bf972c1abd71f263764291a307522abf7e935213810dfa228e2fa31574314cdfdbc82d57f3bbbd6cb87841dd45d7d7bf29abdc8292399e650f299e97a511996206fb16e2c6da2655d0074e4fa893bc88bae7747f925452052639a65ec72f7173bfc29a88e7422b0b99ace1412511da236ff3a43ac48be0945440c83c22137e4e35d4b5fedc6373947978d434b4d610d295fe81a11f7e7af5cc72194568fdb2946744aebdfbf6c889793a60b37e00a74c689dcea2bd499b7a0f4a938428b0b6592838ed2c61e79f220c650324fb8216fac6be494a68f728aec7ca0c8f7b73ee88a8728f65ff16d6bda7b712d8f4db6fbd8ea825ca83bdceef852a2ec6ae646c7fabdea98d9f7dab606c23d6e8a0b479991a261a3f3d13c13ffc395920e8058768354408c73da0bded7a4e9a3facd8664f053bc683140aaac0455e1c8c374b3958fbc39c297ca010396901942cc56c0c8a7fde58ca18a2a27631ea46195a0e05034443ddce5446e872a94f02d7ba9aae2567b2b7e758e5c623538b4645c1d1c6709ba215ea01e1f21018e0cec27e0b7587b59112f3ee34fa47e6b5b5897c5d3b6eb4ebb20cd4bd040011a71cc5898d0779e25f20867033a4ade3803d8c52fe0efcf1a689caad195de71ee46a748ff806cf2da3f3fb7454524bf92d1928b05d202f105a8979ad88c7dbedcce0b455835592f35f2adde320f9dbc7f64b8043a79e29be267b8aa8e479bfbc919cfd07f185c759fe87a573f55fe77423a49ed26ff897115af14fa3a97774a21e28c49d325ab233bf820c6c9ddbbac13ec58c63ab7b16d45391670780a42a84b44e09a30c32f98c61a5dfe405c5dbf5ef749334c49ecd339344e6faa76fac9321722b1e3339f552669139db044221be9c8825d91755d586824726cf398d836513dd89ef009e18035ef32ff9169230b810a07c4b69c66f584ea50e3762d332a030cf9a4252828e568df56e7c567e1b9d77a1f91b2fb6661b1ac82608df184f80f22e58c9dfde7a65c3543fd1677b54338fd1a9e5634188f85d71e35b84c6373507543f5edbb1981bbf94712ee0b4f68934dd07b9d9fb8a3308f640beaf202856de6c6ed163cfaf54c890936690f69c9913ee5e0b3a74988af5c72bc082a5564f5fb8bfdf94ea42b05c31e7738cea700471e3888b1abe4ff59b8544f72b902014321c1dfc9445fc9dbd967cd580e927ebf5e61c5da2cb3f324f93a3184b580a3ad523728b4100baeb882c41576f364ddd86d5f90fe2b158b4fc65b5ea81abec87ff1a1c7050fa2360576a410c21f5c38ddf045b8e5a4f1486698e62547aaa08ef405f96758832f3ab4eeb0f619f0fa06588f4bc06f912b1f4691fa36364ac82825346f25d8d0edc8f47402698fd2048b445e209b7b071f35e6d74d4e60906a2adee27af3fdd4e0fb1e0b40ef7f7f3d202409e23216cc2a9f94d50c67148345e0ae506ec30701fa95cd2b378eb533debe98827164cceb3c16d7f532f933ced269069a15b0d6405f49c56b3f49b164f8cb3f73cc02a0dda44377afe8da092316f0f9be62cf94e6c5d4525644c6e848bc2da65cf6acc3c4a736ff6c6b4620a6f3698dc4e577da60e07f445a09ddc83c643cfa4346012d9ffc91cd54a49cb1948823c73e629e0915da98c6882a951e25b61121575e87c7ad597ee12fbf7aa64c7519c2d5dac3304e83d6ce4bc4090b2cc2182bc9eacb636b51877ac34dfe0c08d4560f93d65fb108b597b17ed4a358fe017d9f2dd837c9c50454f7f55fdcb1a9792f76f1e543f452377756a5816ee85b1d1605d3693cac871c60ef850c8a251490e455de87ef8a90f95b63627709a4b7747728ae2512754b713c764bde9a82c6adf9b9b1f25b9befc832343d9add0d0bad8313c2b94f7087449a8eb920b8a1dd9012ae7e17d82f7d3b8f24decffc955ae84cc0fe88db21b3d1051cd9998f43f717a6cbaf6aa5d4e3ef864ea002075e0228a791a64643efe409eb1afd7945b5e1bf5aa91b9e3407d1f1b09b8fd3bac115e7e62adaed0a78b74369e29875a7bf336deac081fb02d017cfb070c1a890cc651ca6a84ef981d8269dc5f351bc721d619a05f41b82dfc989d8e39b26ee2257a158bb68398fc8a407a01bc16e095fd0b44375ad29e25277eca36f4615e27616eb3db9e33a9200edfeeab19f35a226fc241e52ff28208d1ea65b8016bc704cf3aa40d72f8ef6881395a299b6a39e45763cb95d804ede010496d0b40e36482f672ef898b5ef7c32e98a6c3b429ecd3d157b93749e00f90ef7e735bc8f9aebe3834c186db1c84d113461a6ba7b73ced84d191d4d5f1cc03b685e3335e07dcd65010a120faf87b058a75038a2a29441ad517367604b417b3eb58bcb9636a8350b672f6bc5eee58faa672626a0ea97d033d974efe5f136892823812f1e60f7b5b1153db9b24fd393e86d7dfe952e2a6c90dd020a645ca0ff7376132ec08b875ea091d66f108698f134ab1e256855fa01018eb4898b9327e9aa1ea288722cd1f3e9b0a4dde3d9514a659174187983751302b65707a005205830d0aa5c77ca448e27483d3c0dbcc763c1768193bd8199a398ca792a2b89d74c2fea93655ed5e74164f7e404fa861743beae0e33dd75b3363ec11998033a1d8c32380485d11fa2637776b322d2c43d1b8fa95755e67adb3005321aaa633c19d94cd023e5472de3b5b11a5bd7b0a753ec51a263280441686c0eeea9c241b6b9210b91108599a4dbcbe3773c8b7f6c5211470895fe381339971691d4ffd1e28a32930a29659be7d56b4fedde1a5f01403315279cb8efe1e1524f7d8f64ced101fb5d77af4b992c922ee40055696a3c41ff4c4c4c03053b8a704b7fa049c07ceb033e51fb772487d549dfacc07605ea73fdd9f17b143c1c779809baf5d4171c0d59d1a6ba507ad96feecb89b41c3f2eb9a000155cc6ac8394dff5ff449b8d67783ab1a7bbb29fd09d21cb0620c04c5b44df7e6136856c8317f488358d8e8e17bc922886670b37edfb663695d6a0bb22b65f3f8e2625092394145ed40e6e14dd38622faf394be296908acfac103f9b4efd34f4e39846ba22114a0f11f4af4ad3fd173b37ad2479900de1888292e71645f28a22c2216e3a8ea1f7d4af73925027a240f82c26bf1c73eac5acc7e76685f1414f50431f23224375feb8f4b5d8ce5e11fa579ba315b3a8ddd78c937f89549910af21043e627928f7cba43576854b9744c0cc23ae1a48a54708f3bbe8e8443c087f7b31857b9beadfd68d10a592f4154f9cd207b23a708b4818feb0c6b6f7fabaebbce532c5264d3b57d58a48dd70dcb85f380b53209f8347cdcb62884df3de5860c4f82d42f8d7b1c520257df9c274f788799c5bfec690c9a8ca1007735057fdec944e22402dd90f1b7002b4fa1fed10023672423c4620f840fe77a101a19bbb8981ca7d4377793426bc0c874739da300586a7a374a651f40a1e038fc4cca73854a6f735e6e8e9dab0f1f9813fec354110b29b4cb8dd6353de3b859d419eacf4cbdbd4e3e1c50948c8073c1661fe3ffa0c07c6f63c65c1ba83e4bfd6e16cc3ead3fffe1eb444e6daa83cb93297125133b18f44dde9a8b19e84bb20a96acdf0557972005a9130d87bc38802b00c6024047e8f6969abca0d0b71ad840cbb4ee3b403698c64a0ef720ae8aa6365dc39fd5083fe237a4107d8d5c9c4ca78206a6abb82241686ed6f3a4826840c2889e602e0c9d03c43204703b8d472021039808758b4c89c35d67b64793f207e0079c6653de8f580badb0c79e78f67c04fd459d5335b4225bd955b9d42ca3e40e91b5ae737f3f9a76bb906c50ead55c27844e04d7baea5f97f99f0e56831b2b0f6394f957ee1ef822aac24db8463c47e572f44bafbf25c8cb09526a1046806ec1aadd912ac4d969bf9c613024e997b0b290f061184d74b9df5841b4df506189a838a7479827fdabfb24fc65039de95048b15fb324243b166e890b7686b27e40803ede4c22d9a4eedcc69622b5fd071aa416545221bb5b309060c225c0c578586f76de7f4c4cdc585d6902841904e367a37d6c92c5698a75f46c6b9d43bb26da93edb9332aa1d687f12df1206b79194f7c0f12e8f288b4aed9f528bff873f17048de8511f3ae8141811c14a9708893ba0edf516d06a9650cfc192e9c94c703469be3a4858d7dac89a91949105755999e6da99c23f8c27b7ab2f70496fc9923b79aca62462195acd9b4c810d77482e3e5888e286ed1ce110fdd7844d249ae1c1efd0659d6505137282a66c2ae1accb6486df569304ad259facf35bf6be7f0f14de62a0a8c4ddd07f372362fbc311e31b61bd4bbdc28abbac309be30a22f884cdb75e8ccd6ea5d5d80ee79c3519bf5ceebcc06cff30d18403f9ecb896684de98c053acb361183c59fb64b04c2363fb7adbd436d01b330bb6aa8c417ab2e541644b8fb5d6d8d743f7d19f6a83df734458039c69c9e46ee57ab59bf9d3a46957dc048557df845f80e28b4f1c73abedc9292395d2a953d90994b0a8750a65f034fa123d4e98964df765a911f0e639aef531ec92d22b6f92d4891d0d79c41016ec5cacfbc21c50477ba96aad554f1680879275b1884708f02c37c0d7bc9c63670562c8f78786778abb4aaec587fd829795ea1cfbc5be8bbc77019b73549013637c76e5e0a7d1e4b6898481ef7cd115af126e88bfd12d9d9561f873885d7575872565f9d130e96970225efbdf262e9b5f1adac50db8c650abfe275d84ade3e8e1510130450cbf091080e8c8b689d72e12ff217aa3f3bca192284432c5a6aa411b9cc23d012efd55f358abf11278ef588e0a1434bc30346f705a03eb3a9e9de49e4056a4bbc2563b4eb2fe04cc2c11cb2817a3822262190ba60d7ef4a78b262aebf0f963d9ce324713b422b6142fe42e477a25e6a1bf028b4b90249b1bde93b2afb481b64ca9354a22322d5ec3062aa2708b06280f4a84a0cd2f9c407aab331a9b1b5c887754bcefb62dd24a421ed2be8840e9bf9732315f5cc6c99ce7b8908af53d0949b0fd44aae513a76e90a98bf03d59d549ff0e96f8d1210fd915dc06918b238a5282054bf94e821877a11aacfc8c441d8cb4e9c57568ca53e213210d4574d2d7dad1cea05d02ae0a9af5a9a6c9362700603bed1ed9061a719bcbe08e082b717ac8863947b8d1b82d002ab6bbc897498b6cafb026ebb0e92dbb6f981d7a97e440e27d14da3c654f3da70aba1b9d20a5912c8f18ea06eb976b11ae852f101cc2577724a606dee1f9108a073d78be52da4b9a953522523119ad09285ee99402e75fef652c6ad90a416aaf0fd53e473cdb685bf3677c89eba2580cbd0526eb8939614a6b6ee43c5f35de94c230b4c4ae54c0144de658c94c7a911351f55ff8f83ae23662d407c7ff9bc491548c469161a903203989c5d5ab1d8fe0fd3ef2d70a5848281cd614beba108d0857702ff5cb5b9fc6a3c89fa4644119657e84640e2c6b005a7900b9ce8588cef59a1c47b46b4ff87ce140f3c41921605f7bf17b4e24dcb15dda67ee665ae34b485074dd818001156be37caf1f5241fca40ad94ddc341dad51b523d5ede8d0fe4613c7720d31f51286d281b885bd1ffda571939ec83d50f9114ad2b268cb8f4655a2895c15e5b96f328549baf7e539f92efa0d2664cbdd19f6a2aed311382102133d6c8299f5e7ba6e84d9a3e7b926ddb54e4e1b8476165c7205445f90e4c0b3d3f1eea67cdab21458da823076447c097fdfa12e1b77fca8cf590a2a39eebec7b1862e42bec58c86f516cddcc25a1e57299579b0865ab9aad26f025f5a8e3a7c5da5bced0d22795b50cbd736551d665c42fc02539ad5e08ac02ea129098651ee2d5b007b1b03bff8eba785876296e6b031e4626326415169b771a2279c49492f7caff227cf24a9d6934faceb470b4ca26bbf40ec98d6474bf6aba76b1605705656fa314c83c46f4cdb9f1d6c17d30d04f9aab44b20f672f87fa34ca318ba96cd39bd3a6a5a468760f14e19ce33126955686ec8a08b1f3714ede08104ea978cc993bc58dc7f38e2ca42c52b48080dac10e6e936e5856613f42ac99232f50959b352737b11b7a8be5676cec4ee691c773581a6595732c2e629ebdfd33ada27922f4d62cf6b97f84757457c1c683d1d5b9729f4e6c3f3ce805274e8055aef26f81da6cd54bf303f0171fbd09054d42377847a5d7449dabe9b0e806bddd7c49c0f91975472b591989d10dc8e482553119155677a2eac8fad0f08016ea64388a9b35e961f2375455759594abda75be228540488e820efac0bb404c714c12a0a125012c71b0dad6c601c177942ac693bca551e38cf4822222d6ad63df2c4f98731c51c06eb98d51a3204e59851a55771b5d03c3ad1fe2c3fad5c90aa7b0fb227a0f263a5d6d6897e69da8814b6c4f0dc2261b0bd6fb72de1b74b641edd8fca996c972da61747de3ed8ff3ee1372fbebc131c7e7f71f3c7b2854592fbd8f6c6392021d2b0f5bffc319d7c4ac5f0026fa34af81bc057d35a0a779aeec9e6dec0207f20ddfd225fb4959e84417befae79ffe2c8d3230aef259bf2ae94c8a3262b99e179c86322287254cb41222976d98784b9a16ac8e7ab455a6a4b03811dc6864a1d4873a8d8d6fc3d23d3b7307cdcb85901eac938c0778dadc538a30187f6059a47295070966516d5c7291c0e211485f664f83aa16ed4027c184a66952387b6d63b150cb4d4f5e85d7d1fb0e605f92a5c3a7c40ca68571d33435adb1a8df6d9b3f2180dd75d8549a599803e2916db565eec17471df241a3e896b9ee86bbb33815c4323505def8290d816394f6ffcf03b79c5c6a8bb7a6ea4db219b8a425ddfa57af30442a7102a0879427802f7e026ed7ddc58f9d05d75245e3f59a2e7c76890f18d765b22a5d2e23409f46dd520dcd9a0055e72c4aa1ef838a484584892ea4833aaf7533593577a88507360e829b15469abeb5e6f8004cf30c99f5dc95a25b983142c979f30d4f46571680433543ad0979ef508a9c71f385fd143b57e78eace8e9873423e237fdaee7d741652830e05227ffa1b7f20b2f56411bb6f4bee78f5b214a10e20aa1e7695fa514b7d2594105735fd7f8551ca7565685cb8d844dc0b40ff655a8b8128df496bd2b4f53b2b1e11db5b4d6a99c9a90f8ca3cb32d6be9384fb37a754f50cf5646b6e33b559a4384dac22288b8716775e30f1bb7e425f6836fb9256b1484beca39badb70aa4e4b6ea4c42d90078e4c800e8ea1701f0dbe5dddb64583f3f60f120ce0f34085f549a77d4613eab452504491101d71a86b9a44bd04940e779cce1d12d2dce05a95135d865806e00485eee9541f130a2d2cfe05636c15d080e465cc4d0292383b026add4bb28547bcb52c96a66c1bcab0c7b09c2e61cb4c5695051f998b71a73e01b6d86c213b49ffffcebf089e59f7863c3ab169f65b1b794daeb87947d8a465e54047b3779d122758519cde1050b88d17adf43e344e2e780de54fdeefdd4a0fbb2e20d01622ecda6a3216a79fe7b8c613890e1158daa14f4c3c92f114d0d419a39f720291f7c990a0a1dd28cb8d58d236901b9cb5d85be5351a9eb37ecaa64ae420ab63769856bab2b6125a111a6ccabf0fe93d057402ab6aeb21c511e18bda4403e802b83e21931cc070837b3dff16bf71c26b9d8f51fc6bf1eaf335a3a60799393d35eb30de7530ef8bb5312a6e90fcb535be5eb3a8d5ada13aa8e32dc80725dc6d5b964ae69554dffa52c0f29f134288100caad0d31b314b04590008547749d7e0c2c6128ab4e96a27ec9b79f9eedeff55d762d6f0f3873577cbbcc9585623c1c0edd91660b97924193882c050a6e4bd14f001d56f1db9d416c6b2cfb39262ce7704d83d2e067a5514253c9ffb14eecf5d05b8fca364c389778bc49d4f5ac252669794c7a0f945147e113753a2181415ea2b93a1bbb55dd681233d618c87fa9b0d93ea7b421a201e07b05db93b6615bc4f185b05127c130adc609a2aada216a6a4d0d2b9d8d510ed734c08e5de3f9d8bfa42511b8508c54689d22b822909dfd7fa3fd96301ed4f96ed11d4c2f4800131a95dcc5a7817e6fd5990c544b12e650b1e14e9a9af2cde1473ff1ab7026979864dfd8834d58da79abe851d2d5f4dc1c8756717fbbcb7e6979cafffe8b4907e2f8f0e7379bf0b240218c51ce6d4cf4109e969eb2f802bda00219a0b535f2afc5e8fdb30ec942e8f288c803b9ea3abf2fb48b8d715cc020b2c7095039a46c37b8f32e72a1fff943f18ace4a2f7bc243b97f23b40bc0a38ec1d632e883a9409df9963ce354c675bee72c52667c79bbf3f31f0305d848a770d59b04d419c4bdf795f05abae0d51c485fb96a21f966a471e89ac9fd3120764f61610b05dacd3cbd9315c65252e7fa90ed03025d78c346e3be0c9a7cc9575c28d28bcaabdc5480cb4a0b05297e918a9046ee45194fa11954bde2932bf6ce0b24159311e5db64927c9b816d25e30a08e2aeabd3f735f1ccab4657a67a2075f6ad9a40736666ef850559aad8ea5a1c5760e9a2f1242393c381ce822d6da94e63ffac59f1339d50b424b178f3ed7b6408de5911472b677bdce7c6a95f358b463bdbecdf36e8b4bf9f534917c8fa986e1517e89c2206d3cf1dfdc9da67b0b20c6b15134da38f7160202b9aec3da9d3a14d3e0198527f87ed2e79073e483259484ceb3a96e14adaa2b2cb4f6d8ceee863613bcdf7d3cc5c9568de249b0b55f98cc30b673e0bef6eb0d70783365f36ab27bdc8d7c9b520b8d21c20f210b4b731c15b8d146d80eb60a2785241ad71a708ce7207b8ab42face76c1f3585bde8747644d9d98411b584614e4649f17e768e3c79ef299dec0e2e41008b841c94608fdb2e43cf9cce9c7c09d89c5ec796d161bfac61a80483248b019eb918ade36e249daec03581c3a948056d5338effcf74b74050a50d3b92c647223109a18a76276e5a1575a6b1dc09a798ec371c686e4550ca35e05b5d532b86ade710e21b7021ca87bb01fbe10c6e78da11afc54bd7e96ab628999843e4febd411f71d76384fdff377fefb50699d65b8553aa462fd7da7fd9634cecacb9cc60cb7e019774616b2cf7a176eff87b5fcefe9644765caffa2b7a7875ef4c18abf2812645634d5cd0485bfc054dfce0436a71fab344d49fb900b2a7000ebc75143744385849212e4aa1d09f9123b7a825bde19c93f2f1661839204412af113eae954203c3caebd7cd3a72d4dc123b93cbaa6b0c5f1003a6de056f946eb215797a21247f6b61221fc86f34b261c8cd714348f6aca46bb3bd12a7fb1a8fc3f7c8143eaa5557b5c5ad9b9184525d38235029e8d04b51d2931858cb22b8708ce474bfffb82dd90d1c0fc9fe71b8204e0ad16b578790518d9beeb2c3ac40032ac0f2d423b8bca5e52699f392e8edc0de3bd4b9c5bce40ccd1e9c9d6b14264253c1a59463e5a0639abb300eb8a79e4e201aa4fabe5d2605ebe2656caf2dc8092693f7903a27b4a3252cec6dd2796da435d76bf8592a48f63bbec03abdc97b7c6928ffaa14545aad3010cbf7cb10b895309a60d30f5f861598e8f5dedd75c7254b7f1d18195d5b254a94ba76ad40b82b2c2e08d770184ec2ce3bf204bffa7fbf521595102682ef992140b010878d8262b45955d05729e440f74fe80d3fbe0e8cd1ca37eac2b1110304c1a6ba547e765d4c6deb15ef5318b770160921c0ef65aef12b0c66084fc76087b5a8cb5811d9753130d8def3c9dc939cb2d0131fd6602e4211b1808b53175a8d0f9be63944887df8f372f8d8ce4255d792d6b3dd406d385fefe3bd2d68c1405f531ec86d4ee98ac5098fa112bcaf6085f963b76afc7f9ec941b79db5a31ebef829306006774d17fce6e1c844dcf0d119f8efd71bdc7cc9dbdfb33bdaa9264c8a17a11f52b55d4a4cb9a4b11cf99d2a37181c9575487d34ac3ea4221b5129f6f58bf15d3af349c2147cd960484c1926acae6edd88c8aa2e932d12d0e34736acb536793172aa1255d28889f21fba30826afb478bd8aae87f4a0ed84fe4092ce1add7be88c4b18e9ead49a134784d2741d8933cb33cb93c18032dc1cd9eb973207b5c34fc18f90400c8daec74e3831f9548ffb5b245cafbbcabc288c0458c332d8f0b526a054ecd1316dfed95ec40cf1454fa5c2d00faf270effdd8ec74627d0120e18d37d761784b8362b21ee574adca1fc2a1f802211dbad4932cff40147d61a25fd6d39caa8b885b7cef9827c1db101800bf80b075746c6117dcfebcc5f97ffe554cb98be0b0cfb3f9e8a5a92221e693c6fed2c1442dfeaca18999f56aea2f37e9958f40e409691a2835f82c75d9372f49d02787f7853d26574ecd1d12c9d0792ce9591f103befb50b1a654edcea30edfa91853e1455a7f73130985bd97f8cdcff1291d6c9a302614772b94b1a8c8a260c17a53923c49591c1bb08fb17fb178a970bd3a173837ec47f02d755856524f295ab0f2b940bf3b27c4dbffea41f7e8859f6b442345c1de7d0b963c371b4488a0d343ed78f584d340fd2d889d7a9b4b10ec1ff456edb144ea359bb11b3d4964925345cd8ba1661431994a1ed4830ac2949a66c9aeeae6862c5e50376ad61b9c50eb61213fc027c7833ad8fcc2294bf51c154fbaf6cd3914525436d432994cba911ceab94b086d3375b767e03dd42d420b6e15687242f46a9cbc3ab331fa622770ffd52e7f707e1b9d2eabf5e439761e678ddc7a8aaab53a8e971695e2cdc7268b0d0f2973ce3604966be1be3dd99566b73abaeae89b619d342776df95b51a186bc014a5c5818ce227be368790e71e4427547df0e6fc7e9b3931e8ecc0b2fb27b0cdfc6515cb8b87db321319ed47c432211bc8a85f2776482c4a5b74445b6a96aba524f75211dbc0ce43287c97faca50d65921ea1b66b69fe7e36dc4b40ddeb1899592e6df4c8a9168b1e43276c37d38d7689c201e0f1f1fc57bdea44c7eaa0eb953930f95d3a4d2483122d7e7bf613d01c481100f253782145606d1352190f0d6a9256c88ee4fdb05845ac757f5223da9d22c8d3a188058f554e4d7eb8c1e99218198183c5484007a64795ae328e5bedb161b6a097b4570268b571ece83a8ee17c26f3041f4f6013e49b2d782a9c9947883a01230378a4baea32523c7afe7a986b25097e16417d078b0259ee338225d41118da21db49e049ee3cd730a14ccb917ba933bb9615695717fa18a3d49858f70c29a3ec1aba69dd3e240a649ce73b39a3c9e741d1b7c9e3eb2dea4d1cb5ff6dbda4639b23dff4148b65748a683252a4021fbc6fc49474e3957434e494eec6d43abbdfecfacc18551dbc2cb8b4fc1ff1482b4d4e3cebae7ef2be5c5806390c6d7efb34fe555ada8b0b103d3829156eb5c2720eb277f88c34b4d5f14d56593d12a3289a87b92f26cda3fb3288bcf3322e7c72d0144e5930debf576585796d25bfc420b92456e0a24598151f55ca4a803c006fbf74269ef05259b49579a52a5982f9437736338d0ff695b489ed02c491198f3e8ceca86bd3cf735d6ecf1bf26a135b16353346c2ef66c3a1a17cd966008159428ba3e4b905122c4839072878564d95c5a0369d5f667e543078b01ffdaf9636628b70d1365d5580db2d17e49d09d9b3cf3ce512f89f4f4277ec4657dfdea8de8bfd4a2a2884e82134538aa4ae975322b6d22a7aa83d41edcc07c9b6c89957db3671626ce3844d6978d4351a99e9f73be1c224923e998e44353fb898593f43a3c1cb280cf5f74e74b98f8e02516cfc7c44c470491c35632d92cd4b53587ddf8610bfe3bb2bd2cb5f359595e453292947f6d6c331236d68aedab3b4d00d27a446927e571e3cf6e5df2b7e272d8a029218c0c5dc30235486f4e50519830f8d2d320861fb0d5d81247494bf595c3424cd1e578f532a419df9eadd043e93a8d31098de7bac01b51e2c176b80f010d3127641e3b0f6974b86a9be13f9e2b807c5b0fad3c247cfdd63ad54f2d1326a43e07dd1484377b97153270818a7f75550a04a78437e796848f2b39e2fd8aedde56b87c97c326dc1c42dc7defd1983e216b81a8a9306314e095ecc8187b2fa48b3441505cebbe03ac1c878a3c5e5a916689f358a44539a40dadffb485a02a6466dad58228196589b5ac97ff765ba31533e658de8c4cf2ae2b11fad6fffea0a385f6675bbbbad655092700af6afa4012d20391c7a8e7a20f272f9a809f9c202e9d45a9dda474e6f14008fe89dd0ed566d69fa811cb698b979b05bc423b347d04fa050faa62b9a7d5ba63a56e5d9c78192126a6454f4fc76bfa6fbf2de8f57aaf3b1f2a390b70400855bbc836d442359c5536f31c1f2a11a61901b2cb71e25878bb032656ffb386f951f070ca70fbc726ddfc07e66114b54f21a4ae45f463738843c0d0d90c1bc271f4be695ce74b98843ae6785d1ac1eabc3cf14bdda44c6d61b2e1f7f0d07a1644040592eec55e561e4584bb5a0927fa733cc5783f0d44ffde660550b1b3070e2691185bce16e8780bfcd16b86de351eb8a38f0e8c427c0cd3f9f49646d0f35d9d2f1291baf2be6474372f1e0d233897ae3001c1d995ddeda5a1aefef6a4df8b146b0cb1a37ebf9a64340f1e37eae0d79b7ce3ca1fb1759c47fee0004dd76b53a78d70f151ff016d9a907dec1c04112c78b5cd01d045f01f53891bc3bdf031f8a9664a6295a87bde9fde224d65dbd3139c1b719eb24419ed587108997c162cf792832a35e99ac1462c22696f3d78348369a77581ede783d41b842bcce8e79a8ee1949c86a2a23fe7c1128a534bbec66ba8c63717fdcd757d94782609247de33e157ff461eea4ec946b62652e2efba12a8e08a24df10f3c753ac7a01fd7fc9ec1d8cd4375b2aef1b074f679755d6bb06f5f3290079c1742ef3e657293bf76f6ef504c64fb82b2fa06c7413215660ed58640543734cbbcd531914243459de66d8a544600db6231431aa013ad3ef820406e1b1386d949a95f6683c6eafd810f90a22cfc4eadb9ac173eee5a5b8723e0aef21a307511d95f5b02fbe63719f494a60c06814c0397487115eda3a1e683438e26b99be5dee338178c31a1e79193135d4cb6e43eb8c8320b6cba2f36b8d47b518574b3afad3b82cb5de71ff6c80799cbc70040cb071c4514b3d8394df8e8011cbd4f0644245a8367cd9c0e1cbc2e6a9ac4c4533ae3752e0df6fb89af03b4ae7380adb3c53da1d2b9bb64cfdfc8d1dfd5e9bc3aa0ba265e7ce7c19a71dbf2574d97a345d33171b9b687a97a0affa84ac2d01d17174f1a70a95b3db73ef4b46937f3b67e3bfed9949a7c18764b7f3f2c42e578c1994adf378dca473f7a366b1b03dbfa72db3f74a38be5e3c0c3e630895094f84cdd0f4c015c74fb07373fd64f3627c06f4cf63af59ea231298fa80137ded5ff3b194699200c05895af39973cb20001d890222450ee6decdac98f1b42ddb092b8a16496f1a6c819c49f3d16789a9ec1afcf5767bc666c106abdb12ca9245ac2a1bf96adecc356c326031723dcf8f31e74a9c1abb6d4722e5efdf1e46642e9b1e4582d0aecc99fd46e2c9544bc6a485232ee225e490bae7715385f4c8d1803b560ec4a9cbb80e6fa4ebbfc46a4dfa57e05d7a909383dac4b0a636b1fbf3b4f3b3a8fcb6e24d40d263cb163ed22e5e3ce20b4779501fb6be3b84cf51443253dad7a1c55b78dda46bde9a52afa591c614982c8908f5bfce357a20d82405b13e107b1cf715413a347694bc18334ad75d1e9f9a463e25d2184de289e563ba8c62b60815987fb348ca57daa305f228314df8f6edb6efa87f46211ed74b9c2f8540752a89e055c3afee766e5da4c4d7af8a31bdb05f6841e5ada5ef799666bc21a803d41bdcfc0ffaba0899e743662d813324814ae00f2d96714ae75bc2bf0b7482f6544a77bab193500e2472a4b25aa92c4f55f3648c90e9815fd7cf88b6e3c98ff055563aa88607bd6775d010e76468ed80c6fcb96c7a81ebab2754314fb8ad3f6ceb625e2c0b3da1614eef00dcd8883bb3d8c4b0cdc82d6ebd79d9381b182ee088af87edfd617859129cfc6714ed9c45f561f76a862bb30f887b857469b8ce47830b7ce03e89462398b438ff05657d3b661486b28df7d7dc204beaef2bce4e0f9b5777eb1bdef0a8751e6bdc3c1338414db58f001085684c33411909a683e7300a4a1968e5da2cc19905aa3360ec46b3abfdc2314fc3312d364b67e87c4aca987d5f8367768f3b03a274d3f2e257cae1df51526e551571c96e9571275d67c278cbe8fc0a534b64684e66d58b153288a44deeb94ed62101bbbecee350548944a2b227f65dec93af24a60bd25eb55e3025133083b04c1ac825b6eb784384901b94f896549e47765549c28f091902b4cd263565032832a33f05347061b68dc7cdf7427fcbe4c78ef9e23334ddee170e51f3d56494d7d0b81d095ce3c529167e21881669feb26a4481db715fda9eaed785371d45ab3c3c48f26e2753c1c3fbe61662c4a97ab46c93aceafd33edfb1ce177563d5a04cd5e138f0f3a1bb2b2d068e58b329c58e1e3984bb02fd08e5973d9593ae68ccbe5751cdf1b4c1cdf31fd78798b956e6b6113ad24759ba4a5ce1922a29e8d60be9e21e14b954d3acbc51532e76d3160d954ccfc8795bd0a19bc2aa3715adf1144b2640a11900f0dfcede1df21288b34cc7cca854abaeb78b40bb1b5d02e137c24953404cdc42d54291af8d39c385d32fe122256b4809c2fe2205a799f233b6ebbb80aef4e7cbd023d8b940eb1165935550f47337dff2c759b5cc338f8fe2504e2482b9fd19731315ff98dc02d0baaf93c56b80e1d8ef1e295151a72bceb7a393b6d7b12ec2e26e27999403257558c2a84b3f8a1a93b1ad71388d0004658987641947a492f7d2c1ea831ee14c4072e4438cb1a45d40d2768c29310e71b44554084c7de181247f5241035258d83873c02ee307c039f673f3b4516e2f1258f69380920f51fa30b8dcf285fc92a4e59f961f378f2ad057f3e604cd6d55980ca7956d736b1966159871ee17f6f3291a77359e1e8e4269f88669b2a79c7c8eea61b621af1853610096e87b459596dc00a7c0b63904ce0508a2081322f820e9a6cbabaaaa8a5f9e481f55fe9b3066b6ef02b815bbfc1eb27bc425ff5e73b4a77aa9ffc08f821539ffb9fe9c27a46799cd3235ad7d541d82f8370af3e701906232b26811bc58f0720ff33f5ef5604182edcc2b46fc901027b911cecafe4b959659c9903b6b014170b937a782ebeed6c824ea878ab032259ffb8c0d678410515b8d8cee227d66d703b9229af2af6aba1792a7658e5b44a348819fb376a1baf802eb1d9058b432b45db93bcdcf6802da364dfeea11964011afde266065bff8bd2c3991c24bd862e4faadf7cdc787ac8b76390327bb58335be0a7ed0492ae4fe1ddc3aae1fffa44b59a320a83fd13d5568fc927c2143b0a2d336a2512290b0fa80ec6a696b4db985d37912cf7c6f7137b3628fba32ec72e0309e407a20bc73fdcd16089c1211be62befdae66640d4eb3bf6d61e78a78c4f75b77cf8a68bafdf47ff49a368756b61078f8c497f381faf5acf88360b35123f6178dbaf397934c913c03d262047ba89597b214d366b3a29cf89fec227b2b170404cbc83f10307fbd9466436403cd9aeb59537243459f799efa8f9feb978cdb2f6d8af6921653807c52407d6cc58eb3bdb9d8917f5ea35a4c21508ee0c79a458a17ebe7afa2e20510c25293543792a1b5da98faac4d31054591d7e2f0acf6493c59377fa397744245e97bce5f33c769202ef9eb51d4c76a83cdbd2dd432fb716fc2bea8f58c95a5fed3e307fd9a89e071d1f4753d4257623ac1d65147d50c6da528f02308eb65e721af9392cc9c471fe535996c64e2e4718af974cd7eed0bb921186802557336380111e6caab45223f372b2dfa5678a646f562ca0974a9852946e9708926e2b8d15fbad49767687cdf9d6aea8160d6bc7581d11a4a5fe71bcd55081f251075cfcd33b2920934ba3e8f8e17e34728d756edefa0affdaeff6b4b4f4663677a144ec1e3245f8912b6adf21b0a0fcc0b1955b359a96b8d5379d7de301dc118d832cf5a5cef0d78623f1caa39447e4a9d0f35d2bedd168b6331021ca3f11c27d9718904defcacedc05576c257feac8b787d21614f380593a6133f5a8296d9a81dcc70251f0531725b7255ec7558572b93bcc09982b50ab0bae64fc0de5609fcbe20c6dfd9cb8c75f20b5295a499b271bd6297e4c01419728e6924be415b4a16496eae82a2d41f24e7eec1d8ccde75bf58f7701dadf984fecc1eac82ef75d1a9a7331b4edb34f55fdea231638c0ee7b29fd61ec074c0d48721ac1df0bd31f851fece0293afe640a05d127c87b0b3b34d4f7ac5246f3bbb5dedba1e754ed0221c08717ff7fedaf4570c6adae372697dd290a82dda02a0efa7e56a3adc7b72d6bb0158092b6ff29a2bcc4379246d3bb073f3ad4c8ab55c46c167eb0acc01b69120fbf8a02216f64247a0b343a121a0bb9e272e5408c96f21708806a4c3b2a791be13c99486243a2dd9699a1da64a9832302cc4b1cd43dcaca339c695925d088eea7346dcc9ae15304c3f85a57fabf271380a7fae31284d73c35c70864406d3087a5874e39cd0eb97b8edfac43b44941165b91249e612666a92fffcb14e770367e76b0bf3ada60c2f710017568701145126a2e6777b4d3710e7f1dc32edb43e575cebe8ea08d8c17d674bde7575277f74d683ee8893d96ffbf47831091d0a3eaec920fa330518aab2fcb4c26234ed9cc7c8829e8bc2aa0f9d2f76aa1b5a870868053a9759530ddf854bbf594980ec83182f2288f8920b208abce7afea88059d9fddae8759b7da58103a63f28dba0ca0d0990f5bae4fd1707bc0b23c2e6cba3a11d3e10c9a07385aac268d75c8f840476c5a74a149fc320008b47e29a579e5ee95a81179a99ce8d4920d2dad7b2290a0d7429566e364b36560af58f95528e41b86c89c2716b7b29db5e4307c50d570681bc9fcd805ffafc0688dc6ef23d2d3fce6ddeed65508a7ca33450f0ed4b18cd6ea95b041270cc49f8f81d9f6b95dfd2e3fe061b991a267b7f286e0f21f980c48b7f6166b103d8fbbaeaf41ee33dc7f4c904d5179e0ece586e4a28aafb6be2074425837600aa543f4109077ed1743e9a7bd2dc696bc33b548e0b919015c1f9d832e5128a615a420a9b9c9a5e1d913620eb4e8b9daa1168c90deb9a23c9a235ff151076c52a4488e2b0808121ca5bcf5a2474611ae120186299be43d2f46697384dbdcdbe890635550ee1e48b7294665a5bc045d28786162d6fec0eeead7c3e53d21ac12b115433ae2ba2b00cc222718e5657ad320b398e6c34b77e649c5aec8f8b459621e91f86ff4eaa9e98c879fe5ade98dfc436285de342fef07fc952ce40bb052ceaa64cd6494d2ebe52729927fa0dc6ea552d9d5bd7e0c0aa23b4bd403dbba06e4187502ecf19de124f01a5c1c889afc17b5bb142d3bc963b3f46a5a37987e87ea27a8a33ecb321ba6a5fcc47d1782eb7da5648a59c3f107aee30c9381d92e7f55860fa981d1b6db29116815b7e091b3d528c8c4667df380b46a1a843d94e5657694ff51605abd8fe404c23a053896cc136b6db9ac3d7ed339454e223875293e8f40611a494c8242c2b2d1c305a8304d7d1a56b873fbf7e4862fa22e4bc956bbb473d7aa23758bc72e51cf1e966da8a9321e6ebf7df0d7aca49d5ed8bdb56d9b7195e4ac5111ac7c4a12a08f2760d3f8523464a4b37fd11e303d4a4586d90fd37a601ab3d60372b59c9d89e7966cf4601e1bc54a6b49c3f80c978d2decadf01e2d67fa3c8ff0b8da2150e75c49e37e9db939b4658167f9699fbb88afa9242c93b3d2c642bf625b0694cd9b883c3b05aaf0304096e61dc974438b3d15d30e06689119e33667c2e88b60db5e147cab86ac50c3f5a3b5d5af5423a5a90f350a6b8c16223e7b5d64b05e6f1ab98066b2f96771c08cb0915c774dd106f48396c9938b25f786031e455b1b0a5fab37ce66951f9fb69ac20c1b06f4b4d09810be5684a11b0b9aa4c12b98fff4de4544e480f1a1cce0a0f33aa9bde0933809850f3aef51344c8ca1b2f9f29b7b4479d8b7a6ad773fb56042254f0fc2649180421e1d3c531dfc42680d65458904e52277c230720ed491bea006ef65b4555c62d0780e401b640bb8ec68248252aad058d8f584840b0477831c82be6f6d77c99edba7a551b4e6633375ad42ceccc156f49082f781b9191a38f5d84b37253c4de690237e004439edfcd494c20234765fbab67b08991116b0f388dc7d272dcf5d4267ad3912d7d45f09d58df3aa0b2959a8cdfeaa3bad5e779f0193f251b886f7bf39697fe0cdbc04194c7de76ea657b7da92b71ffc665d2f07fff3cbca5b28819c40fb05770b002ae756c00e37e4d49b021a3b4096faf86ddd6e9c6465dc99eeabc31abdb9eccf063882e57eb6f015a77f36aa29d67feab7a6f1b1900dcfddfd479fa9816228257b5bfb319d122ce3c9d6acdced5e524220383d5c8fd36c9902491296c43a5f14b61c5fe354c69d646e89522486e706168b884e5bdd9be69471831d041ffa16ea41378a6c6aa077b5a1601263ee8c19765ab524cef9a6a65fbb23ab5da79b7ae18daebdef0b4b4427f8dbbf980ce83173942fcbba9f8365a12598d4c7a034181cf9105e45172fd26bd026aa3e9fb71695a21f8e45201f2e764d94633e4e6dde36b228dbc2648a717d4c5871f770d4d6b1ac9b11ebc65242329e3d4b09e54cf09a7161350c3fa06bb4338d0b5d0a2825cafbc0fcdbee19bb6bbf20d550d7fdb3fefb7d32ea637b680fbd2ba723956cb3720165db7f3ebe4c9ea17eb139b6461da5649ca249fb3048e1e2aed2bde7001334fbe5131e2302482446849d1576b54f3d9dfc06aa01b916707329d8db964fe9468b2547273d26d79e6463493d96c3d8f0ec9edbabd77ec6f144f41ca2c26a7201b54f793fefe0f417ee89f09e6138317d01bcd31080cfa7dc14847e444aeb541e21f4bff2e49db96c5f69084128b42258553bcfe06726f725ce4a4e9c65f6b8b81a97afb8ffe7f0c6f09b95ddfc63d2e35402350f8ee92f90d59f577d52214f4d98c3594f812156f1706c9ffb7fc2c5279f5f0cfeda3e0bab6922258afc93dab97ac7faeee4598238e46a076027e6d394fbb7e6c1429b4751634521828d8821d4c7d1e2e9c779f83f853541b6338150d5690e4bb4b95b199eac5f8d9b9d011ac097c31923f6a9decccbd0f145cc7cfed6fc37894880714dc6d1c946989b55ce3a5fb9e69f921755dae43cca17f3fa381bfcf6b2ef6157bf1c771e04a6d0d5e9cdad94d952573be106a7d3dae0b8486fb3dfba08457ed71c3a5bc84895713a1f506be4f9df33c7dda6742f883bdffb0822c154187fd6dd443fec022b368948324268730bb18c7b2d77d518428efbe983e7a0bb6109e95e9ff7652ca133c741cd5862f3de929804b7ab38777ab3157d96ec22cc1daa9344b6eeb96920a5039e0c4c53309569c1ce71dc220e75cd64b5e08cefc8d68d7d8d1b319ad548b4f2ee06a685d83dbcd5809cb584c82fd0774db729ba484950946723e313f6b6e87582de7fc1b00186b6a78dbf3c8af11f4ddcb8cd81e2e97dbefdaee5e104a6d5b8dff1d18de6e27ee702d660a58b8a2aff72a5a329f8985172dc953b1931664d36a036f4d8e7f008435eef13da72e63c9d30c788a354e7c29726a6dd8be5392b67fe81b20f036923f8c8a11bfe96dd795e04075cfea2cfe265ef306346301c5869705849c716830299136521e544b39c6828a9d76101cf4bb4792ddd6ec2a5d035fd12b883ff15b55f5a1ed6c77ee9a3b57c579810eb841f78bf53e8887eb046921c9b7beecc42de055d998bc085bf3b90a72035565e5fed2ee6220ec2a921e9a1995edd74657c065cb2052eb9b9d5a9b23e8003171c9b13d5aaa14520682f17b65d50759d5fe21f2dfae4bef98e42f45ee9882ace50e7151f83dab568bac5843c922a17b4f3cf4b1b4ca2ea35f12d56411e9a8f46ca123bb1d33d9c9dcb97084ce200a741866bc9d176eb3dca7b493c1c12e7d6ff17dfc5736f7e2da2f24f0a52d8e6c97245f33638e41d5a6c6dfd0bc15ee318eae33740563dbfb7ac6c7df8d50191ec2fa7e9da8150164571a68d14b4b1947e6f010cdce7257c2dc73f034163e12edf69635718a12caef1903edc7e3b7c4cd99b132306cd8470a56fa646d77a5b9757061b3963036dd8ca458e27ccf805470332dfb6e68538b348fd613ebafb99e52fb3c500c19dbddb6e4181422de5c54aae236ef75cf2d122e2fd23fd188104355e5d23a21153212abedd4faf0eb4e1601f30394388b67fd223c391904e0b3ec52e91d7c0a885d89cb742962fc8f719348561263470f044e625bd9b3c27877d471df4090d7b30f980da8a1ed82a0b7293cb95505c1e7425f1c73347e16743d73123d48ba9be392ed24a79d1820e8c0ef8960db4e6c1362856b6b32c6bb97320f9aa1cda0e3e473af2b44801b124f7837e7baf61d570b22b32d110f15a49664b6a70957d71a9529a1b4384c3737d56d367f9312d9260a56341956ed173ba0003dd326f74f1ed902c02ebd06b8580042e8800938b071638b1a6474607bb1e8f68e5a3405f2e9867784c6f2562da2286731ea3b0d3d1362cd6ce8b53c7a29c8bf8612d53d5b3f1ebaaa52e8698f4480c57939830993ddb4486ae63a8e8f0e880c3cb86b7f4ea827f24d454ea78294d7be8afe13902c35d96d5a33424b70aca7b7e7e447e00dfd5d3404dddc435fa2b3378aa1bb40aac39d975848a8bcb51d559d3dd1d5d03f43f22c4fc6bfc3867946008395d3507ec9bf643741ef51cf693f049f5e87d68b04239658806a850da47a80daebb7482ac9b830a3c99081d6d65ef469bb42d0416fc074d64565c0cb9ad1a3c130c9a2f8583b912cd9b11060ea4eee152696da1e4746368582934dfc3ef4281e7661d2884684e0e7006ec9c48cf36fe471abcd5c133ea1f3823d70284ccb6b24394a322ecd9dd7f22836426ad73770501f16a86ee24284e849bc23a0a7b65931d2a4ba68dd79e14e4fce594d45124dc2257d6af34c7f90f37089d4e27cdb7f2fecc8567eaf53c348d5fa19fba677cbe8310f734e3dd92708af55aadac8b9db1545509f9a77837d20d027690b76dd607174fdeb2ee788027873c6b01bb88db6064be4a53fb27757337427c475fb2e27ef4e6a0085153fac740709bbd358f3467f89c80d6fa5777d57c07a4012ba4e0bcd56037c11ada23300a11da6fbbcbef871f0448290fcfa80cac39413214d339bed2d979c3da80981e9d0a10110218a2b654c2ef1a2e870b1f1b922b78e4e9703f96743e77fe0cc40bd277f68a45d6e60eacd6f8e9f91c577d81823e1d404a8a25e59f0eb3810fa1b05bbb4b38e883dade2dfc240b7784fd3b5a6952edf6813bc1d1922f6762b1af11fe2658ed1a4bdec6cbd9094b54473496cde3290a73bba3a8c2f3fe2b8c58384ef726632e63ea202fcd0b1fe4e6c963b414ce18fba9f6c096614e1be088d4cb3d2d666e7a4f687e6fa1a904bc29a4236414b5d70a2e89ce8cae766e75ff59cd56a2d4d14ca4ecc27cbfe32ccd46c155ce21632ec72170e71c03cd29ec479221d8824f7348ca8939f90ef97addbfc4f9db94354519c939a46b147a9514b08d62a96fa95b7c455bdd1f8f874f314b58dba41d21533dc8df6f3975fdf0fc5b33aa1ec1e5c6e250b4c72afbae423932ac4d657ef40fc219e4b01f8316732b9993090274872bba2aa0bd26d00ece54d3afc18356383f6929ff60c456795f0511f75e453de0537e940387176f9defc3ff4eeaa4fc6a8f3b311e38ae1a3bc6b6d8030a41d4c0c2fe1cfd29ac05b6958836850724817a3e8a02f795cb28ac20e88b0b451ce603201cb4ef146e41bc89f996c82e9f9d96fbba29b9910138acdf0a7bfe617dee5d5cebfa4058f4981858e2d02549583e03ce2a172807066a6d58b241098c8cfc3fddad0fb5ca9529a33720b9ea68edbab523ea3b566fd447a317635a712bea34712bb928f45e85a14d3294ed76363856acacb881fe2040d889b0eb949bfc72320711da7981b4c8d812e030aea5017c60b1ef05e05d1dfb8f435f2182941accbea9b2148f0cfa6a3794534879850b0fb440790c2cc3f469437ed3f949524f152638da330ed16ad5adbb84598ded032b5a533976cad5eb4cf6b5bdb6c3fd33d423442af725a9c9f8f29fa304437025bef0b12129e04b12688458c6e290f428e23f5c753d77d5b541fb94bcc9f5afaafbcdd4c1a10193ff2bc4d36104135251ee1ae0fc1cfb40290ab0a9589f57da61ccbddbf15b099fd25514c9d292e09eca05fecb98394eacb13679c47e076f6b33a9ebd4f9feb45b35e7be31537dbc55a695f01e712cdfa3801d79efd6010996c4943c316728e9200337fce79d55dc25f5f97c771fe905743d3cf3c9f925199a62492b0758a13b2ee8122d0fd33777efb3667b95e1417e85b71450d659d186204062918e46221c6a25d82e7d62bc1fea6745beff8bfd152913d592a596c820851d191829277563976366c657d1e82a7387812b92977706e70c6e5e912cf3be57f7fe1e510b9fca81c9fc1afd997149b173b544967240fe03affc8811717fc4d942cc9267a1ec9c4f9f9ddae4f4d2f895120884713c9053fe7f83c8bc2ec4acff85a1465d058a707017513a2d7c115cb9831a6372dfca8fb5c4c0e1e14e0d5d1e7d9891f1e902e35de766710dbe60aeb7c7456e3c9ac1374a24e69280321b2b35db38f614e422c8af159ed48f63eb1f7d61c26fbe13c3c9bf1a81e25de4dd102d8d1fc1f9c4311f2ca463b717fd3f81cd28a74f8930304ad1d6f5ae9544aa10be3157d01e979a588be4ffbfcc07873cce4286d796d6db3c228cc693a2be5534f4928f3a0c9d2be6a56f36f7ee7ceb939253ecbc198025c567260ab7176b698ad7119b63dd57940ce378a4bdc6aca258bd4031b426e44a85a025a99067ee76a27b4086c8d2015f6432d7344585b42c71aa5a7b76571af13fa55194a2ba4f0c2523ef770ad82c26c0a61759b3d9072485eceea1cea1ab0a839cdb511c64e482929b9b39b0aaacf97d0b82341342c35947c81249b5ed8469b94223740f16316cb044d60d09c1c1ba86e08ab6ebb7e8ff974cd65f5dd899be9b56737f3ed8589a55858c6940b5b565e2f053e7263694a439dcd839b800385a938f6a134dc429fcc2b0e4e5a157eed78acae69299e145b44f28d15f93580497612048b8b6751ad1e3cce592068850a18fca8585ab5ac1f211e138cd7a951cff7cd6d143886f288b93f09cc673b1e9e579dcb46275cb2254cb05ee74f4696e03c5690bceb7fd9e30232549b7d047dca7dc93389c3db53c77cd42c15bbdc4070b95ae57d051101d16dcf3946f16dffaa4ba285d28d35a1aabd978dd58d7af61ee4db7f292b408aa1ffe503ae9b2940278fd18b363d456b437cfc0893fb10ab770a74c9deb30fffafb1ae1a734ef5f8b722e060360fdc3e2081efa490689b589506eeab76fa872cbba8cfd95a6b8860d5bd691160a79d1eeb675af8321cc44e2e5151c1593e153f33d092d1e6a74d490710c1b8de8b846417f1e6defde48235eeabcb3ae4c0edbe3b927f4246bdb320f2db3d95c8c2a97803cc46f2d1c6b9c44ea4aabac1d307916d88a86f3e8f6ffbd04c6c1293b7d093b7dc6251ba7cd0584cc2658ba9c7f99a5c235de137b8d541766f1ce8b88cc6a1d5650b6e81b26d911ced9c1f71d5900b9ce4ace6a697e6dc6570e8bd14ccf68e2138afbff7addada33631266c5f71e55c86960181a3b35e21b38a6031d5890d968f8b8bca6ddd87626bebcc54ebb13e26ebda2f2b3df7e5e9f2dc4d74820407da8603b3815aadf46f4e10941166defbccb5bfc82dccb1f60e901044b35e4de6a267dc1c30ec4537c6bba1a6f0d1e9597ff62e7fc26d7ec3f5f0eb8196985fbbce61e79de1203496b74b7f411037ebb3a1dedbcfec98b91349b78a2c7b2a93a633a000e6311afb7d27086e7a79086293da84530a003f9f6837df6fc92ef536f2e46af36784b7a0ebd9ca8f63a318b81c8bd63146e69e4d217f935f264779bc5589572d17d685b7324f021894f1587da5e18a2564e93317303aad8b2b68e000a217c2b51285ba2f9703c28897790ffb6f18e65ace1992d0bb80de5d49a15dc9136946aa75b3a2f86d079b2663a126f23e660d507be7eaf351e2e391ee453827ef3b333d3566215469dfc600f17fe703efc29b3891b3dc79e77dfcf5036beb30ac435bc22fb7cdf8c2d99d2c8ac512576a81159d7fca0ee9197cb0b7c77ad41af8acc7afcc7fd5100d1bb3c088127ef4772728e6099ba61b88baf608793d7c7531a7865279eac613cd3c6e40ac30552445b2d1423ce3e745b49a928ec80ba48eada0bfe7a0638b71d42cca1faff8c91e8f37dd9a17ee806f1f3352e4fff329ce330043f19d02db4426c9bc02331d00b9b3480797c6b9b042c3e007ee4ecdc1471b0e86002da4d3d6ef8b3a49315b238f5d5080e7a30adfb31e18879a828e68f84e06d859a47b7762f6e07c2d4580d99dfe25cd864994cf1cad2aa8710b6bb921ece4382cefc800b2afd94b5f75f2033ccd0e302cf2e5324ba89604eb2dcf712d2753d887d620409eb4726b5441562b010f18ee9282192a7d311ab89592881c7feaeb3889005cdfd678f15d78f95fc4e14c9fcdea634717e789b67e637e0de51e4ba20b8549a280d3367c26d0c75f1e00e0418588196299068cdba5446e045897f871bfdd9897dc6bb2d79ab0dc21835b0f3c8de16583d435a55c9f738f0b3cbeae93fbe98419fca20ff440b7e99e85a05da300a36c9040f71a023eeb252a6818d17e194835454a3af028b0776419df3dce110c904842783e9242603b4980e895fe295152bd934f3d297510d668376255a27398a76fe0fc1b5cd9b943f414586c08a562ca814b33494a453be3ce5c6736784980d8965180ed55cd76b93d06ee01bf7703c47070fef194fcaa9695214de716462c4d2ce0f69b497a8843564f1c9a5af36dce916a225e52f27301470dfa8da8a57a8ed27c6addc1747ecba4f9d70b2123869786cb2da74630e79b6cdf768d21e46757bf04729b6d96fab8b3f81f6d4ad5203520800ab66d72614f83c16594fd6e15491c7839130edbd0b9d46187c983f942d76fe88357b3d824462e12a35a2beb2507b24ba2c74b9a8b9150e65d6b54773c40476bd77e8a280bf97a84df906e12b361c03d71423d246549e38c4fa2f514273ea007173f7b06d3b788e4f8055439f2f924771a20319ca34ad8440377210ab5659e3b3de8b5f7cba603f37deb9658ca2c7572240c5d4a7739458e8c4fec7de84d57c6003cf11c2a8d87c995f8dd15097725adb7b41d8561dafcf8841d5bbf359954d2ac18d778d9ebe97c22f47767727c9eadd6a8714c98fcf46da7e04d6b06f4c88aa64f40f461e7c29d58d17f594ff353bd2eb3a5936d8abdfef9ef4a35462355d9e8c5ef1ea81fc595eaae32606c5477cca728fa1c4c536c4eddcda6bea2967fdc0c78a23cf5cb80b223db32f8c245630f4d765fc018cda9b2a6e9f982cdc34d7fbcdb000383a7b2b4f33513e7332dbe9ac9b9afdf41838722971d90962375ea38eb96ba73651a1ba219b63fc95a4ce446a0a4fbb07e4f415360d896d8bd993794ddaf5cdd25966a4bfb7a083cb26b98fca6e3fb2cdb153572a7522dcbf0a237f2761324303f8ca54e50e1184325719b96c332fd4f852887d3c69308f14394a92a8516b71eaaa949b4b20342d9579727bd4798ffdcb7bbf82ba3caa39fdad4f029b9bddd5cfbec539e5d6b1c8236e9994248c9c5f098ef95d69db2daa4336bfc4be77d79aeefc81d1f1bf8f1a9ca3d99b42a9ac6f2b3dcae6fd8408f193bfea07ba3973ca27faf42b30f15d2e104f5adc6923c4e0ddbcaff6b2489337e8b8b97e4bf462fc17292236164a536f1635219d0f6c259e63eff3c1b0b34dc28f24e1c3b6d29dcdd0585df7a126e4893bc49a1b389aec3e9554af2987600aca1e9696945a30ecec4c9432f830e2360180f12fee1ef9b195c3fd5def02b6884c1d88d339715ccf537f70c668217b20e40462449909b5b9c47f6ef5a028c677a3619d05f04a4a4cd2a10cb7fd88129295359a7af6ab107531b3a848d0c6d89fb9e37ac7047deab7fefb2c1831d7b885bf7b383d9b507551fb4fb22c5c5984a89e8243a0cd507d56d951e155f30bead5d3cd2b40e82495b9b4ce17f68fe450d9a793dc798a6f42e372d3326215f755a6d0972871f67cbf0504fad51cd439109b20c24955546faa7721be893778ec5c423314adac7a271359db122b775705a6708abf4fd98f177e0b5e6b1a75bfba8fb68257c1877f1e995ccbb911e71fffa9aadb4751a7c2b013985cb2899d6fad4ef30e3dc0fd8700c28d98fc1172ed692a060e48da0d67ebabd3af8b604846dd37949726f9a28073e1c3edcb9c0c2c3910a77da228c51b547dc9f947576149d87e7e1add4720ec9ff38fc11667d3abc2fe2312f9552c3549425adda3be85cc949ceff746688ee444a57f916149ef7128b8339a8a1f0389ec34ec2f9f89c13df2a5a8c0574c580bbb3d88c824ffc1fb870658caec22261cc3aec04086ba2a126069d0c8d6677518884cdb85f844ac3d3872d61504dc1732e29335a3da1d6f12f718a81e587b1927e70d4d81506a1aff5f31ff15f0ad787fd775a56f5b6b494adc46bfe6ea305434707dcf298d44dba9ddfac4ea01a32a5f788f707ef5240a792a287ecf344f439ec83f270ae5a4d143caa208517c5cd8b38b705948356be323817e162edc4104a6bf9862139198cf6273a28ce88a82bebde6a7427b508cc1b6a5cafe500f56f7e75fe5429b8ea18ac62a8fe410cdcc85bb913752c15741e86c3c57346825954c6b97dc77d13057c455150ad9406b702a30d103934e47edb27f0750bfc59606b824fd6d48c7b4b9a2b6257e1b69ae2214930793c436a8daf20e82b934a563723ab29ca05006d8fe978cf33f03f451172e27230cf79704191fd0d1cc65f3b3422a283ebac30ddea59a6ff605680b54bb0b9c9d9d20111eb3043869b622bbe92cfbef303b9204cf619cfe9401798db376c20e56639f30cb203d26fea53eb694714aadbb19ff371079742295b91ad3a3e1a566154d99cbbc0baca0a2eedacf06d5cf4a2353ef7034f2523fef489f0ad166ce70f6aa8cf74f557e6a629c7cc207aa2a73c47f276c5686f30ad2f844a852482525d2130452062d7f2b563884d63170d7567d69e6ee257dee3a0784f65a3fcd01b30b63b133e85529c6cd8f7088fddcdbbbb65fb6e81ab0cd43f8eb53f8673e4c4b8f06eeb55f180cfebe96673291e36f3c83e0c1f27cf23f433c85a553c347b830a13730d5ba1142ff9f6b520b2553a7e2d83b56da0ff673c1246e76cac1457eb151f4060ec5bfc43f10dc2423ccdca148ec1ad02f41927fbb052b15bd56881a3be451469bd3ea14d8771d5620767ec8d2cf18e7a4705d359da2a8a3748377f936fcf9b5eb6f4a3ab1b533a8aae034848e2bb2ebc3f8abf7b5426155292368819e1611892a049e00122d493832279f677c397fe1d5ceaffdd6de6812dfedf90f33a3fd38e5c8c8d189bdb481723b6016aaa41a8895acea2c6d900b11405c68dbf2e1b9e8bd865613ae22c64115542a240fcd538c30250302c27e993efd50c8c3c3aaa3cd52ba93a0c69632161dcb952586936f47ca059a5cf11b7c4e110304d6ad252bfe19f6fcc143b233b38734d5bab8cce749c8e878164db3fe57b95a2949978711eefb32edac1d34ad85a4da3212ae075d4c451cfe1fdcdcb85e2be3f00c728abdef493020cb2e8f56cfce693b26ad4ac7b8b635a536f6ebf8d5b5b07c6c5c6b94024446b7f1e8a35ebe993b9b7f5f0a448a7c646475f2d4ac97af7619a1189e68c54b28456b6c2517178b50e695b8abb86490f874498b49320b726c35bb2ae296049bd2f00f17e30af1adbfc40cf21abd6fa72652db1a519b9b9a4168719ee0bc3957ac934a5d38f403d7bc174e5812e24eafe4a7e18821c4abfea16c893921f7574e4a49963aed178a68be196b423bf3106b7df206c7e479d9812cff67ec51364dc59c61c1c9d19ff593b82eb61e8bfb6a774fa299e88d0a66008b8d4678630f87d343e257a0167b73325b57d6575e03e166ed9459479cae44fab017028e1326b18b2f149f6f8dc8c9306c9492a9595a70c9c0dc3742e65127d6ce0ca367480ce165b85589bfcb14d6647ff32acea3899bd58d02f6bcf30da7097a40a88855036d7018c4611cd9373e80432dae3406f568e8b6de842fa2ba600e22f5d6ddc6c30ed2573b14ad5617fba59e202c6d5d05e10b9e4d00b423161a90f6b78f037ca3584f64571bf3971c0bbcfc7771aa740989598ed8eace67497f2bc18fab377d3be0b811943d1651ac76f55b636ffbdb4d093151c4ef45eb6cf5db6e73828ee67022a6ccf3beb1367771d1a082c60bd1ed6ec8a4a3b701a7fc4b73ac0b2205312b44dc10f314025e793d156812adaf0ca902da3df7c40a18355d7a6bc0a9d6127a0b7a0d51212b257bafff2aa8467a7d83cc75db71ea284658b31a489782de6dd21f3ab12ae0f079ca3dbd0665f761e83d5f47c4a5b8f08c7bb0a6a0b5fa50227ba1e2a3f205d58e38b801c5e4ae835c0b509c432b08390b69816ce6223cc61b15e52042e6f1c15e721018924fa609f2fe190736d755e27384930d984b98ae37c0e7fd8f2bea4bc50d8c7fb01a8a2299afbc83b0880a227f83eef624e4758e37eb5e2a1b774f7f90fafc42697624d4b3e395acff9ea2e31809b0522de23f16e610550d8697cc21fe3f008893c07d1ea9aafc7c802571375923383a5c2c5a552dff0a64e5161b00d4af493a583c6601630bf6f52aa2318b2acd92f0d3bfcedf8f46b798c1858364a3650c318037cb921d99dd8d7714f8f774c7f768e43ae86aff36007462984084f7ee7bd311e22ed6ead64c8c36a9b0509629c9a07a1bdf5c873e68508e25ace64f4189fbe82e1d4b42afa5cc9aba829f4c99a2e724c154c1090f23f47b291ccfa6b82aa263fea3d8f123774b2c0afb39f71b5e9566104624dbf91f76d44e5e611870a34bfbc07b73a8ac9961089ca5fe3771fba20a2932d74dff8637167e586ffcb703c3ad28a6b6f12b7ddcefc99bc2534569088a0cccabdfeefc20e3ed6c2771c40b1e538efd516a6d8fa3c4560c784fc802283a2f6938678425d0d298f5cc3fe7b25c2cefca738d82c1b94dd753ced7e20f7123880a0939a1d6d73143bf5f06cb0b3a1c68034c6d90642bed3b413db1fd34ea652150c37f3d1ab7aaadec05c49c37cb72d47f777a4ac0c722d656e564d2579e39572bac35f959208fe9bdd2ac0b7183a1c36dc869f23141ef0fd65f943ed5aea95447266e39a5aefb6c6f2f9fe2e3031f4736bf0d20b079e81f784f0fad0f3fca3a825068432f4a6760b170cfe5f1427dffa96c6e6b32595869038761aad1033845f3ebd0845095afbfb6f560824cb5967719977f8a37d3668a92cb64f7e9c22ed2e0a46fa817a751cb4c485834c502194966f943669c06793653069326dbb872e72485c23995fe093e729ce9228d7896ef70d679ee4ee2f7856c6ac03634628a82e07705debf6a4799d6ce433b88961c28932cb606f67237929384773e0d22ddae7138214f6b95d6d9641b420ca02feb22902ae588e700ba05361721ad7e33aa9c5503d6d36034ab7ff60673863b4400f5d194180c41778071086d337799ad6919e5f2d26f066f7ceda7f3e58f2c6413e049a6f3ac06a6fb9e479b1101e8b58cebcf76c641223baae37be5d4e6883a72c7380b482b1beb8de32097bea8dd4fedf2700439e666e5c53c59fcc4c15c8347302462c522e9684a08775926640f0c60e5a887d4f8762b4e5299aae3280c230b6d0e974917f90b5d8dda297a63eb685d4fae5b03bd45d094cd6711546e6e7d32120dc04001063032e3b16ed4588d5cdc3c47e884dd12689757cec04cb165886c0aee9516005e0c8d736fe9962c4f092bf9b3cc30a6ad209a59102a21123e549cd06de61829a17007ddfd2d53e24dea8e0d0c0203db3b26eb26398414a57641e08b7e57745932a5f142c831a628bf1071dbf0f31d300802ba129c62aa254494f9bea8cc8b6822b3f0851308eaeb253fdb9feb06024350adff38ed15fd72f86b99c4e7e61c3e7f40f8b58e832d9331fe1ca5d5bdb66126e766f2c0263ece7ed3a86b0faf46296d760e3e758f5ecc210e43f6bf2de84ff8446607620a3e03d273512be1ef9277b2641fc6d5918371f1fa20ddd1ed3abf4a3e5899f8cf5bffbbfecbe053674f43169f59ee38dcc6e5d9cabc29100454b63f9cb0187fb1fd2568dd2a006fc60c1f326de8a025dbda1e8c5330e1d3643490e89086070d8d08f71a1c90f0214d6e83ab015ec882090bc903d1cae8401aca005150e3adaab6babdd6dc817cfbd110cee05bb68960d9c05cc608677552691b558a136ac2c42a3091e63c9b2b5c6f4c603bd8612856cf097e663fdd7d99f4e6e393c2f417f22571f42e9c909d78eca0f00a3b67afa7f5d560a6d3f7c7c325ca3b0ca0dbfab6fd7be51f7bca16d54ed0bd1515d228c5ea78b61d57c854bb23abfcd759017eea433d5b6981fe3f5cb2026cdbb4c72ee4d5237cc0d7cae68a70d197639712008bd869d29ad24950c609c698b371eb8f04c82332600d34834afb0b7a60aa79b28fbf6be78a627e10976679a67c8bf6a353e6856fc74c2c7866eaa38a1230b2f89fbcbe8a9f8a66a22dbda4449f45657fc4601fcc34cae540bb6a39732072c77ace4873c49acc0ea4306eb29ee121ab780369a8edb58417d5145cc97883f9a384a4be2a23ac83c20e2710c66d56bc6034d163e9ebcf8b6c55f1f54cf69bd5f631223bcd75dad3cf5ab5c6b16c0f097ea2319f9ec575fcbbed625c15318bdb8f8e3cde447ffaf37ca802dfc721ad9be933f7c8a5f4c2d1df10ec0dcaca7599cc2f7f4c17f9194c4c469d1c5a4e7a27432bdc0adec78d9e29bfc5149c399cbd19a36b64d9af62f978a696802e9d8fe508de4990756ed608bbe3db0a3b8c2d9d7df6220ebbb273c2825be5f97cbd268d259714c7af10a9ebbe5e9bd41d738aa385470acfe7e44c0b11ba19b481e7c2e4c7e69d212b7e6ec142c5e73f6fc51f1271cacc791184c76a5cd281be71345f87c6269333e26dfddda2e38543f979ffe0e93541074f90ef1cacff4aa22661524b77abd75df9f79a8c4cd0770d1e7bf1d6112c969200de69b0e56c5a1dbb6f6a36aa421e2de4c43eaba88d262b1da368f409f9c2302dc05aaedbda109e5000a304be390c43a997cf659236a1acd0cbc06789f1a5dbbd047eeb11eb8f9a0ccb2fec79eba840cc471d80d1a4f28ecfaa6093845463b5a8a5437418ac9cf4a0bfd3028f9176a9409d10a8baecf33d022727aab5b1c2c47694109564022c7717e4089aacd18cfec5134a4334e1859ba36f3840c36197f9399d5b841287e3adcae9d6bd4ac362ee6603fc692a0b23a3c910d7aae92c3939cce3e7f48e4671e701ab74dfd5e51ceee8f957f1ad6433adbac8d6021d919c380fbd3ec88b8f9ad6b57dae399327070b5d3538ebed2dbdcf12d29c9f6a8039742947e0c7e265f9e726a0f166b4315c17ad89febdb5df4123ab356e1997562ff6ec60a12561df648cfce2c9e7766b25525b7fd54667b7be8376d3aee15eb8c6f3feb63ed1d748d232c029a454bed42e12df69f3e177c73d23570ad67670b99134dddfb97ae011f0b126c8109b237935b593f191636cb31b4fc468a9a35453a7d91e2b58e6900597fed6998b235b1308ac4839727e0ab4b00547cf3fbfcd774bbac4229210bdf908978dc87eba4f037df0a663103f54c35e9c58a3bf4beaae65e618722f1e985c5e3e3209814bbe6196be0c92a189e161fb223bff66594f58541e320680031be104e5eef9794d99e6df12265a722a3aedd999b629f14d18908b59dbc139601cd021f85e6ca9f54dbbfc12cd2fa544f4aacb360bd9b4f0838cd29abeeb9bb0f828c0afbf8382b910a032d1ede9ee2fc54a687c4637f5796101eb3ae1a9044a4568200a55c3aea42963776cbfa5070331d2a1947f34ec0bac78c73a9f6bca383019c8f1c9f9daea8bd1ca737ac848a81d1bfa076255208663c07157d20ca79865d25d158494293e861e199b63dd151d3fbba133ece22f95628cd14e2bbd59202039da806a9cd9243b4801aa9921d5c8318e91e2b440be4da6126be10d9c720a4e483ec7e609fc994a88f1facaa7c01cbeba602f2e4cb606049aa6544d6c00426ca3be84de4573123522fd278e9ced9e221991f83e6a73f3da0046541b7d03b05d89d557c4a51d0c706bdc5f3c20eac000846ba71512d609c837fd87414b1292d8e2759dd45f1f418833757cc9c90a8ec1954282f1316a5c171f8c56a020370d07f5df3f1a626a38d8fe1089cce644cb2660ad401dbfbba66958d4a9fb97ac50b89f78ff1b64bd69e174c5b2e3408258156a5301f2f24e95fb2f9c4fe1748671fc114336ca4ad53cd7799bfb5b983862ae1d87ea87db19e41c726867f6f327a9099dad41ff4f3cef32ea82666c1481d7887346aa9d48836ec88e35557458c3c5a8cbed5eab9f2038f13ab178f677dbc9a1a121514d1fb027bdcafdabaa4a23b39000b6066721797722330ec6047c394fdacdbc94351e6e91a878d40d3248985b86604660fd2d4f6a388f1c6cccc886cf3c3fee205527c79009f0f1375b9315b0d6e65c2f0851308b75f796cc0734bb6e4a2f5e4c06a4be6ebee5f01f82b8f690525a1772a0b11cfc67acad50dcaebe012f1e49ae682e5d6542948de65d135324468610fbeab373136d831ef953eef8adcce2c769e34e94ef742fa921fd89a64b71886115a3bdae10474280078fd5ba214a2c39d10da8fee99fa2dad8fce61c076f9355973ab7684e3a629c16fd6a0aaa8ff065dd26d5f926d7924991a0a10186be98c18a26ee425818be2e544499e52d97fda85b6c2a3574cecf0d44520b4b54d5c7c00913ca6a02eebf3bf08cf568516ebb566b1ecdb94f604c7a4643894e09e986446c204bb85ca3d7253662585656d26e67e0ef585861a2ed4ab9df3e7fa1732575f9b4b6f708703589d81fff4aa304e5306ed8d6891f16cc55b3fde3458210113cd7421906be6dbff9a18234432b291c5f104174e49fb95cfd81ae165d12ca3bc30356e40ba7b6f31641abeef270df5aab1f908ff1965d7dfb3f312df191defa7728e5218dae9e004e16eb8eac45dba4300201565b5189b3c761f1f8b92f7869af314a60fff34fa4016fccf646b8efa6e7ef7bd6347263e1d18d31cdf12949dfbf253a7af593b3493a28d11dfd8bbbe39b10032c19e4e2ec5ae0fa6f069ea2794b2b18b1c079330b6bde94268265a8f8e6f3ea30112433f4cdc689183d7daf77b28a27fe57a6decc0293d32dbbccf1f604a1670480f8a616d9328b2841e2f85834b9ce7ebcdd78b7eb414a668bb41eae84e0d1cc97806a3ce8657b1036bd732900cd39a9575497a9748b50ecde6d1e004699405f948c78338824a68731719f7aa6c1055c66d62d83c2b64c7e9db58915e60d71f3597478093d596f63f429944b3c9e9f689c728ddc26b7539ffad107bfe24a7b69fd0f833a7d2c22a3046a18d4439bdfce4d8cbe899733503c0a40fc895ac6d77575c9aa524bb475549750dc1d938b40e4bc7d0c9e98fadeff98783b8f6406e2e78ff90519e5a65927376333d5c74431e43ca270f5dd8e2e5db80e2ebe5fbb03f73d5133318611092c60ecf68f1a60967d2720c118451ff787944741ffe7ad2f9f1a019e96e4279d8e282c5dadd0ca69ca095a7eba28860dc46295de3acbe82c85f3d85a9bc9f1f51c80ec4125703d5ed935fd182e5b761b2cc29a2197cab4815ff1bfbdb0d24d9dd35eb7714e4dd6926f9069e730f8a124a75593f08368539ef3a9761b777193206b0b06d850cea4353e69c1615e95cd0aa4cac8a07c893b0d6b5d6d25f8fd1adb9005522552fe3eb89094ff87148c1e75465926bb05d8e646faedcbcbdf900d979bdb682e3d5b307b5d00a9f5e2be91282e6e9928d768a49650bd955c632ee2d12e36d7ca8cd3f94219c9d3a7a292bfe4e3f65fb3bf51d8eadc4bf7007a9a61b20d2adc36a9a927632662f12814c8fa81d17540be38642e62b092dccaad611d75d49192c4356b518046474ea66ca1b8f9927350fbf13ed91bda62741dbe765f26f5d36e878159215d1b9d1716c32b5a355561da07c77a6b890f899a59076a4bfeafe310d9e52aa7673cdbff6c42c07eea2e5612d99eb23b30f953f67f18677d7ecc6cc4a1832353afa5b98f04c7edcb1fb6c14c05a2ddfd4d3bc785315ed5687d84e935c7f61f9e0fa2921ca1d8748a5621a75e617c356e2c51124ca1a570d0c65f142b9cf2dabff7e6ab43844dbdf979cbaa5e79f2fba4dbb4fb57fd00266343725ae7086d98acb46355e7ebf5dec42f68d24600d9dc6605bacecedf3805c13d584a73453e37dfbdc395608b3d673c2e9ca6804bc710f864b21d98cd1b8340624db790ce73b0ba718d18d132c6c59864710bd298e6f6e3869bf3df43e1e070f59ab7e9fa9edfe75cd91c65dfab25673faca8bb1833b25697aafa8470114f80c95ac871fb283bd68587ad4a9b434e525860cc424aa47720ccc5e8f2b81a9b111df78b4e9f28485abf32da1c46f275200541778f1932b36eb0239ea99c99529b8bcc1a3418cfb85043007d4e77b0d7431115c7c3541dd046a0d2510ad7a18c46a6da293491541a81f03ce480b415de21329876f5cf3cbe0ac1f6a354ebaea4fa8f2e57e7994065d2cd40f1e9fd90dd986473ab0136e08ae52cd5bd99270bbed16d42870865200f278f411e31d388421f00d420ca329912de7aaa70e1a485e0c9684d92880569598bf482625092c437f5cc073a2bfaf741c4c4569e71fd013feec853079ddc793e5d16ae070c7a336bf339354bd50a8ddcb03d51b3ff658eea104cd14eca46006f110db4c7f7f55cd5c66f131bacd3721968ec1c66f4d2d002440912b4e119a0a8a63c8d6e131572a16704bd26d753959b421f7db8fb4655e70d0e2b5da838801f4408a531865b5dc9b8824665977a92f00ce60aaf178cea83b75a96766cbc2f95532aca1ed9e70bd7f1b1995752c5bb52c5301f7c96678dfea4775b7c562d9b64134d452096287b9d0e36de5e56b5ac2a8884beb1b9362e6349976c7d86bda5ac4427b42b54cbda154ecd662ca4bc917e91cc8e6f84ed92b9882c76b0686f66319d0b53681d3a5217acd89fea58a0b1e1b82d0860c65d7973407458e9cae66fbe5d20c0a7aa17075db4a81c8c3e78a257979b216282b8ba08b2ab05459aea30ca918a55814bddbdcbf3e92b38a64dc6274df957d1421a14484d324d00f04d4ead6a75f587beda6c546183ec8675f4353d4e1d0daebb1155e40d3c44705d9caa8e78faffd619153efb6df5b862e4d8c01af32115d4ad1e050dfa5963e6216c55d68b6ac55d5997e688ef78ec8c63559ab53d19eb33a208c1d938561603963203b7fae8df3ca8b2b22a01d4b119cf590bdbdf288dc3a696511552ce75dbb90d021b988ea73ad54854e6177a0f23cd506f1eb96c752900334ee92a60bffc3bc3835ab98af1eed8b9ed267c93f1a69c7a233ad63b0ad4b8418b0951f8b6b17cfe4624f55af1a8728970fd4cd1a2eae75205a281d826d37da04ce3a32263a629c4703d6f2b4670edb607d7630c3d70b09b90ea4bb059e1fdf6718a5ce24cc939474fbaa1910190ab7bd3e30b066d1eaffdc1a929caa35e844f69d938e96e3fb1fea1319c5f5712457780c6c089752b59849b7a824bfd0fda7dd1c37595e1654eefecec6fad89d3ccaa85590438a7b93663f9af76e55104c2af181eeaefce568af96890bae18149c389f607b6aae67a042e78c6d81f468eef446b89007ffe41fa81cc8bc4349fd0231e8fcb63d4dd416a8bd62fbc7093890adba843856d6a746ebcfbbc8a7638f6fe7ba0277c603c4a03a955892a11da69218f6aafbe1da5ca59c2fa49b0cc2b863d3fceedb9f03c1bf623d2570f82346e0914267819c786d3400053a6c4434b29381bb0fd10ed1351f45d50107848f3d38b24cec6c7568afa29eea1b0642344c6d8b0066044038f824445272a7882c97698d3a10995961dbc36fd4f50972b1a02babf33fd0fb23ebba48ebceabd9044a3c1c06ecb8efd481b3d687a22707d5d229a74058d3b442578d90d7b22a55e94468cf086886c050057fb7a7a7f61c4798654796870910eca6171dbb963b81fbb0fb7ba749ab4eaad05a6c6803ecd9bf0bf54e124493fd5bd79228f64d64fea2c95c44e6c25ba41d9445eb4893f7491110f87e478dd07716a54b77706bfe63bd6c44a652eabd084aa75b5eff270657180ad214075d6915cfdb844f418a8c8c6c052bbbfc9d42589bd47072a08352c48b08f3ab0606a42b50fb4c0cb975f3d9d8d450faa6806de01e2f0eefa39069d4ed98485ab7fb66de5a063f1a26b1b2455c33d43dbc1951e233de82188d37fa30d5dec191b75467b223c61199169b0c9f2ef5b648823ed7295a80f46cc8c3db0788df03cb5529bed94052451ceb8038166e5938ede55444ab68fb88b502b980a17e3c0c7796b86bd707a4af628d7dc688b6a6fd2fdc54c641bece03e0cbe8c7bea52c7039b5e889d6e686e8927ecb547d8325fa802c9f4a1fe420a9e7330fecb266ef9be0427e61de4054e902bc64ab72e9de9b6ea53dd37d7b88dfb32e22c42c22879b8b026d4fc76de9f4d19bbf12566fa4394dadc6847e3e7511b884d56c48e41b9685d60d92773ed0b77120655c9ea02b8cefac1e025631ae028d6e12a40eabf2c5a2e835170723a498b3b59993d8f2377234a91cf5900e177abcab9728b9848f33685e085005196fa15955c765077af82405d0ff4c9e5d3fdecd1adeeacf00493d76c3ce28d1bd5d9871170aa9dfdd9c7e76dc545bce5c60fd28cdab7265853436d3989d5ba95e8c1cbe7300616e74fa52b3d7bd3a7569a6b978b6f0df469fcb3813c918feb416dd67a8d8ace931b839316710d28a0fdd6e2ba4278e20abe238dee331489138917266d38ff25aa4f781f653b79eba27815032dd18a618b8dec0f9a362bcc4b8a53c4c03213c99d1fe77bb8d6e92312ac084f887b9e2cc684683a848889be9f6fb4f0f16deceb985165b223d88e385b20643c26baf8ce6372db01156f598d41d3b461d8f13fd4da44a8e603350540bc99c392e7b6e6dc6026a53d190bbc11c93460bbeb05ec00d2424490f690228fab267359ff13be6867b721ecc60325de2d32b8cf62674abe9202f75a4bd8d3172bcf834931f62f75ff79e37d322721e535603625ef06501c094b5e1ce96b1b06d6dc51d64706188f5fb51d674bf1b79c28b2c7c1a81e6f779ad3c4dbeeaf5dee0487451ddfd849ff66b07100451181a14091e4af4925f503181fc76fe9395fcc03463a005cbadab545eb7caae2aa530d58608aa70c22d0fb7a98f0b4742388b1491dec98b6242ee6796da37232a4c6f46bbfa465381eedaf41a780825192e47ddca9bc66871c2e42694517343adeb8df19a4de884ae213aa25ef5e8b4ed3c0100ee0a6ed58e2d3a4250e6cd2a85cb1cf4e84585ed292b2946f5ad7d39ec3f002d5b23012f70fcbad44e77a68e6eeb0cf3628dd4c541f030ee95c4fc1eda9416ec3d230698e173b5472dd9b755e949b184f65da77409d78d9ac1096117594d02bb821aacde1078ae719ae3e4cd946f7e949d458161875a105d01112a1a874726333e6c476b034145a3f78a16546067890db9b4ec248fa3ed298460d868f0d80ce9dd0672478537bcfe82c5c820bba0c1143e46af46c77bfaa36d2c1a80511bb68bc49c9c2e5812441c2cb81b6be4316b35c566c38aad678165675412d34b58da9d4599af83696d5fcfe1e383e7bf741330c2220b794b8de8b3076b10554801d38a86d208e6f41607fc54d5ea62b4618fdd242176c51494091fe2d35dc35f9d0542f91b26c3d14587ed33c6ee95107061a00629270ce03612fb21257734f1ea5f28962532bee603a58aaddcb4a18a86469b4919bc1ac644b2af8afe8c05191351a4bf641d1a7add3fdd4379e98140cec1bd7849192f03feb0db72f8bd97928d37ac34c6f439cd1531ae350951c2527380866cc9aa23f6d8092d918ffcc3eea66253b4f0600179c4043254b34a068ca48f0de7c3c04d40c8d73ab75edacb998f6777682673a6bc2e1c952e9813882aa1117bf6bb58c375304695ab132ebd9d03ae3086c22dac890813f17d49336f1c15ce0a622e8822f6d3014ddbdf955236e7b47b5695aeeeed7f1106b2eb6e1b3fa6a90b0e9f22c55cc3c45ad024697bd4fb62a36f375aab8dca54dbde631991fc93143441d9c236a87b026f1b80fbce5b7e689041ce504cf37adda0d61d7656b63488fa85c428e98d3abe8ab896e4001b3e027b93a589c3940a90e6e2b0d1c8e3b6237eb57438441e1d83634de0831c6f5c511c808cc524a95a7f2e5a897a20662e1efd357ecfad244fc3b5cd3e58bc48f73688c34d392487f29614fde9a46767099f31080b1a4eb8655af576aab7685db4c651e8f63b866cefa3905fd0fdc57bb010cd0a6e31a0753f10ef277b173a6f88f4dbbe2136705faaf20860edd86ec965d96d7b40a0d0cd1aee36b4cdfe2c97860ab66d15dfdc04f988f47a837ac06c41c0b24881a6fde04fa91733602cf89c1e8affb18eb110a2c06820d8e513327dbeae50d9b657e8b7a9c5246c3fbed6ffa8ebfcb4bcf5b08913dfd823128103ce8ad3ae24c6094c0979f56924cf6f83b4ac1b2f9b42af81f0df509c9769b83c56b686e4f0a91b03da2f865d9717b1c12e8c4bf1ae9f44cc237613a28badee5378344444da313c397c222f83e31136f4d50605548ab3e99271a95a2f733e66bc51221d17035aa042f513f31bec03741cd2d6035623403e2925417b65f67961f559be7379efdb9ea5ea903c769051596e21a80040c50f66c4668ee3a696e939a044c363a6dd8422b38c1d5ec7ab39ad85be454c8cf87e5f36c4a7b71e8a71e575430ab0964cf07ec9d9d7165dc559e81c6414c8c062b6fd2a356c2e974d4e6acf62c983804b6bb8c449ed2ddb979d24b06eda8c2400b4971cc0fb05745ca8c0bc109824c3d4f8224b29e153745f99f1f9b8d3f4f5152605df4751988eb4523494ea3865d620248055f6c87a12bfd2aecd885bb33feed3f5699af9ce4fd84efb071bdfe409c03a5d864c94a30d621c33371b22cbb8cc7ccb890dc2ed41808ca24a3357fb724f29ea8968ab8b14019607411f03fcd996b78576c9bc5af81a789a9f2ffee4d1bb1e47517979b52f15474da5d0e5c032d46ff49581579d535cf11724cc0ea2419b2da0e9544c097549140469caaccae17f39b8567565b0cce90b64041005e61b21b9f95758f7d23de0bf7016f054465206a4c472f7aad4f36bbad53a7b83c34d4a79f0c7d0f3b3eedb118dbdb0d5549491706cced72f2b70b27862486763afaf665abcb89665336a8bad66be82478b7b8c8a7126819aaed3b3a4a4da8a867704a4b8f7a23b83c95e1ff9928255064bf123d22e2f3147f5b669342bff354f41df4ffc70a3147434be4044b7c6056b8b55014e4118ad9378fba2fa72d1b7c22d78148329e05c85404c66356f38675b259a61c5727db602e91961dd8080790710dabf9a7abf138f382773d1c0704995881e3ff6faec0b81b44031bbdaaf15e16fdf92d738bf680b2f1d6214dc52f8c85e12c0eb9c7784bccf4485f38b694287891140f08cb9fcae6342b9bf596eaa0ab5176b198d3a7fbaf8356bcaede25eae27249e352708f7b0b4210e24cff27f8fd8ebd60fb7a4f8275c85006313d4867acb5a8a2928688cfe88037714d9760980b31bbbe531253c694a839773db92eb882fb347e0cee4465557840fbcf8ad59a8d07c7b07d847a7358df810377757ed65b16fe1d99dcb664f0006535cac8c35cf8b958ee3e692f1c5f41d0be494f05b9a09e626e653632deb75d2667813f29dbef7a975c3f273147b1a31c3c616024b79d8e99b44635d6537d9732f80a303ad31b820230d0e03981c65b78b4b7467de2077a8421ceea36a3f649ae54e47282496af1d3fff52ff3698dc1b75a4eae3f386a9205d47c345159da27291a26884a61a6e7a75e87e15660344606ba712cb3048255b14721e8ec55f3dbda759a8ea52aa27f7c16ba5216a126a661aaa622691c770379cd8840d71a6b8e631337cf421f868daff349c5664d1bdeda29eb471f11d2656cdc5cff6a8014c178a60d3b9fecf3cc18b3ac67246a449bc801a1b03eff4b04a608227f3a77c174c393deeb7ca459d9aed78b346f8bd064a771ea051c7392a5d8e5273bd8a7d4aa12ef9e231e3b529b649bc6bf4728eb80e5be3c5d037c078366c1b8509297cf638d8e245e364d56b1058ea09f9bc5e70ce3c9bf329937503d878527af1018845a6165a544727b8cfa859d093132212516277c59c76bffbfaa33cf6b5dce7134c3171a8b553d46d62380322916004fcfa81642ee62e99a203fea999db0fc372447ecbf419e04a940df63d112331fcb46c41ae45a784af29a8d685fb9b2732b86e0e888a2cb97f1e7bdee0128d559757a9e4179b5f44b587a81a609cbddc6a249b8f78fb087c478ce7e854629fc551e092c9e6f590a75dddbbe0d84e0719f23c10846c9779fff52c09082d196059add882fef36adbadb4072ba4dac94eb2ea2404e8af5c7048c1f9e8ec92d254f0dce0e7679a3f7256c055b64888a4c14618a117db5f12a003be944c78342a19262fbf5197bf03e46b63570605bab6ad8079e776388e599e1baa6bca2711d6542280b4ffa5fe8f2236d393cfbfc255b077a1c2aa0501dd907a500bdd13033e0812404fb18af57d59533170d4eca4fefb0ae1b618a2115c02d114f1834a20f14a510bfa8a29ca06b648d75c450129671e76e59e61bc8191468259cd26107dd1e0fecf53add5954f0ac03f7f558835281b9879ba8c9a37c08a985e5f8b4905c32d8412b189a913bdc3e1fe5422e0d5e16f5908355ff95ee87625412ace3440e155c242de5c631bc2eb361eb3d893124af1091d17b23245e172a9900992e1c6c511de2ff314ac6bee116606c692d0d5b051c53437f74d80a76b1d12752b6ef5c658440389be9cf28874574e73f7ae8d7216f6931b2a981fd01411448af70f0d826f29b17827ffb735ec989b7c6c905a09e2bedd101c1815c9bcddf6069948938c7780c139558cd8e85b45e1e3031b202f5832579282a8e7db6cea984f5a60f97bc2ffa26f57c8d13f2cc3518caad26897fb5b7ae2088beef52a29bcc46f06002757b203f34915cbf1d7149b0a7c22463ad587cd1cb58d16d09ff5d138cf4c4ba4d69fc01bb3fbd546f48164cd52134bb65bba8b367e32839f2f92f43369becb8f6e02768b4568e70c5a6efea2eb51173c949d19f30b1df35a042104d638dad653fb68bce1df2ec37d63e6e3cb52844e1c2bae59135bac85dbbb5b45bb5c36484e191055a7b4e3e7458853f27dfdf1e18768c0dfd194c1b4c83479379289bda18b3348591dc657504b9d2c80d559258f64e2483959de8e365a2a1f3683e552156c85b201a066a6ebada6319e8e68ca63a91fe49c79f52b66cbec68f5baa68e6777876fde0d2e9ea483207fb302096567bc9bfd7976446c7ad93c2f172286b54cc367ab6bcd018e58762aa2b88c73a946c9ccc3a62ed555ca83b09ff8aeb87e3c760e1201b1d21aec70414b3ae92229b70ce167c3c844aee26febdae5ed02503d854eb9be2f3f3f4bf358cbf4e9f37061a7d1ad70badcc84e9d51643a00818a1a149c7c2b2ebf916c9d7e055444c93b2cffb72b47ddef98ac5ec5833d96cf929077b16c10325482abb21596103bec20518a67730cea176ced8012c935b7a5b1610de31bc5ac2afc0f598123d2075f79fc0857af2280ccee762738b184ada44061a76219362d899051ab4ac59ac565e00c6c79720e1889371d7303fd336a62366b15288a7a604b7092a0637d05b3282072078392074340318ccf57c240606cc9923585df150bc098cb96004ba8b3850e05c09ddf4dbbbc4812055bc2a80962931479be5be5b81c33ae5fc85ef9537e041b889040389ec1eb1e4b055d32ca1c989fc104a037cd05324ffbb2590a601a2998c4b20a477e2a829e93baab92f3d9838fec2c3b37598ccc7c959fe2c47e1114c375d7e737a99e83fcff610ba7ad327302c8bff51cf90e79b1b5de7d0735d09831e10ad7463a892e3b07b5654e9e17214dff020cc7233e795f8ca0d85c860ad82e7e3e1b69db90c81ebb6fa0ec6187f5b89181dc7d2047e305b8a1981a2935b11887f3c7cf00a19bca887a25481105799947ffdc2e6c6d540b975e80dd6f2acf3cb2934a9fdc8a231482c4748b3754bf4e1d0831df49dc7e8e9d11638245bd31e2ac5d6a95828c228c120a3943e4da0ea5c72c9fee7312b1741b0a7807f3165d00c159669167bce6298325f2624f67173d64a1fcb682e71cd337d0632d99934be2df943df86daca9e82f4b3914d9ec00c8bbb9f5669f658394dc337ffadd00de11e80496b9ecf3a927f3a70f1f848896ea4a4daf7f4030194ef7c74d725172da40938727ac5f0767f25aa31af3e53a803615b5ce0e831066e9b8f40270cffc4f75b70dba4a61bb5b790dc02bd801c82f0fad153a7ba2832f9d4be3525c2ab64133987ec5a6fa78837dc509fb2c0c095e960a6bd3865784f94560a093a26a1297b5d667f2497c953d2f7ff3b955dcce2a0129cbc901408873e299f51a9604c23d9f07a20cd2625f8797378244a0c830ba4aa6f076a97e767be36ee67e90fad195bb5c0fb90634e273da861c4429695ac51c596aba007468cd197ec4ae7b76be25f31442edc73766500ec6f324abfab460d6c4288695b066c653029ea04c4c8911b4238314d5f5437f101865f0e0651f839da06349800a4e6c54a656151c103ae41e971b7bc8f92ea06f718edf09a48074951b81cf5c0545b21230c2333d05a3d1c267f6f3ca042e9821f9434536d803470f8bfa55635af8117856bcb8f96b1b0cf8a8aed5de77f53b3dd7245c3d0eecdca080ace6c1e2125cef5931642663990255a023369f3de543b5fd03f5cc3d85c65a1c23713013a6fc32e8a3bf112dae11e2634d948623f6516b68504c3ec7d9b8de6695912c96651310f059aee75b6ca6999fc80e5326cda3854d487f6d54283eb278e009ea117c2de40a125cffe2de78fcea035709cbcf8ce78bb2646e07f77c425257326cd1fe5fcb92ee87871245b916dd449e57305ade09ad86949efe259f876dfa71e5e4c0fad06bfb53503015fed22a3054859f62b747dfedebee82e5407872e59f4955b3c5c573c82670c912cad72edf9234e77af832830cfefc76f1a6396bc8fdb6419cbd11569c7797b121a712eb7c1aa6fb792feeb22cd68b58cf9cecbc304fc65218e128e2b6b7a94be988bede880ad9ea33cfa6cb98c98070f29b435f7ad4de1598fee56dfb184780410344e02bb9d504d404288540d7a60455238b18ed2f4887a9fb5c767879bdbc16f50eaa4f6da3d5094995be8779655bd982b952858a3ffd44a1352e1232b0072c723fab992ced142d63a2c582b0369b397279f9e3d4662603235f2c747cea78e06d607af59df87d8350ed0a06768976100665ad3e00a235bd75ad99f9a0294b8de77f5fcb3e13ed09c5a19788ec4e05d27fee5a9bc5d490545f7760fb38da668fd9a4d57e61c5bdfaad27571ad981b3b7d23b0b0a3d18c4066ade7a0864c4f72d7602203c16dde3ff51ea6cdfbbfa08db92e165274a136a66fead4ae872d3adb865de5ef79eb11f31db0b97b92f89dded1bdef3e9b095c2ed9a160e4c7f6dbf066f45dd285399085a2a113711754fe8ffcc038c12ebed81ddc470a6cd2661434de385786f6239fd3bf935fef58cdc8854ff18e10e7db31e9a823e67948394bd0091ba8079d7e6d061f1ff2dea79486861bb02efe59ace4bf349525dc73fb52259a1b366708cf94ce2a539dfbf52e1c579093e1fac9c631ee3ee3832e6a20477a15b4bf98d41f42e7b24025e6a75c2045980874bcc6641e707684d08c8ab313fcb3d156c92e2dba2285c3b0c0a2a2f8138c63daa296808bb4386a7d8c4537d0aca30f2d495653b5b38b5c09af405191390b30a875a6da91dc598f04372585c0703a0755cd01af18b330dc86b254d9f0aab650a71e3dc1baff60854ad3fcb9efaebe7f147cad714d0f7355b82bf0171b29dc29ae321cc13f442a893fe6cf3f200be665c1d33a6229cf6b415125ca1b2e0be547c70aafc9713f37599b3a5825676078ec34a6804f4ab9f77bf53ac662bf29e3789cb32e2e5de4ecdacc20db98bc647f8da1d69368669e021b0214caf681a598ac67923a465f4cc0a448a93deb7f40bd7d4d662bef37bf9e0a6f092f2860af2a64cfecd39f37b74631c3afed7fbd343e8a2a7be468021350b7716c4826182d7d59f7ad1de3289764bc998e7e5c14e5b3cdddbe71d154813fc48ff87a2088036a5eeb806f367393b8e4976b8853a1d157fa0a4aa2353a28506354668509dc561aa07ba83cfecfeef8354a1cc9fbacddde97412f77740519d7eedb9578465b2983374d07ffba5e33ba307807a054bb63ffd65c624b998d365be160a358f64b4e69c9842041d76f91be790beceec8798918c50a936a2271ce2bd4e0c2b7a2147ce31b034c335e757dedab602e379cf9f19fa2468951677d2f6a1eb80b2e5225f158f0a3ea8c58f58e4dfa43f42435a0e5a50a35273e0918f3b3965a908deb596d2e34be0d25bea328bf7add4174d9aed39d9412e079c37edd538ee0a99c2991a86cd94deee617dbba0d5035794fa54b7aaac9d89040a6491a3677b6e57c3bebb6c16c5fbb71305592dcc1360fc3dd69d4b6296c0b10c52385a0d02bdd5e666365317c039dee791acbdbc5fbc6f93a05054da7ea731c383b174d8aa835d905f8890d4e3e0293d20e48331f6bd6dff64ef0358101ba6bc0ca03d7f67319830b0bf980c4ec31227c1015f9ef8c9e26c0b3f2fee2d05af198e57723c219d7a51519e7a17977a0da672609823fb88ae33ee7e9ad4f82120d0efb809d440a4cac92eb2f30a848748e870f96e26d0f50bc270d9a2c815cb03bb02f83b5e5afbb70f4dbf74707e5ea9a273377b68197ced15a8b92a95c55e6872515f6e53721e4295e1c7e8cd371a145108a06ceaeea82aa3303ddbfc0e83e1adc88999701480634534c7466e65a57d7b4092861c816c4849d7fd12f513477619cb58557f374c33865a771dea48c8202d5058518ba6142cd41f0fb1fa1b09acc0c005dbaba77be8b1b612dfbc862d3ec8aaa57de86f1a69f9dca1ea217d635c9d8bbe1c4d7e92d512b9f002d6a7507878a9369c81501019311fd9d65a610a28207913daff2f9daf1eee52fc8c007d26ad3be8f6b798ce4b48541fcf864cd05f3230e759b1693311978460b9649fc5858581ea0d6befb97b7864a0755f1b3ccb7c7af25ec18eec7174e084877331321cc42c6b7212097761eada1507b411bf490e0b855983ca52d937087be89aaf10c5a11c98c07c160103e096479cb9d347d8c7ca998cdd42524a9427359635f88cf5cdc087797a324f6a0f620e12828ccb36b8bcd71a503d5bc58bfd70902a3437701fbebe03cf904bf63727fd443eedfe771252131a380f2efea29a9993bc4c77c401b38e84111c1bd32b5c1150433a38882f59eaf43d7d0846a3c903ff92c85d2f45bd49233ddd3623593f6e8e21a281cf65af9fd1ccbef6c03815b15f93b8803d26a60e0f797556e444d715be6afbe47dcf3a9e4ce4c05832b854b56df2e12e0e0f7c20651dbc839065de934109aa914862bda1a7e615831fe235546c9a0ee69d6c19e5d1735eeb66f630b82e07fffcd652af5e8e39dfc101cd1d52b368ca3470886cadfa947d14c3b9ed15d7b2755f5d687024961eda42f39e6fbe0e5a50f4de8b8203b97b225866febc120b9f0a883518137829918961cdf5c68b775276b0713f4892801d32f353d0759f249b61138dd95f542e0f3deca576291567a51a6ed2e8d7fb377132f6659f0153e21ee3ccd97bfea4196cffc37098aaca2f8b3f0cfaf79b58ccffc32c29b57961a5fe227f9ebb07923759c043682848ac1ee89d849eab923d450231206af358215a0f1628b1bd0b5e88c4de64b53b6c1d6cea0599b6ec8a142a0057f06b616c8968cc1b184b2097872f4d8a1ec632baee6c627065b727c1bdd41e9afb92e873e9430dbc074d5a6f140e12bc26eaaad5951f58ebeeb80ebfde80c6c858969ed2dbc703b03557f3761b4ed7f8978b9bd3fe9e8a06b2a780706a91497e5ee644ba6263e640b51fa9ce97fe86eaff694c07ebae7be28788f6be53a20806d0606a46427a16ee60b0b95b50705147e1eb0bc4a61cc79ec4ea51c4e4394fa8748b03af709a522441f68104d87ba1bc7dc0c90e7933bc36426cd63255052fc717b553abc2ad7527242410402324e6c7170803d18b9b73e6d093996f987d31d0cc9f25d7276866fd7bce855c8bb047d118a41d87f31b7c2c70e6a4769d8490e25ad54394c4d497fd5970fa9a62eacc3b6005026161475c40d94e639f441506bed6e45bdb9370dbb7650a4a6fedb0f0c913142400f0eb600916b1e1f830bc25f10fb412845b40e0fb207de3589aa68aa91909d59805d515d8dfd00eac09fd5bbccbd791ee5adb84e3b8cb6deb50f4ccf9c51a56c2e757d0b694ccc10a9e223c1e94c03d8c832c3a833c8aa0db542faa6a5a6c6a5481b197961515db59b0835dea7da95b456937cf2f8ddd7b608e97258c57d514623f5c2a0ada30018ef5dbd4156f614fc08242c77c201a10d7cfd55303b7f174adee28e320a59a78869af7c48ec9ee152a5e0ae9c077ada34fbd6e520f71cf30c20206d4994e0c9cd5fb970c34f291a4b140974806162781969956dc9450a2f76b84fe35c43253babc9de739f7cbdef8bad91a63abd696a9b5e50a74db56693a9f5a6c41c7eb041bd5989f151d159fd9cc401dc6bd306898062faf1fc8deb345aed926c3ab5a10a42cccca5629c52cb8f682f59e120c0e75c4f3720027874c181a3457078ea0a77a5bb2943af5160f365ccaa293bd068dcbe22e5006e57eb3dc95466216da3d462fd65ecdacc7206bd0b5b598c260d8a288d00e3934572299433a92c3966044d930124397a5deed0613ba48f206df9f8e051d15c19a7d2798d34852f9c2365d198533aa893e0c64772b4a11194ff652bec2d7fbe67b03d9409fd846964357688ae35131eafe048c89e731195b861d5d5f8d94ecf0ac1692a9f7f7708cc2c6021e52eeadb8d8e86670338ae50e4e360f609c03f5625f630a4a8f1f29039bbc4502ca8ad462d68b5d47a1e2804f739614cfe5535234381af8a8dcb1d2e7bb67714d02ff2c08a446b243873d57b0c1b920a2df136d67b7b1ca2eeac9bfd1168e94c1b1ad75b7ef2c804e6261262547da27568f3f1e7f6a3bae08c5500dfbfc292351eb1baab31e6625be79154465879c63a86859ed5f84e4006c58eb7c27f0e66935f12b95f1539bf823bb618193a7c55025ee43887a7b8066702b16b612147b64d03b5c6da822a0198586f065ded3042960141da48be516c5dbb91e9586e031844f24b31ab11c4177700194bbe346458f69a08081345cc2144c47c5e4e060c51a631a08f7e6bdf8f0dae2b8febd7f9b1b8c93334c8945c96c363ef72b2f5d7d0f9d893b8519836888724af5beff63150d50dea25c98ce1292ee1503f9677ae8a9ec6ab5ae1a0e672513c55b402a950194ada0edaf6b18201ff6b0333daa8066d4309c8dbadac8b8f50a9399301b001b96516b3b8fb587b810f1ae5dcfe13d12d1dd7b4c664acb9ea006b3f0d533110e415d3ad7c8fc2e148839cc02ebc3fef0b67353320b61b4921f86a983bad965d37a833d1d2cb2e24ae8af397a545c4541c201f747614761fe6830c5879d0246a015442af16ee16b26f6211ea63790895a812721f585b00aa5fc57846d6151caa07c247ee452e76870a6559927033d8fc307adfa6ea2d748788751d076359f3eaaa3917a328c7d78730e2beead9b4b6e9ea3e3aa06aeb2a6b29d8162f9e1eab80f1c8ef7549f8caafa40e55283acf3f97e18eb76b1b4f207bc75ddc9b89bc5e4326ff76fb7263e41dd99e83f45c05f65d0cff69adaaeb6ca7722f22bc193de66e60ba658ff44980b6d020ab1b9d8bc41be8bb62d49deb0eec5baba45daa666e0ecc82bbf0ca7a772bdb70aaf58053cc8d09251f6704a863f718022769d9c4617dbc209ef331ceab65f83053a8fc6a0aecf39ea738c908692865d73df587480c61d42afb6fb9706c15399d2d2505b9eec18ed4b5ac623d05510720983509a1fd2eb4152df14b640c16b98d0222f976992554f473b62d42e3a84f15bf7a0a445004139bdf2ae2915ba1163b3816715b79fa4cf0324fb91a3a170ab6e934c479b919d5f7f83289f628bbe86e2170c55267c12b0a35b643abb5784bf86591a4654b1b6c2001837dee6859454cf91ba95e10a0326d54f102d92fc77ce9bd8b43f7478ab31c44ba6e29b1817985d19021f4f7333aa2e892d872813e83ca16fd025d4099fd86fabf8309b3922d0e4ac2c6c5ca81bae0c3c8df6d593616421a25ce370a86d90c96115db7e698e279ce51f4e4c7fea76090b1f94b3501bac71d7a45640ce7aba47193fcdeef39e157471c963a82b63d3c5895ea655c06d54ecc4cf060f397789351afc704925529fb76fbd93a80496f8485a8a02dc62694d7d6d541f3bce43dbefe8d167d10f534d61625971ac184d46468c93f829870c1ee5ae38c9aa5ff084c0f5a0fcc6e440d54875d9a705d58219edcea9ef713d64a744919f40679fb7c5ff42870a118dcb7f1ee206d0cd7ca2043585f9cf97efcff9a0ba25533a824d9e8a488d3b1488f8f8ad8a2914389b60e6acd40d7e4bc769eb5748a80298a3a09f7d3b73a394fe4c5d94601bc3f7fcfd8bfa60b859564a24ab7e1d2540f7ff7f0810159b3fc2c653cd675b568fe18aec1318b3e057a1c508f9c445c072b0fb2dad34dec439c971eb8462f40d72acdb85557ed6ed346cdd9f231502d3c9124ff8ba8fb69ddbf22e066c64d0ee2415c88009ca6904abacee61be680b8b7213ff02f05391f20c2356dca9ea6f07e9c8f360f88bb2d2a5423198faf32673661a11665eb46eed256bfff0497cf5b747a63b7b95c2c93c4605b0e9d68f6791df58795f3ba3df12540e51d6d9d5a696fcb5e0c4a053a223425672b34efba3aa2f536e0b5b1c953cc0604439d8f9263c1b00f01be7f4ecb1f5626f0aef952e4423a21216024c0ef40dbf3c190daff6ec198ae445413ebf4d28502cbdac1c802cc4f7b781119bdc76eb6edddf12bd194d140568c603302308dca0c5db29692c7733ba324b807aa47a12578104a89542716405c6d07ec2c6fdc1cfb8a2fef755a8c0aff908888f9dc048526d3bbb1ef5e4e4ce2a4d47223ea2be95e06c1db25da8f77de71e18d22ebdbcaeb8977d4859cbd0f835c120c00bfe8c13bedbe8e11f4970a16a9763355dba197859ffeab5c111ff3b06f3b013df7fee139a930d90cc13f77bd4c65e7553c7a768441cf5d5b1a2a85500ba18d214942fa5eb8fa3017cabe04f58ec61091ab58c60aaa0eb1732ad201be3d38b875d969cb343de15f31ee9f7d6082c5a72768d26a5fe97c12d8909248a108de584df14ce414afa89a7ea0dfb27545aa36663025b23ab62d1efd5e5ceb725bbd2c627cd47dc65cb9a69ce40ba27690cc791304e39120affbe67942d14b2deb3e4b59ad671c166e3df679d6ce507b793f0a6c32302d9f2ee7b2c0a0e52450a23c0164cc8a38379d549934a3a0215cc05291e298304b744ddebffa49a61c1b13e80442ae3d54defdc5a0d7a9226a5ef48e3136939a38a66965602714174f8c2ab376015df8ba1b2032dccb805169fd8fccf17c662972db3a9913ed1b7781e8902a8dd0251af41b2a7cc9b5f2386f990ecaf02801b49e28db9f5f500b811000a0a735974836eef41417f275c55805573a7e9fe087b4d1edda0eb75e58ecce2d8457c6e4f58a38768aac92a2022269ea050b3fa6eb601639cd4a6d66dd333473b92332218b2a7f414002f81911472ab23453b5926f35ee6ee7e6a69a37cbd68c39d0c3e4a438a78b7e6eaeafc6ede702119aeece8fb4112ed26565f8e11ac51fabe3a09862a3f1952e2b9919aa06c902a1229b9713cc85b5bacf6fc6a30a43afb0fcf24cf5d5d0feffbc38b613a5ee35f7673ac7f3b5652886ccf7117dff537c4ab5bf257bbebeaf8f2f9398095347c01c0a20ab8d6c877f1ed1301d7018b962e8307d9dd4329b12ee9987feed031b3b07accc1ccd65a7193425d83108b3f36d64d9526221498f8aee4d4819ce4ccad12af7fa0f997f58bc99fb65999a2d6031c46e7273d624f678ab6250b6b1fc3ec011845c211f3aaf50afc45b4d50975f33d871fada16d5822510592b9a6971dc10975649872fce803e6b008e1dba2a8c9170e9014d46e40a9aed89984ff6cff77983e1dac9b983dbd998af39f2f61ce94ad25a08f391972044380a8695f24d5423595b58603ce4c41a31beb425d27fbd505bdf56255b935bcc7e6b4ddd11dd632c37e90ccc78b25c5fd729a7edfd912bfa17768fc4cc98390c1e91e67f685da2cb9b6ca233e4cd083a312b40a5b06ad628c4b25419b6b900b07daa7b55dd26d326c781dd93a5f03322824bb0dad37f8c65992ef78c50a0c8417bd261ccb10c287b8c76e3ffbfc11e82b2b50527f150db0ee1528baf204340f3dec59781821b9c5a3e88a29f9c32bfe5e6b5930416953b9c95551b19003592163ce5272cd3d69895c5158d982877eb325372b087c76c1a93837ebac861cc2e592060a780d2bdfcfd60a05d42bb17147a81a42beeeab909e82b084258e0d11c775e07e979d2de8d3555a2d390275691ce17de635c36c4920ba5562b10e825e9b8d9d5ac7e2ac09a156ccefec517c01372199667f45dca8bb90f91c7e26c4a181de7c775c78b2afb30d65e7a3adff2cc860369704bc4bbf165f702c8907095c4e205c0f89d84a81f39a1057de3b5ebc0198debc4cba43cf59f7f64452a0cc65adcb65b10af7679170af754120848ff3bcb383dfd10b910ae7f74608c74c4bd4ac7fb3bf5258addb0b4e989769285bf4aa20b9fdf79c0ac85922d8314606b894a848d98aa10e48aafd706cb25d633ed0ef09a2e78f4786f0d17e82f934338ff0f1ad826553966aa7c7b98e4317c1dd006d59faf047a97b3a63690d78924c1beb197e18808e32a1d9d44bba7ee4a54f1502bf9b57ffc941759c1d740ace5d93045f999ac88fe709e8901e36cbd9a711ff6d75c5f5827c9d7d92e935036cdec9c74171597a38d7b8f3b87a7de27f6e67ba362ffeead2c73a57d58551592e96d0460e59e941548d49accb46d9524b6a83944c450d96ba8ef0c79f19783befbd382b4b4c4c78d493c0a8952961672778ac175b189c8b44d0874f2d3d80bcbb97e39ea8e0950da3ea595dbe7f5226e158f23dddb54c81205cf0e3a6cd2a6212cc6b41646732e286166911ad49b64d194aa95acb5bdf578c31a41d6577a62040b9ceb941b9b6ff05f83cd9ba5502c0f54ee6287413bef0abaf001c88302dcf3006ec70b3a5176eb01b1337111e2491e79deb11d5344ce3c6521ee10ab13e9531bd8556f02e15541efda0195132571cd5777787e63c51e6561bf886507466c3f1aea8f364b75523c000f9203db2ec2402c3d14d4e488641c59795067d8ad9e9d56bd1b95574cbfdc668ef9b2876ffc0ed9cc311bafda4e275aabfc3478e0060a5e8cbf4372fa1837ceba5870a277a2cdd4bf255077370abe50a08ece196f607edfc1a4f31cec160a0da0ca664a76c90d9abf59fee2f497a480b30deed56d1af444750cbe7857bcff8ec987f9a8dd7b33dd2c1faa28d00d16d93231fda8020164d85885f9cd6eb833a6257d5a7d4a41e59a9013ce3c5d875595e6eecac24bdf81720d0667a6fec599f89021bdd79b422d096b57f95c2448e86576139eb4d23f087a55b3ff0a9ed203d4b55185e9d100ad03060e7a10aeeea6d72ff5a96737df9a190270d2ff08d6b1f713c64dd6dc3a42af57cc817050232b0aa06e2828cf72c7eeb415146757f05307bbce99d6a72b88fb0533741d366e6200dc1f93e4e5dbdceeac52664b853c3bc22359d62589625058b24d2de321d8b58e4eae4964d23fb6060ce9a9418a732bf36530bec2f783f50e8a7b71849c7b296346af6381f9820a5ec201a86cfaeb34577a23df538c385359a9e5f105b821b1d175161805810a33af86567ded0784085870023ac81dcaab6f30a47f964fc91765ca44cb7a533a6f9ee4d1aa73fdf62839151d87e9d4de50842d180582aedaf846e7cb1fa0b5238ae6f11dc93bdbc9cd5ea042f697923cada2fff8022985b5547db965c3f1c03e7a726f4849e862ba347999a554f6a45ceb1e1113195aed70e2d3cbd568a9bc3011ec7e7a00b0b93a8b1e72401d96c8282118404856e6f7dad9777b83ec4db8a7a1b297e65df57af3557450ff3df354403818aed13f4668eb869bbaa652d02d2a7b8154eab1c1a68cdc491f55d70b89701fb2a1be851d2c7f5275be1279811b6ebd5ef109cfd7e73ed20b20b2d4f717129e109a86ad466cd96861ea261ee6f42c6e44b01b5b2c3aa3e772e36d64342c1c53ea92706495a23493974e5b36cf7053c2527413122017fe3aa1631dd138ec69b6754e4785c47c8bcc9b856d614f2f0c9f550c98878bb7cb070199ed3699232c961675aea4aab9241534dd695f48dfbc02f933a1e478e8bf105d55fea768609f9b709beb916c1c34a7fee3094be1271b7eb852467e3709efb5ccc98cd8ea43c9d4fc71c4edc5eed50eb0ba01782a841684a1cb9d170aacce7074b47fdd8e9441fc98b5f2cabf493b92c3f12b7974dd78336667b67d5ba883a920a56856887d55e2f8b4319133661ce7d61c1fa2ad9d66f840072ec9a8d4fff2aede236daf3e546b9f074b993525e1344a9a7c62fab7a95104eeafdac8b7401d372299f2603e1bc7075ce0fd1850972e08f21f7c84c08cf282a401579cb7861f261b9f161645e2741b46297441ef249cf49b99c90739c4558cec0d43011818abbe28ad3e10ad02d8c964f5baadb17fcc77a7a9a15769552bd82c9c50da3786115a934aabcd39a914d7dfbdd06dae085a325b46a68626b6240b013bd8f51c1bf1f8fb79a22570ca83967cad3c62828ba8d40d7609e7f79ac42afe979fe87e59f59a40b44b6bd60b66af541bd3d5b2290274f0b0d7031c69ae6f71be6ac6d4c996bc5a51d097d7a7bae512d55ab8c3c7910431c5eeabf293ea97810f3a01e0d8c9fa4e7fcda04f8e45ae7d5216b0666bb014be0cec49d1ef322f8905a00f39a0f8368504f11f521e9a5f1f13b69169a1a211eb91a100ece9ad2c4641f6d87145f6ec6c75add23d4cef2f76b321504c9c727605cbd7a2e3c88e8ec11ad1b78d1cc2aee39564a099d3ad3c03cc61cbaf7cd946ce92d41c2eceac219216d0c9f241a3f7ede2fb2b9514a57ad0f3640bd04079bbb389d20f82d2b0106a1aaa937d6a9dced4006547abcddcd10663bf5f946ee2163a4fd2cc8a730c339668118249fa78139975725c7ebb64507b899b40096975f9971806688f5aeaada9685e88fccb8d2cafed3ba6159f14fa9d06d7a62f88aa50a4aaf2e3654fa88df2f8cee36f2552a375fda671cea2905904282483af1ffdb6bdba9cb5d96ecfada93f6129b63ec21437bc7ceea08d93889924dd4fc3c68412f211feca2018b089ca3673a055fc563c56bb99bb3551aed72a13a537e72d22b4f6af38982868c13e3a45d3a33987a342cfa4f15f690d69bb62b3ab3b5e55cd30c7fc6222cca5328c12a724a709df18055baa37158db94383681f3f91e156577907606bede12842db2b5730a963c7ff98b060889f0d40ae47e216fd702edb011839c2a1e370c4d184be7acf6a58f61089cf8ce490f5ec83be68724e638a9710c1d9ea7769a185eb2756b0efe8481278dab5d8dd07447f33ef64e12fcb0b7060772211b4e19f7e60cfb36500f70d393d72828dc30621b31a8b4b5c7a5e3d928fb968c914ddffd815863d6b8d24ac3be317fd967d039b8e4ef72abcb463d427ec7acf7a767e4ccf2a88dd6ea95624713c5e8563dc4eaf13f148f5d816c6e319791ae59a02ad1538a165de45a81b9a01c3569e53f78f6ba4fd7a358ecc14d4d35fe2212ce01a125f2df731d40cc94352161f347807dce011217afaa00bac14a6b227459d32159ff28e00bae163c9e38e0dd0b7372cd6bd0ed9d5fb208eb9c5370e38adb59bb51f830bf8eb12bee59e1b02510d8eeb435eee440065cfa8b7e53f2024e34e9248a8c42c011ee0308c000884b7a850539115d1603734a15d2c165f7485170cadb2d3f41c99045dc169a8b9379344b2f3ad782b44242e2a8af20a099c5c1a96848e5deb91ae30ecedfe4b2dded2fbe5e64a4cfe63c0dfbc2a8fe8f940a25126ca625f44e71893b5eb8ecd3997a98cf6395dff8e0310727c17273b12dd7badf552d62de30632f0621cbe2f835eabebe8cd039e3c5013de4630fa3f823e9d30739653bb4c45cb341227984c1bb3531d20073cc666aed663be4b647452ca847958da3f88ec33f306dfb066c26fe0761a3c2d6909d1ce7dbea01746d4ccb4228fd313f6b7745190e33f6168c75a9a674eaea17f91d46fc6b44a2c29dda8c1d05b7d442eb60034bd3c4693196a3240be0fee889badbeb4d61e25163b551009e5b95dff0b51d84bf5150d93e190d4d7d7704522079fa03c6bc2e4e795ff262a91b5155c37887b6de46dc6d5ac64d310a9ba860d12121741962b2d471f2e95d636efa2a13b6c6602bd82e64d71daf521e22f439fa7714abf83b3077e2d660ff5cff04e603a70c628c25b56f6aea13b57322ad699d25b1750e3d184073fba75f4183b8e79baf46ed133dc44376eb2a16dcb9229ca40403a93df96206382f9e5bfce3186733eb4f6031721862a9311bf7b4811c0a66b072a630476af3c51233f86fe1090a40bfba127c01d7a739a8e38491e0f5a376d32fb50e319572e427bab3d2a4d0cd430ba1e484cdd96076b13632499fa806416d1030d99d8f4e7f0f563f8f337f854b52f972bf137c9ede3f555b58d0ffa653743cb483d2c5725cc2d89ee93c6ed2813e9bc0739188a0bfee9a7877125b84439648bf9a55b16e091f4ae5c48ad5074b0dc01116906596eb43b460f1d23187d5d718e4501405c0d20bbb87d35dd0a7166e3975335abc9ada1ff7820342d2063d9a3840823da50d0e707300bb6ebaf09e69edab4807b222d80f0e8f8aa34b71c0b76aa67c73d0f4c5fed2045508fd226051217fe63a31d7546f81f0cd7d4c126ce93661306a2329765088f73814cf4ff4c29f912bcd42f8255a3703f1593b766dade606c1635a154c08621b3a4e68d084e6339f8d2e09740e077a4024976564d791a0df2f3663ee92637a2a02f2dad89629c6f7a635f024d6030bc57776caf9e2399d50e6d5351d97b1183cd214dd69ac5a11290700801e610ef22547c17517f52b86d0a287412e630b41ae4d4bf9ba34f4d155719d71dd9a6e0cf5c61ea4976d02645c0f14c0dec3fc317e35eae48677ea3e3c901eb6993c3728a07ec98dfa39d8de270eb689caf8e41984916759cfe822724e8a922c4b76e0983e2795ab3013393702259f934100a2ebd5af9b5a2b4c2ffa9194b65398e7704a9e13f4a7602fa3b955aa18174c2e93f53fd4841d0b9d28107009d4f3501f58f14b935520fabc6705523a32cc864ea8603cc84eecad88d5fbe76cdf76933a0b0b88bb291bd27e1b72de409c06411d204e871d495f0fbded2e9fd443e4aed1b576b9bbfe23e0de5b0e63cba168686e0c13195f883a606790abec2a9fbac6d792424ef2915d7209e4cf9b7fc94fa0a97a363d70895346f903fdb79d01fd0be2dbf705d8e4023639c2355d88bbbc8c4195c690c8c5bf25d2a831a36d796757dcd7450a4e652b9f5e87fe8ce7e83e8e73a837c5a1a0e333b93136b3e3f614c37257ce3b06f8a74ae99ee14fe25819067cd8db448a58034f1f2ba92f9eb05646f188e468a55dfe01908a4d8d3ee2a624869a0deb97b79e167f7014f0e8c1518d765d6800b0f37f19695d680ede5a1b26353dd2abf56d1a8419e30bde865f9db14f5d64c70fa0792898c1c7ca7c545fc4cf8fe7fd745877a28588b4aede9cf0c3709b76e4166e3603dd36cb742582059565d243e09df712f606e2380f75d3079847ce6b6abc214f952f3919a5cfb7a06a70bfa1ea6f1e71a679379c5b6eb1ef96b84b8c50d372612cfb5d87ef72e6f768da17f650854632b79e66f824b2bf031b7a2cbbcc336b485c613403bbf44ff8592e59570905b94b39bbca7b7c23af3cf2f91abcc5893782dc5bbaa794c5803feac8d97ec8de3bee83fdf3bee7378cce2db824a6f99834fa37250dec4bfd6ea9c7238755990ea2df4deaa035b40761073679a2b965998072d37af92265f13ed8077d33d5d515fea84c37d98cda1306f612e1c0990cae1c9e886273f27009fed1a2e71d0ffbf4b57279024c10a8c2537b6b67e8a01e27483393bdc016f1f216b027ef7682be7b4558ce60b9e9e39e0519ab3139f09879eb9c424fb01c6ea33381b0cff2bcf24815405096e4e3a313f902c0b8742abd825f48e108fea42bcaeb84747d9bce6d6f2016f24fdbc78bc991c99f580cb8451e291c0c2e1aeb471f2ece95b283b6fca8af2df3282e946b1f9ced11adbaf516731b1b55e2fd369d1f76bb9a154de4e67deb7262d72bdb42d533e70af75971d03cf2bcc1fa685e220394c41f3eb1d7da39d074e94f4069fafdb8ea83e3971b87a8cff8886df0819c0514c2abad24ebeadc851d9de5dc92bf60c511b0d63dfe9479e0a771a0f5ab74f37c667368b44df3b8b126de4831c628aadfaa982ed33442386dc8528e13a8b8ea699a7043c1d7c2c443c662e3de68613d892d64c071037820d088df68e4f8a70593735de0c49c7ef38d024a9c0abf261c531a61eb98f46e198d95b002884f162fa2c877d8fc75cbfb7b05021c683ff9898325ecf5d60a7a21cc849e29f6169d632bc79d13e4f6510aa34d80732689501599f7a266a136f089e46e8b0983d4a9cb09788cab215caaa286327b52a5a8e5211e076a42c95f1bca1e403dc39e98acf23927de5389fb98980bd2fba6ecaba0ad05531d39f8b37cbd3e078170deb5693ce3a76d4388ea9d5c3a1cf5fce65eba4e7b2f436b99fcc4b4053d1d4ee7b839e768c3d760ec1d433ea0d55a4fc3ec1c94acd471089082ce52ab3c77ef5eaf145968185a8baf58f8db08a25a7446d9276a57c79c3c600f3d7c25f20345424f80cfff5a20e502950c2b5557ac712764e1a7586d98e050365a90a72ce3ab9707c93ed11cb875d9840683bf43e08345f47571181802207189ad4ba4aaa8cdd3927ee8fd402d8683829c741032dd86c32c06db2c41f6d7fcb064cd8cd3f2111b6ca68df58b03e7ecc86d0d3d8e50a02f91ab5939817bd53b4d981297f68740cf7771cbeec00aba55e4a3e08848c3f019231e3ceb16ff2184096b8a09f00106832d29db33121cc6c8fbb269d960c7aa0fafaf2c88e2190d1fa304bb71229c7591c1720ad90e0badb3d71e3577a434f343114048637fe67fe17550d6ecfb4b86df1ca0058fdd43f0ad368871a63f3f28856779a62a4e525efd140a19234da63651d75105467251df744469ae0a0a0ee45053dd1e763c7bc22b4b95797ab2477082e7f8d5ff81169a8b54ea2ffaa996545825fe56072180a53d588e595be7b5f4009e5967920e7b3c4e3b7daeff6f442f22345b8d168cdb19979abd7265bf81bac20a3f53e1c0ab074c375bf0b012463ee3624c825ac432b286bffade128de7056c369b6bd511e6c6a013e3707612acc0313a645cb5ea00d8ed13160a1c4ebf0da5f11e24d5eca1ca817c33a08cf0816603508164300408ba3e2dbdb82c156a269b4eb09534caaeadefd07876c0b2dc88dbba16c8d3b7572394e62066a3ebbf39941e92d6e9b0bc7173d8d6453af57eb14d504d435b91a356094db28628a633d14d632296c97a51b174a0412600a983f7fd3ecd68b4078b08af5559872fa3beb11fd8dcc86f1eb08acb98f8d477d7410dec5aa3ab340c705f94709575e40b8876c5aa522db2c3b5d6fcdd7525a9646d30c9f7bdcdda132504928334cf3a130e61ff784de4e5b2c3276b89ccf89b86a391b110696f4bc908ffa02734e458bb4ec7a0c8224884c43ca66065c3cc60c8ddc011ff3035d659487285d77b9350679a7c4c8e465cbbedaa41cc96a6a54f354e050a069b55e3f48e6f4938d1b157b8d0067b0f1398e352f0f330bda911adcc4e5e08e889998b210d69323c0a561de5a620abcc8137497706648c70e6ab23070b3ffc36ab71db7fe3871ef23593c6a5f4d6d529326242646cce47bd57830f8d6393d47ec9506d227daff58d05017ebe0903e448caf45ff528716188ab0abad94517a115ea60884913cbc2f79a7614af807fabdfde743031f77e0610ededa4e0f5f1bd642c2a32db7d997ce3f04dab097f05a2860648b6699f39b0307ac0e42ab731c0b048e82f7d187e5ced46c6df48c8ff18945315300913e2d20ceb79f679ca1e79696487c71bbf8132a05eadc4ec96a6264fd1e046322f29d9a76c027d5910384803e31ccbd9614b619397c0f40b4ca4c06ef106032e1f1fd772a77243829e9c762769a223174d053dc50d754e3f1828b47ff6dee88dfa7a4da4e6f4354c3b03b42c99c4f48cf6fa643303ab0c81bb35287af11196d77284af19fac59ab978425c5eed703524bea071c5809706c8a90c1e13822f8ed14b8b3f76518468de539cbbe75682838eb626cfca72d400f9862291b5105369110e2e2a6e72c2fc0c33b4bd5a2708af20e9f2e33f9c0110706d498dd4d704321249b7fd6d1d1fa945bb0dca70d2161fefa61ea4c7348e031ca1e5b521172bf4c622f2285fa16164835b52d17ceabdc191b325868de6e146a825d6ce2992c3543487e9204fb182cb4f86997ea73efb7747f5f1177c9d5752f7abd19525b5a000640bc7de25f916b497cfcafff55702991b0156754b86b91d4602842b701e0431008db144f08b068a1bb2386aece71f518629fcda37912db90bd0e14a13aa3da2d65494b39c6bf9f9f3f5d4c0f1b9209287a071d844254d0f45450dc56a6f360555ea79cd664299af09021ea2504e571a3868be028b245df2cdde39ba359962362d4c81404a10238dfc8c87a4a51c02220af6a673afff41880689f19684b0b8cd9f19b1906e8b0e9930fcc11c288a1d8dec67301866c8d0a9232516c1b69e50864eee8056ac8e7170c3a0f57d11fe80bbff691b566c5da5eff9761bf8a1ee26c55fdd3f05e3fd73919189e26752c6d648e907d2938406feb9e89bf647a00058b580fc820fe9f4476645660b5909fa479994b265e6c6560d065b949f82ed9f1b59e6003c9702f304a1ff36372c3bdf412b37332ee3a54ecf35238c08e4544549c55f8a3091f56566e726274ba0e7b2a3da73049e84af2ad709b42c694f42613f8f75341043ea5f04e6dbca4b0d1eda4b2829d039cd3d6a80fd8d7f772e220c4665ad7976cec3ef8b0042b5caf2af5ed4f6e39651503380a30d0e79f3e32ab1a745c44be30f521e236e342eb66cdb60d6b30700abacac00d83ab121b92da37e01c8722cda2cf520d39ba8f5cf3fd44f44dcd6f5f4b8eea24dd7180d8202bf942bd32d0fa8d8b21b96d7b02a0467417bfdbf10ca4a2d5867565d76091b6c0296a8c367098163cc8ae9a6a5dffc6355d118a89525b6745bd93fd40c5c4900a0629ad5819f6dfdf35036fe6745e5f61c68764eb4dffcb346c5f9614af023d380f5600b6394178b894f8ef3aa3c976d4a2cd05fa735086cbcc6616a72b0ea1896ab8bd05e09c612a5da48e99a4c58bc07339131ce9f3091153140dd982dd9b0e5e5a8c49a700509925cb2850a382fcf6701fc7332a4ece330fc3230d7d2cfe42ef8c4940b1159fce7e3a58ba908370eab36a6602a7c062e8569fec734b6ffbb0a3b49b1fd6194cd92d190b82135fcf785f91d75deafc4af77bd0001e6c600817bb4cbe3564d11df4ef6d42e1742d316b5427f361dae71b7b6b4541b6ba5640785d3594471ba4fde2be7a68b48e593f9b84cbbb7e231679047359d757019098fea11381a409a5c9d90ed214c199ff0a0af316f22140dd3e57f25d3fa8c0a853e856cc75b58e1b0332ebb876e223aeee1b6c83fa8bae75c4e1bd1dfd67df61b1a09ac30ed9e356327b2d36c4dcdbc47f0199368d958b29771f507c4ed91990728c0f70a884d913fcdff89d81dc7bfce4bc2b1e422286bcdcec32ee2fb03eb2fa856071ace4cd63db9ab3b0b927aa9844af8e6d715dc97b6a013049324ad1cf0c9f5c76b31e5b19a4d6b62184695c9f460d7e0c49379211c1126c88f4eff6e47dc8128d0f1919796cc81bce26e15c5b1a190808bc183a584c75919e9fa3031c573f651830b3717b68eab70a40be87b29d357eedd8578097fbfdbd063318e2662c3ed799c6119c1ca80cab5c87d648254b8f057e090f9418e9129d67d55f6d1916f1f7a8682119c2061d6fa07bbc98915fb9cbfaeb5f2d2f60f1584f0aba94d090ffefe3ff9b58f096c37c6b18aaa6472c344ab11ee2bb7efdbf6252cb8a0b82d67249d383b349f16cf0d10d7165a631387812671a84ee3b6c510b8221929c129c829fe2e5d1b0bd3a02957e17f0e87777f74af8de942f6f59557632b019bbe81533a69ffead74880096fe692f8b080338493265032d79409b8ac606a2410b8ec5cab73258087de59e167bf051b1b40c364f147a138b9b27e97a558086ec3c8fc949ee771a3ccd465164d70361f70aad6f6b6c85138ccc88a5abbf26795379771aac9c0564c671c7f86bcbeb05004ea843bd6779b5adaf30ba3a1c663ce5bb9e2cb69d0d015a7098d9c462478f299c5c33e6dad8f87f130b74fb77b86179750b211df9a5aa8359a53a9a19b670942a179ce539863f254d3737e8dd54aeb707ef869fb2d81b3280a0a9baad16a5106977ae56c9162f6305cfbaed8a5a2808f3e8aefa55627d9f93520c8c24fc5f55b9342db02b91105e0eda32c5a2a2d85c3d75c810531e6e203a6d797553e78f5b1bf37be038955da76e3456f601b3583e3560a0e11f815a721c635794f17d68ecf2e456a75a7d895324c96bbf6b914076edff50c5b801eb1b6bfa73e984b12a033485c6782fe33293955ecb6024009d3c769153e7f9830dd71f6d04f9a1437e947c372b79234d1623b536b7abad35d66c683a68e1c899aeba8619b046e6649e0985f8ebcd0ba5b8c693718bb1911eacce38bf92f1281bf5a10950a2abd6583a9fd9de6ad1366e419d6c1ba43481d44e94c8ffa5c1f153c7958f1fc93699e0af22b3eafeca7d5ee40668c52f480211ca7b954bfffce987bb849829d6034fde6d24400dccfd95da833bc1d35aead9e993fcef0a74b5d15ad3b9852e10715547c25ad27c309cbac7b7bd206433f9dbf3792056350e744c464b088a49f0640f82a1939625ac63840aac4ba7c2bc379bd90b781629c01844776a2fdff8fab979daf12b6c46573a80308a6d2beb2b9e923451b8f6b8c6da1396eb6fe7ff9e2a66822a566d6dcd27e20bf7ea0b0af16d6d0bfbf973a6e85bd305477d13909e4711060126e842aa1da8fbe728ad8d2a4686707d1b71f425d0176dad72440d6c853f4fe2e63bedd5d9cc62ec412565daed31bd89005e190ae4cd8551919618b17fb4188f5317ef73d8ae1f4b4cb53cf2f45c37555186d2b71295657756e37bfdc18c7b6f002958a27bca94d1586028054ad20786ae0cdfd706ec1326261ed10a31082ca636ddbc6f68d252537ad0452c0f9c93f7708544460456a7507ecac132c8d74d1e6e6acd0d5922174c0c9744ae09449f3651fa96c5e5ac87e11b610f1b88ee351282a9769b89dcd617770f83d5053e02044cce726a4605e872c4366868327f23156e118bd1eb3152c8a360002bdfcb33f1d13009d6c853e6492735f1c44fd8692b8f88d04457e4387e39e44ef69051a08fe6aa34bb12700153a20e14b16d5b1f5dcb22753196fcb88cde39f042769456939dbd60fc9d76463464a2785fe6740df032aede2d4e011884e7c682e05fa13b0be74a05603dead11fa7167b40d8d363a87e535cf24171f9f0788d23966d0675e3e647c1cfb633ea447d491e2cbe0c7f4bd3f24badb4b41ae5779aed9562c103a0202f1425b0fac936ce6ea12e1e96317b2acbe161b8fd2b7b06cc5b0b495f52688d05852d2b2a06a0eeeca21a9e28d0161fa70b73f36f5bd0086f6c0fdaad347ffda007995dbee7ae980032f9b7cdb2e1fe5de81ec2feac56eba1cd2bca7d9c602fcb038c1313970848b94ebf79682eadd4c2ecee2267d082f2b99dc2ac11b32488f3a5730da60a003ba3646a3528c70d695749c349596f560a7d1a33984ca9b3f7a5af33b27ca5ad0799981d59355d6b6f6cbf3d6350b2050ead801e8975e5a6a7744ce18e1e83a8002a9058f13a584db032254d7889686e1d9b785f6a46aebab8e45ed4802322406d3c1b4422a22d321eeb7a92ac9a6d3f16ec06b1ec662b6949a95478cdfdd99cdb262d361f8f08910477eba70d3a314359b57905cee661cfacd1ea6719b2496689aabad54efbd4508bf5eb1d11f268bad2fd9b6b2e49b378e018b060708e917b9ad6f6f7043e3ec52c11cf674eff1e89db6f56d3fa27f7b015643279ad016c97b0db7f40aef94d913e743c4e2a16251a778a432a43d6da525cbf280d2973097957e5d54706f59ffd07559645454a7f864138d929c5cb6a6823ac9d9a20ffebbd0fa7d906de6abee31d0919ff4e71d3c40f0d1b4d56d7179c13268279f596b28b5044ef6c45f650d05c88cdcbb468df306d3c989a2724309afa97dd02d6e32250c5fb7a5622188bb85c6657e2adf4be229f08105d931c6b0104433006a7d7f359d8b57228b9c459a37b54e48634d81e4823e61b4df08dd3879706a62d165e4df6420599cac40b7ee3bf8d2644000238f8579e072d8812f3547a26994963309ef8fda231383fbaecbc95a3adcf6dcb1f3f61e3a5b03e7cdd977937510c0a2ef229394c12f8637f7fcae2c83d87c911a79a8f9b4c158f61ff23dace335b85033f8bc469f14eaea30b54bed5c6c326a6da349f1cb25dff319c8a5c6bd1d8fbe55fde206c8e886a26cc51b2d310fc80064d3074efb1c53d6bd377ff8c725131757ce1404603a0a73a837be14e6d565227ae47231c741a2a29fbb163fea4787e16187101be90debea0f5d442266c53ae4c38263275ed4012de71afe69219721906337fe88f7d55bf15aacc7f9e779e7fa814bd720b13baa0f8893baccaee5d17bd0f0a4f78fffd256c0b1545111b44914784870d34ad7f82e1afaca53bcdd6f9333e2a1ebd9bcf6692d2a28872d251247c6d061139513e363debd52a57e32803acedd79466b49498ab357646b4aa8698225d0be331e6bc7a5989d7aff8110da78c82bcc7450386b4a9c066166a0a8da10bf89a0ec3ebc4ea6ee998ad8adfe24a5ca9c1ec6485ac7824fc6323c127263d6551c22d724a6f0e3e72504f2a46d5771c74dbf68d6b302c27b9d5318fa3ee43cebb10b9908862b1b3b3f368ea064a7bb445bd785bd4733993ca79d03547a2b35e0c8af2def3085b72505c39ebbf1e58d652b59a5b5e57b128daa1d88c2cb519847bf74c83f41711109e560dcb56014c3539418d4c030849321457cf9f1de336ac666d3d18de6e7472d0147353990142d5dd3c2b57f516c5bbb9eabbd176479bd19f0b21d5aba7245d10995709bd505bc4520830586386d2650f89d8ea1d2c875fd64928543e0eec96537d8cd22b244d95092bef182cfe0cdb8eae18bf589b773beb785f08dd3429b953b98a68ea159fe9e0b1d408b53d7a8e4b2d44c5b32ac27bf8f6685c27ede8aad2924d67f292ef6063ee17edd4ca836a26b219ddaaf61d3e723388baa822f70142f15d389139d2f02642740a37e07270c03540a2ff25ef7449598ac9cb2b4b47d7570854a672097995d7d3522d178e96bba9daed43d91909907cba62fd0fe6667c5140027a178e97335703029d20941d16871c2e9f39b335c2285e1b4fb49f11d66e70cd424bada654cab9fad54419cedd97ed58e2bf28884c4cb68d75c374d30dd0d07048f398e84e092162c87dba17ff01633f510230504662664a24985f8969d80ebc004113cf53b2fa406082d49eea60d01cf5191dadf7862d876d34ffc352b1d69d7881920fb6b94d5e4a3943c6be2194972f368080c412f2ecc6e3c4824c3b6ddf1a286c85152cdc7290ed5d6df6ef9f651549396ac263ef95d6edee28ba3728a246f92bae123cbc37a883edff02bd8ffe200babcd4d3565fc606617ce87be2450cca762edac9797957bcd486a02f9b6e597c5c4d485da04545a749a5b82ff6bf6e9cedb60e015f2f7383c7582df7878401bb491652ba76c8dd4256449b1969cd324fbe23af4b39a38053615687c55c4fd85325704cd3709fa39db41e933e92975bbf34fda58972b0ab097d62446416eaa0337b58800a0e1d3fa30dfd791b6ab1333623d012406c45c884ff967337a377db5b63283726f825b3b46ebefff31f3056893e1f33306af026f545ca44ca15eb1e87dca5e0174dad3bd27e9e6410be5feb68fc5f62f61a58282c22238f3ea77bfc463fa0354ea5a775aeae6321260a9ed27550d1d7d8470efe6a29811c893d9e60a5349e70d1537ba2c4da2486eb68a59ca64b5e87b6181ccf848f7313952ae36cc4c34bcb6554b67cf650b71f1ed7df60290b958032b4a4cc0f1b0d2cbc9a7d70b939e0b5c70b9e7b3b39327ce52191bf4ed69779ce5884f0b96c3ac56375eb466ddd9d8b6dcb4e9266f0f6e943275479606525dec77ac356bef089c0a15f00e90248d850b9d13e8ef3928c7cdc46105699b2a1a0f3313b7253446ab702269bb92839d184a3c22ba15a127516bee700934c09974574a5fa0a0752a45795bfb36bd1b19295f24f637bdb7f6ba12245f819681476ee4c9d8df6ceba39e4e1eb1199e209856e7160d21a1ca8c922b9fd5045b03af6af11e374da5393d6339ffc863635fa949619a3c5be55011e2647455553cd4f44de597583bbfecfc0f59b1c8beff0c0b88fd2c78d4f3af90d7f4145316fa4793371bb48a271349f04c012365169c74a46f28c841e1b6dab344c619ecd4b77fe3d4da375c52eb8bd92fb7da066833f7235285296db048591bf4d92ae5b4c203bbb252481e8f25d7227754b6d8f91b443e786db214e7b3cdcb3a51238d6fde9527fe6a76a11ec80a728b0b07850c02dec8f04e12d34626272a674ba46b2712261e53c63beacaf90a18704d98acf62dc295a79301b7dc7c0a3b658c1f92d8691a2fb43ae95a7e9cf1606ab829f6f833731ca9b8c39ed031034bb56a7b5f426f2dc10b2179090d20447e23cbc754f32adda81f93beb65863ae44c2550e52f6d09de81edaff91de7c06845638a3266ebe251c6876ccafba9a2cc0e9df6e228d67df6b62dab0467534588d3767ddb4f0d17d55a895d777c1d4aca886942179c31e2d6e3c0a892b2d3f8ec6d3d7066984a4036feb63c23eef7c4c9d362cf6c9e408ca938827455adcc446822cc4fe435bde391c9b3a4f5eada59fcb6c7e8f29b941281b5fafe1632fe6755fcc8ddc4cd5dee7c4f27e8fcb0e171df9e8cd717993036617bce85c4bcab0faea9a694aee3eb458e49359a88f407c8b863320f48828ae505c872e702d867816873913266da7d4b5d4840db281ab61f5aab2667635c0d3f258d8229c3dd42ac59be4d66502c6d5c00d6b27d558faaedb5b1b636762ccdffc59ef4ef0d1715c18e104a3b216166c2da9123a092dbe48a41951be9c164b85d75044cf2fd5fa7253cbbf14ede1ad0f7629a8167ba23602936b722b2c2ad3529321d069fd873df7badad498f5f79819b8834ee4874b2d75ace1ecee4ca59815069683b801d3676490750c69d63f15d657e7cb4b6cae36e63764f176da296942a2b89907a107467019716208482eebd250e1950663b8e6f91af5d9db6902a217df1436e63c86363ea3e59a666e27c933f43367315583d5575c9696564419f4910585b685d25fe26812c5fb581e72959285998caa6604f11cadb2caf66e781ef4563016e82e2b8194b66c9929375d3ae96c0706f4745e3c21f6d226466f5f51a25ea8ecaf146be57d26dbba3dd3f33bb169a7856579ad7f4ac0a207b9efc004b3ef9e81c3850f8dae3c220ad214b9912f2b4668112a5af420841154abf0f248ff61530a4f01a6969228178f95126c436bb4fcdd8c6692cdaf0f739dce2e88d6518b270ee37a398dbc7f092364dea1a233a47f6593a8a5d368c775e696af25c3e116286f6a1005c79cf3653a4080b1b1fc4207b523af443d448cf1b04e712d229c8d73d0d9868a746ead37665d4cda4755d54b06804d2ee79e2028246a6a133fedbea51b067545a3d4b2cb391886464d883e4027e3459530985162667b04a4a01b1cd4a1e02aed2ec096aba25f0064d35fb32f74e214aa496dc0e51e68f57e152057457d4998cd6e0f8b542909dc4efd14fd85c02dea06b2855033887485b45c3b37b7e930cc876853b406c7bd8a6101e280b1cfd9de027c7d09cc566ad266f4a8894ddd18237be809ed2dcfb414a48e998ab717c030d8b6b35ff842c24308a27a1338fbb9db64965a452bc0d02b1548fc124e855b3428650d7865819395506474200f3e9997433952142ac4350b838d7844c77224bf1a62a199984adc3b50a273ca5e03cf9e04047db0344303b71839b260578ed794fc9702b49b5496de3f60ec73ec4c411760663a2c88e02a2ea58ad79a468a29cf23639f179a9b4bbd7c2a6ec712397037da6322cca6aaa907b25be72f3fef45b597ff80b687d38bb44192202da105a75a54c7f93aa89f5525fa07a5fb76286abfa613e27a404a11ab527b430afb9b50c3a779c67c0cbe9d9e34fe807fa4bc8d620252f34e58ce5d198bcc4887df04e23eecda4247e8bcdbb34846131326fe90153812c09a86690f57d1ef016afc37e18a6a62b920b6989896783bc18f789181934cbf86f8f55c9f5fd35f07883379af3a992d70f1dc2cc0318a769eabcf299da67a9ed380b25233ead1ebcdfea2512cb5f5ebeb767531755932fc7bd95c5f8473e217333e8531567a8375c603bcd8d2fa435ae92a0442254173c0b1141904e189542cf21a97915c2a3f10aba240f3d35ace93b4754bfba777c676432dca347c73e07d9dfba33163a2bf98be09c02df822680852cbd01e40db998426aeb185343a402fc68db8b54b6a8318d446b8b9ea450f4d30c8d3417fa12efda49941dfcb78eb220ec00bd4e26dd68b47dcc00358fc973717da4a831bfa151a7eeaa9827fa2d69b5dbaf1e5d1deb15c76e4412f6d055d8c03c79db90bcb6baf4aba50f4aac6ab45a1f73290823843a65571a2f5a0b27ee30c8242f09b381f67224644abdba7fd3af857edcdec1a76eda4cd08ad816bbd975d17c170387704c02bd2770d584ce23c462a5ceced507e2d8859f52a501ac3378d27a8e6e2cdbc25d5db7a523747e017201a2cc446d1f0696dc349b0e8c85c10842df6aabd825c9ae97b3a50e408b0d0d33b4423f4e021d0565fba24c33f7402713810f5fe8abe9996e8b92eacbac39f0391cfd5792e1bd203b0bde13945403e0113e5885fffa404d6f7dc83af2b3003185c4438148fe1d0069367d4ca816af4b2382526ab73f75237ee77b0dec939e1dfdf74276d55ea42550e9dd13fb8cc597245e4fb1c0cd24ac1f48196b2e44031bfd7583e3a18e724c7c7d1fbe91eb92dd5acde8d72f71c9c4036ca180805b9512ddd676b8729623f56fc9c9ddc26f97c1a4890d50477b7816aa00fda01fa220192ac2f39fbf9056665d5818a408a13bacd24d67bea1e870c088b3011218c42b2e4042de03fe13c051b745bd8f6654802d1d39ebc3c15bf6ec85e17dc68c1bd47b49ec124753be5cb46dc5ec39e8e451c60b40e7a597df71b512f3496e4d88fa2c9bc123dbc230db8cde0b9fa1bc533309bdb4efd41f76afffe9572330717e8926c6118b0476eb9e97a5f7be601dc9b43994fdf4f50cc408a0236df10b5de3a4909aa20a477c08fb5ebddef2cdce7df7811c1722745b5b1c2bf3a6a6508eb10dde6a1b4966b764657a59a688dbf16f8ce54ba6d0feb89cf649df1b5a319f2c01b7b7a55cd41765e0d5e86cc9cdfc106c770a247e3f0c4032cb4be98923ab3349ee77a124486f484de29691e9041bed298e816f65013900573e8b59548e5ef0760e4a1860419c63b3e5cb4b88d7f56ebd6866a3ec2cf48a52ab4e5b114a7791f373cb1da510b632ead3adb269442d84e98c530850d37281f939b362c1a96ac854a88939a3203a932aac85a29cfcb1536a2d2d9938f1c1308e18f7af8443b83dc57e963e7ab162c47677ae5caec3c2278cd03c6387df258dc657c0ac045f35ff49f89cbafc1f17335381ce51b156bbc0be474a965bebe28e5ed9f2f0bb6e31101969fe337b8375e788dc473940e3c972c689f77417778b58008084154e5f04a4daa45ad9bc28cc0ff97827e0539d66e30aeec99241683cef0ef089b701a1df99cdfeabe62c53ed88b8a4e4d3b7d0e3eedd1dc9658bb338cdc3f2ebf1970c799268d894842bbacdc1fb7ba1b6fdcbd2178f15229cedeabe75052bfcc04d8f167f95b1303e2c5aebab5a72b9d748574d3f5438abce571ad64c5c85bd6a7fe1c91ad4f40a3bfebb3d6f823c4052f8ffa99c15c8af17b819f9c2e4c06316a20486c1bc06d6f9cde83e2f8d77e8a0bdeadb72e5282adf1330de4ba1df1b1e5e92e2684423373b8fe268d7a3b647f547ce5cf1e95229e991a7e625664013ade4aafe21e419f0838c8b01ec3b86f543be852b88942c3b12380de4663c9c5f7fcd3cd20e0a47565b605a9c38b70c4924a2cf28cd0a57b9276666d7b624c8e074935a49f6bb2570791d9fde2213d5557be9bddbeef4ebf07276b7d47b945e5efcdefd6290a65d6b045597dbdcab3b47dc83d94387222cb7c699b18691167f24152088f0ddaa43c4d9b1712377aa3f0dd9abf5e7bd20173710c4a428b01a4ade4ecda342efd5ae94c769293e2f071e9eeec7007bd512e58296c2fa5e901ffb61508b63ac4be3497dda14c7e20337a3cd00ddf839604a3afe308a004090f5c5011c94f42f1591ce57e23a9e4fec607fa1b09c672817a51613127c9d761b9bcb88ccf27cd16ab710c10899bff1087528a9df123181f178628a8c393a81c4831334b7e80216526978087556f6d916996f6db71ccf3eaac528f9ed5871f7595d4455464906985305e84b2cf29597c65d86b2e907bedb8b88034af9162454908da9978276e8cc165a04d9c71f6bfc1d783929f1f5856488258cdf1e3a4cddf53c30f7839aae672ab10cd7a14f8282d59bfdd528e423fdf43f0300261b8ed0614a9f68a394e1eb0234114c7e85e97942d9e480815b50f502a33d64e85fd207c4d171054859c3ae16f8c3e9a57920ad05f49ac48879919a4f5f315d01f70dbc0a971fbe0741954e235e1e50279b740b13312051cc98107a658b7279d0de48b46c068a676674d9e5e20731ead5637e08b0c1d16221e471fe9a95bce393764d49bb47b21d411400f9e43bb896512bea9755a5217d37b8f45ba8c8fe1b5f055143232ffe46cf1f2c045dbdd937d6e3328bdaa4e5a12a3db9b7b003c398951ac0d78a776638f5d2a85974a1d2496ef1ac833667157e8ead76898559488bdc9c2bf1f3e82e2e7b74644f52c0f57f6be8ead34c9bbe30fcc50c80b30e783c486c52d11733dbbd7fe79fd4276b6d4058310d4f5b2c2726ffbf5d0351a76a6a0236b1d32816a51e7eae540bb6e0a7721acf9a212a00a9cc0ac0854ac5127c63e823efc5c5c71242fde1abc2c2fedc6baee84827d18a6a11e43f77abbb985ce59fffce1412860f25a6b782c98fb4f31f68e10aa4e9eba1083e3e18c569ca6244574cdd717a38ade14a92bc10b16a0cc82f41943df533dd6033b3c5fab01bd838f1306f8437a57a8018eb1612fb1ae243d279777d89b0e85947cc87b399a45933f95d2a689f6c0ffd66918c3e82deb39302c31aa9cb770894157afce25c84bc6b0a05335ac95c0fdd4352ec3959c4b5e460a7c60f60518bab84621301f582390de0674b063d5e0494fb44304e67ab6ceccd1b19f5b1f04ed6894cc84e2085629d86e427d77b5d339b21844891a5f5d88b9ce15ba3d3c35079ed86793b235eed76e8a63780af43deb7cc847062f424be887303bfe86f0396179a53504f1decd93422bf43a244daad4b212fb3e4a15239b64a2464109ef6ed10c34f7ea201b36fc77d71a6d3555aa4fc178284a6eaaf7310112a2f3fd597afe1e77970ac5f10d51f310c39a24b1deee716dc958d7f69fd972a21482b99315d7f57832298c567e2070f5d5afd081979c5e3878752d9bb339529c5da57a0a73c04230708a466e79a53854e481bbe9476da053629f99fddd1b256df7db28615e8f1cff273add1dc2de10407f45bc84493d577b16b567e98b88a248bf55e1cc832ba28ca0e3903338560471cff45f06186d1b42dcf3c8aad29d2008b9f4882c981818c6009e83f35b7a04744e880b1ed7d7e79ca638e016b616bbdd6d622a17acb4f53b6f8f9fd141c0a6cb1759588867219c009c876c0fd743cfc4c1a5977e4c0de5113a69702ed08161031dc85fed6da83b6bd57599397c95145bd52365d4547607a04956fd9789681ae0e5e27a34c4f09318e0409fc949ba259619c71e42392be438192b54534b32c41b44969f96b7a318d049568908ced3f70b168832f224a23e3d50ad983ea050d3326f8c2f6f683ee473ac3a88934bfdf6908c68f1bab4adffb04ade8ee2d69a3521e91fa53cb6327fd8c50c5eb7276e926573df71fe7409f188355eaf14965fc5da5d6a5baa969f8fc0f8a1a4e447a2b0e34f008708d9724c73460d6fbdd3aebc1cb74525868e1bf4b3994ad216084a4530225570d5736998b46ec2b9106f579a86727a6b3f3d7c58a6463b1bce9948c997655be36af9ce2ae0e1adacde2f489f76b3a02fda85e24fba98cb6e8627011fb8d5e17c29204f24ee96fd4d71dbd17e19069e6cfd904da356e2d4c2cb2818c4ce0958594fa768c5310d351c4ae231801cc5cbaabaa3dc5bfc7a84d9cbc2cc948e0ec8c4fa92e96a475cdd3fd8fb95d70b8c6255bcb347234f8b33c6a36b31d71a34dae7928b0fcb1cad191da697d6ef6e8810234d67dd10d8504f81aad4c13ff406240719dec62f73c8dcf8dc1d3c6c413327f1b959c987b261ffaaf207d186f557730afda2b428b4e81723644b543a11126d44991145d8a9a2ac36d5be2521c15af01bb67f2c175ea770b447dd0bb30fa6efe1c147958207ebc2ea42e616d59d928be13e869ac3e9d60c721c64dbb2f2839659c2bcf93f4bfbd53dedf823432e2ff29bff900220a278c1d0661190d7d66fa6bad04bfac17892447f47d4470d8ab8eddc7de60db96870e35e891a553c13abf288624efc30c214a15ac306679d91932d47d835eff12d92670c0944cce6bd7d5e19ac4bfddc7a304d00ef27af46efc0b4d4b3351795035809d036f4c6f829c25e0887b936f246ddcabb9c66c18b243a5f60b0f8b211c46d32f048ba0d6db108f14bbfc1d80a5c4e641e8fc53b39a79ae24a6c869a6dcf198e9b18ac2ce0b5af7dc4aa4a261e85d7a89ae180c22526f11eccc2a0057a70a27a7b2d24a05237bbbb7a549212573011f88df9aaf2501af5027b6f2e9234e8737d2432ed4600bae896f2f7240ce7d83755d0c9c53c70cea005fea3d3469f474f1e6eca2cfa8e336c054804c94c36d5c9203982830e87b74297d91a7e6bf270532b1c0ab5bf7f7cde3f584b2adb223da9a0a892cc54f8e029a47a80ea66aec4839bd7392e720939f935558b50565497c503ca9a2db146a4ad4371d79c3d8fd81936ba2cde7cc9a00d42081efdeb63dd1087bfc1ddd7c29d8e6ae13d7349d25afa664bcb3340d984a08422beff47dc923052a929f15a385872703e41eff89ad7f4b53e8eccb70d3cd11e2224c97cd34f9a44c13f06b4aa2cb025b638122cd20dde2ab77836223e8d99ca52243b50e35c5914b9d8bd6be555505013eeeaebf988d4bdfbc85397a3e8f8df379981544aa7145094b24e758571f9a67758fa296153ed599b190eedcc9b0e14341d6493aeca1138fbe7f7f446db10dbdb240eaef76a24e5e7c8904c7e93c2724b9b83c1c75229afdb39b8e4c14b4a785e5fdcfbaea6239894e797b247c4248d2bd34beb4d347151047c8f5d03d4d7db0ee22741c2eba7da419e3fbeb5100e21566ba68a7a29747fad3b36a2442125168744f97b3914d7991f32ff97486c7edf4f400f43c803d9eab65981bda708cbaa31141e53e58f768cf72abd836800e0bc44ba8a771c4923b3c72a8e8570ece8122ec3025714724bec8c44873148130dd4f81d4718270bfec687b9ae56b71c5e7015d67ac0d2a29b3096a9fa2aa282fc871d115553286e313a7a01e0f74690f8e1bead4b85ee06de9e6848d69fdfe7dc80b6e9e0434c82ceea39543269e797429042e277cd3f30c2ca58583c2fc3abfb069a36a9fede28e6a6a4682eb993b886d384e9743a78e71c83a8fa836303a328ea02c5238a91f2257e4306b0e1aafe69796223ea592accab2e12065840fc9676cab009536cd58846dce06e3c1e66cff15bed404567d35faa6eb938208a436e0089f63e8f31d4210a635a3fcdde016a6ba0a4fd3ea65b7d3583e14341e33681714d1453aed84bca7cfb2a982345ad9cd910e90719c1520961507fc6aa3c26edf5cf4334a15bd1076a709597c18ff29742697cc36ea802f52abb57e638aeea9da286317776f73eadd470eae8d62b562f43176d0bb7a7c52fb6aec99766ee5009db42d51ad1a85ba6df7674bc4c8b86ed33fffee9724588575012435129a26f908d1ab94ff453165ab9c414f3e52bf7b20ee572994f3beadba1e5833b88714090d79e422c67f02ebda5a8fd04b664f9362b2788f9a0485a6442453acc2557b6db76c507a7476f0ae42a9eb82babeac11530d798f81ec99ee0ecdd41267c634845f764411255f987f99f44c7de52e26ab81e0eada8cbc7225ddfe225cbbdcf80cdcf94eedca0f45dc600b2e080ac6af39b94140b62d36fdd3b5a0ca2fc7cbf4f906d72b812d282a74e5a65bc2888b682dfcbedb105a76da8d241930fba617ff634f13d8c4ef13cbea6a5ddcfc80db84958b99e0a70f753eedbd1959e6068febb49ea63798d55ea06e8dd34fe51dd295989c506e499fc23c85d231ba50afc01c7ca2362ab09940a5129a2cf1007fcf3a0c19f5738ee35bcb305c3ad4809f1cc3fbfc821f333b52ad6e4256de69684f52d7ab804890d97d3e858d7ca21b5d74cc0a707b8ac713b3f8b277bb5f46375999dd41a471b4651747d6885a37cb70dafbe67f05c31c38dffb729ffdd8ac6e8a1bb13e12be03e1ab54289dab1acd4572eea01564065137fcc6b2a76114e367394c35fc7ab437a48271d6c35cf59e2a24ab524ffeb5eea79826734e4d69c00a60bea18aa4302fd29c14aa95329857663f79092f9883ffd43177a6442128fe6894b3e9d8f3a83a4081a1a9fc9aeaa848de2c5d78fc63e513c30be8fbbcd01990ad8b0e8ce9a5a656e41d646e75cefa210af39a706b1840608bef02a1e2bc026d63b801330b97122f0c2668ca9a52f080dc8c190827378d2d50e4a588a130a4f298edb5cd0cadbb3cf9ab880772972c34e1adbb7a9924f5e7a47e012e0d068178614d626f060b514802a66cca2148a2513eb418a2cc62bf1fbcf6784e9c49aa5579f2b483cbc4fa0241e3fe45b18997e406a914efb2012444c2916cebf183c56d8ceda56f96f0e070ab1950e35e0a1b3a0bfb10106e9c6dc43799aef9da6e66ba5861bf670f8da1471ddacbf095c8ae5c74950b08df8a0cd3f9859d710846b8171a586c0476671f9981d0bd6c18c3eabe22fe7cc5af9b233606c3c2fd0d5ee4acff03244bef4f38b9b46a6635d9970e151a26c2f03e9b66294bf79aa0fc95c24d6ca6baeb9b5aa7d2c7d1b9f8dc2e9877c3d7db5ce66bcf1aa5a817de09db3819b912de8c2af0a0a78c9a87d68f5d9ff610c900d855d71febfccb9675a7562620efb96be7c7b8060150972f5d9e6b048fa9e68fdb9e12fd245f36c111fdf60f2d67e720ceb1affa12e79eb9de0c165c2aa2eeac3308f2429f13101325b2c97a9d5a8d62a2931ab35737095e537843abc755c2aeb29ebbfaec09d470b3e8081fce0703c64929cfb62dcada4f9c21005f436d75d283b7acf4640a699f385eb86d55671a675a50e6e502f3bc798e493269436773b5383f79e746c8ceabbda72270cc1eb2ee3c24ee9a30eef5e1d7ca03574ae2e0d14677f17456c9a6e7df2519ffa9f43edb79602bd879dc3d06ee60d6c19f0bfef4ef200146c452557fcc9ad9e02da53c2034bc5c5a45f83e8a3599fa5504497b9b860a2ec66db12f7b1c05b90ca189000e226fccf80e198940ed83a35e4440128e46e9c98a3ddf77a2045001159c806b1b8dd31eb3acaf1d21aa8b4970d443f7c5757fde736830a2c48bb5e1e6e52f90d3e1041a2cfc7f0fcc9153c6f63a8fd0e227aa50c12f91071ed5222105958cc422121aac540e522fde513157fe7eea5c495ae2a6646b114e08a72f7c751c2c76c0055098c9ebb1a312398fb1650c042fbca7344070d9fa010e9d71249784e7817e34b504397fc9ab204e42b8cf261c0e70a09be3d0b5b6901bc8c707194950e5977ee773e274ff7c0aeff0e9ede02982354b502e78ddbd5a45f18e065a250f76c8f5f28be4dd3c6c44d29748fbdfbea3d76f0fad92de5b78bd9bb4634c801c3d3888a1b3ae007869d105ebc6ae2a39342accf73dc312d2dd23082b0b7e1a4cf6513fb89fb20461212ef66971dd1e657200e1f31c4cc9d3a4cb8207e9f48bdede351744b25989217ac870f44b1bfc3e3a484406a5062c227d703d7383da6252add5413e7dc345ade1db51f1dbaaab9d6be85d94252f520f252a7ed59c7fd841ef97a7ecf4f27783126fb776e13bbb9b875243e335669424d59d741f9ee9d590a7d9e588de50c405dc9c313c5fc85a7b9d4d03b3a6cd74551c3134d3c331636e476b18fa0e02dcc0c73f8e1fddba67b40b5542ea4535e0251bf74b0d2c171dc09c5c5211a11ae8d1f1b6b9fe9d877a9d80d257db4fb15694bc0c9d2dcc6f07e126a08798c82ea46aa25a0b880b0de8f482e67804679448187835b11b37a69a549283d408fd0bac0fe1b6607935b3453bc63a390b20fa61532c513e57e9165a85b0955acd1eff35bb19f6339f70b3dacbb955fe22500e7ffbb6dda059b390eb3e363c06197b7b99836b30b28bbe9d43cdedd6a34137d13c27f94f6b41d7e37c2533202830fd86e9b1271e1f1347dcc217475eb839056602215c840a99d066e237864762390ee28e8424b9e9a15fccf9b74e62ec88db0029744bb35e98434bf02b114e7b5a6ac48e2e4d5c5fd67f641679039ea49aa4f9c191ef5795bf2267b15493f91c6cb1e25fa576ddf2da8a2183427257c134c6530b17614f71e87d4bb0d27b947088dde7fe56746e7c43af54810b1fba6cd54cfbacd78c1ac00b5b16cac4ed59b9734f6614f1dca18c672d947c451e58ba62abbca14e34d2f38de8effe125b032720712579486a582d9da5ca1f1b3e1bc24e9575b2b4d151ec79c6d339baa23e68cea432e1fb28a53663a7641248664a6d3b52df577ac640da598def3586633137b3677a2c3d9a59a222a9ff66d93ebafba3e10c32aaf242020a6d0408dd7c97f6e00c77f3573cd397e31d49847aef89dda5e27f62ca94b839ec3ffeddaea0c5b14d5a7aff40788aeb9a102609f98c3eeeaa8b24d5d34419160894accec9751b2a74fbd94626cf5362cf31a4aaf74ed2bf6160fcb13761161148c26f4f494faf4e14a268d14962363a38d983e9ac62605d19a9ab60061d68191289fe70bcfcce8f775ea8456159f20a946bec874c7a3ecf6c761e2b88293828e59bb3ebb86900c1ac6633ca0d167acb4fb9bbf40b15deee124f5c80279447a8431bda9f91240b1c16681b0903183fc30456ca9f888d92e5f888640b69c8115eb8737ce9d710477318d147edc605bc254ab336a22cc8c6337decc65d085ccaa290991a47967d0f7fcaca6df618be04d30d4fb0031f40eefb0eaa12360cbafcb86b06966c8aa6c58dc5e2a0c6bd34489816cd7a1648e45a96aa412b2d4e64af0eeebddf50ed61f838e607d03c2e6fac6f0c14243c71947d3beac57261d25df74935cf299578f0ff2d23e6b0742156bd1335a65b35bb8efff886600be41e00ae37a6484b1a4f5398efaecf40cae77b0ab4ea3d354e88c73b651657982f960a1e7cda087cf7c2461bcaa4b5e4827aaf45e28c19eadcc0944b3d447dd7c239652ef5ac029e29f8c3e07ca1337e6aee26c658376186a24227da0658130bef3b33b8b6d74892681cd0dbe4f56c84809be6a6872751b9d9550eaa4a401a300980910d7e1ba12362aeec023be6c8cee85c3c3c8e2ccb6eeadc8a51b3ada5dfa5710232b1d732559dea547a219da137bb778911e2fbe46f379b6e57247e05af125a9d15ab5811fcbacb8c6c3fc9860286f97048079978470afc463e93b7c8e9e62e0dd6a2c67d2f78dfaa94c1c3d9ac6ea27689c207abc43e51293f3aaf7cb819b73698afe2206da286406a93f0b0508567e1987770315cfc3bf7dda77507e29d806c47bc89b052063af96e0194274ae2f5965130824619a483b821a1c81be1bb957a560dc1e21db271a524fb45491f2a12f67954ecd1cd334e6af9b9356c9874e9841401f1b6d53bf07caf56eaad4979a4b5b7b96587b008841b95d4966ad9bc2370f3af838e94c4271aa9a50c3c2397ed6bfbae52950f83c0cc6e35e7b4aa50beff0c1cecf0d524ddcad47573b8d01369a29895b235235d6449b120632142bdee2cf06c73c1c7af6a6b8e5b284e5a91cfd60c388b1f262398ed1437510c1c9c063de94bb67d7e344ebb95b667fc91c599b9a5b1ba7de3d8cb034629990db9ebd93d05b6c3a6b3f895baadf53b7cd4d0b8d2ae79bac17dccd3ab1fc0bf19383dcb137e70a6cd473e93d696c848cb8108c5da39357b57237d956ca2a9e604acf4f1259549af049254cbb76af9507f0c15d7aaf8150d0c49fc6414104b1bff33747a0ec5ab507835487ce5c60e61d9af4314e5dfdb35cf6be6d2a53192666eb116ff4344eb20ae04c67493e8e2337e1cb3670580588979fdce339592be480554b68a51e5817b416e7e0be822d49b031315f8060b4b50ca0f8466eba18177fb4d1de4c11e6e668bf877a07519a48c2619f181f16d12077b05be0064f3c2f81c6d6e70f25f5ce4ef3edd41ee215cb250e700284c743aabada3fc21971dbf941639c1d40082ac3af9383b73f14c560a7d5deb4b5666f42f584a9e</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
        <tags>
            
            <tag> 数据库原理 </tag>
            
            <tag> 课程实验 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>软件/环境 安装/使用</title>
      <link href="/2022/06/18/%E8%BD%AF%E4%BB%B6%E8%AE%B0%E5%BD%95/"/>
      <url>/2022/06/18/%E8%BD%AF%E4%BB%B6%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<h2 id="navicat-可视化操作数据库软件"><a href="#navicat-可视化操作数据库软件" class="headerlink" title="navicat 可视化操作数据库软件"></a>navicat 可视化操作数据库软件</h2><p>  安装 <a href="https://blog.csdn.net/weixin_45764675/article/details/107882887">https://blog.csdn.net/weixin_45764675/article/details/107882887</a></p><p>  使用 <a href="https://blog.csdn.net/qq_45069279/article/details/105919312">https://blog.csdn.net/qq_45069279/article/details/105919312</a></p><h2 id="Oracle-数据库软件"><a href="#Oracle-数据库软件" class="headerlink" title="Oracle 数据库软件"></a>Oracle 数据库软件</h2><p>  安装<br>  使用<br>  服务名查看与配置 <a href="https://blog.csdn.net/weking1024/article/details/80814195">https://blog.csdn.net/weking1024/article/details/80814195</a></p><h2 id="OCCI-库-Oracle-C-Call-Interface"><a href="#OCCI-库-Oracle-C-Call-Interface" class="headerlink" title="OCCI 库 Oracle C++ Call Interface"></a>OCCI 库 Oracle C++ Call Interface</h2><p>  安装 <a href="https://www.oracle.com/database/technologies/instant-client/winx64-64-downloads.html">https://www.oracle.com/database/technologies/instant-client/winx64-64-downloads.html</a><br>  使用 <a href="https://blog.csdn.net/lishenluo/article/details/106078879">https://blog.csdn.net/lishenluo/article/details/106078879</a><br>  配置VS使用 <a href="https://blog.csdn.net/weixin_43224306/article/details/123620934">https://blog.csdn.net/weixin_43224306/article/details/123620934</a><br>  教程 <a href="http://www.manongjc.com/detail/24-jnjbeybzrhngklh.html">http://www.manongjc.com/detail/24-jnjbeybzrhngklh.html</a><br>  <a href="https://wenku.baidu.com/view/1af0329e66ce0508763231126edb6f1aff0071e3.html">https://wenku.baidu.com/view/1af0329e66ce0508763231126edb6f1aff0071e3.html</a></p><p>  中文乱码解决方法<br>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">env = Environment::createEnvironment(&quot;ZHS16GBK&quot;, &quot;UTF8&quot;);</span><br></pre></td></tr></table></figure></p><p>  MFC 下 OCCI getString 报内存错误 <a href="https://bbs.csdn.net/topics/380152461">https://bbs.csdn.net/topics/380152461</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
